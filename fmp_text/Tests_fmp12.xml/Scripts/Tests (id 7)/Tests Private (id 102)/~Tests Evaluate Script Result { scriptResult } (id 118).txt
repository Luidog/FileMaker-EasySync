################################################################################
# PURPOSE:
#    Evaluate script result to determine if the test passed.
#
# PARAMETERS:
#    $scriptResult | the value returned by script called via scriptAlias
#
# RETURNS:
#    $error | a dictionary containing error data. ONLY for errors generated by this script.
#
# NOTES:
#    Am doing this process in a sub-script so that local variables created by the result test expression will be destroyed immediately after determining if this test passed.(rather than potentially overwritting local variables used by "~Tests: Run Current", or the return result of any other script)
#    Selector_TestParameter TO must contain a single record, which is the script currently being run.
#    I am avoiding the use of local variables since the scriptParameter may contain name value pairs in let notation which may be expanded to local variables via the "result test expression".
#
#REVISIONS:
#    2014-NOV-14	 Daniel Smith	- created
################################################################################
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"ASSIGN PARAMETERS" ]
#================================================================================
If [ // save script parameters to local variablesnot #Assign ( Get ( ScriptParameter ) )ornot VerifyVariablesNotEmpty ( ScriptRequiredParameterList ( "" ) ) ]
Set Variable [ $error; Value:ErrorApp ( 2 ; $~script.section ) ]
Exit Script [ Result: # ( "error" ; $error ) ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"EVALUATE RESULT TEST EXPRESSION" ]
#================================================================================
If [ IsEmpty ( sel_TPA__TestParameter::resultTestExpression  ) ]
Set Variable [ $result; Value:True/* If result test is empty, always pass */ ]
Else
If [ not IsValidExpression ( sel_TPA__TestParameter::resultTestExpression ) ]
Set Variable [ $EvaluationErrorCode; Value:EvaluationError ( Evaluate ( sel_TPA__TestParameter::resultTestExpression ) ) ]
Set Variable [ $error; Value: ErrorUnitTest ( 2 ; "resultExpression is not valid: " & ErrorFMPDescription ( $EvaluationErrorCode ) )& # ( "EvaluationError" ; $EvaluationErrorCode )& # ( "EvaluationErrorDescription" ; ErrorFMPDescription ( $EvaluationErrorCode ) ) ]
Perform Script [ “Logger: Create Entry ( logData )”; Parameter: LogData (	LogLevel2Warn ;	"")& # ( "error" ; $error ) ]
Set Field [ sel_TPA__TestParameter::resultPass; False ]
Exit Script [ Result: # ( "error" ; $error ) ]
End If
Set Variable [ $result; Value:Evaluate ( sel_TPA__TestParameter::resultTestExpression ) ]
If [ $result ≠ Trueand$result ≠ False ]
Set Variable [ $error; Value:ErrorUnitTest  ( 3 ; "resultExpression did not return a boolean result:¶" & $result )& # ( "result" ; $result ) ]
Perform Script [ “Logger: Create Entry ( logData )”; Parameter: LogData (	LogLevel2Warn ;	"")& # ( "error" ; $error ) ]
Set Field [ sel_TPA__TestParameter::resultPass; False ]
Exit Script [ Result: # ( "error" ; $error ) ]
End If
End If
#
Set Field [ sel_TPA__TestParameter::resultPass; $result ]
#
#
#
Set Variable [ $!; Value:""/** * This is a step that will not return an error. * * It's used to clear any errors reported by Get ( LastError ), so a calling script can use * Get ( LastError ) to test if an error occurred with the Perform Script step. * */ ]
Exit Script [ Result: ""/** * do not want to return $error to calling script here because the result text expression may be expecting an error * (when testing that a script fails when it should) * * since the calling script is expecting this script to return a result, I am returning an emtpy result here */ ]
#


---
Script:
  includeInMenu: 'False'
  runFullAccess: 'False'
  id: '118'
  name: '~Tests: Evaluate Script Result { scriptResult }'
  StepList:
    Step:
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '################################################################################'
      Text: '###############################################################################'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PURPOSE:'
      Text: ' PURPOSE:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    Evaluate script result to determine if the test passed.'
      Text: '    Evaluate script result to determine if the test passed.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PARAMETERS:'
      Text: ' PARAMETERS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $scriptResult | the value returned by script called via scriptAlias'
      Text: '    $scriptResult | the value returned by script called via scriptAlias'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# RETURNS:'
      Text: ' RETURNS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $error | a dictionary containing error data. ONLY for errors
        generated by this script.'
      Text: '    $error | a dictionary containing error data. ONLY for errors generated
        by this script.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# NOTES:'
      Text: ' NOTES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: |-
        #    Am doing this process in a sub-script so that local variables created by the result test expression will be destroyed immediately after determining if this test passed.

        (rather than potentially overwritting local variables used by "~Tests: Run Current", or the return result of any other script)
      Text: |2-
            Am doing this process in a sub-script so that local variables created by the result test expression will be destroyed immediately after determining if this test passed.

        (rather than potentially overwritting local variables used by "~Tests: Run Current", or the return result of any other script)
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    Selector_TestParameter TO must contain a single record, which
        is the script currently being run.'
      Text: '    Selector_TestParameter TO must contain a single record, which is
        the script currently being run.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    I am avoiding the use of local variables since the scriptParameter
        may contain name value pairs in let notation which may be expanded to local
        variables via the "result test expression".'
      Text: '    I am avoiding the use of local variables since the scriptParameter
        may contain name value pairs in let notation which may be expanded to local
        variables via the "result test expression".'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#REVISIONS:'
      Text: 'REVISIONS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: "#    \n2014-NOV-14\t Daniel Smith\n\t- created"
      Text: "    \n2014-NOV-14\t Daniel Smith\n\t- created"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '################################################################################'
      Text: '###############################################################################'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"ASSIGN PARAMETERS" ]
      Value:
        Calculation: '"ASSIGN PARAMETERS"'
        DisplayCalculation:
          Chunk: '"ASSIGN PARAMETERS"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: |-
        If [ // save script parameters to local variables
        not #Assign ( Get ( ScriptParameter ) )
        or
        not VerifyVariablesNotEmpty ( ScriptRequiredParameterList ( "" ) ) ]
      Calculation: |-
        // save script parameters to local variables
        not #Assign ( Get ( ScriptParameter ) )
        or
        not VerifyVariablesNotEmpty ( ScriptRequiredParameterList ( "" ) )
      DisplayCalculation:
        Chunk:
        - |
          // save script parameters to local variables
        - not
        - type: NoRef
          __content__: ' '
        - '#Assign'
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - |2
           ) )
        - or
        - type: NoRef
          __content__: |2+

        - not
        - type: NoRef
          __content__: ' '
        - VerifyVariablesNotEmpty
        - ' ( '
        - ScriptRequiredParameterList
        - ' ( "" ) )'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $error; Value:ErrorApp ( 2 ; $~script.section ) ]
      Value:
        Calculation: ErrorApp ( 2 ; $~script.section )
        DisplayCalculation:
          Chunk:
          - ErrorApp
          - ' ( 2 ; $~script.section )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $error
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: 'Exit Script [ Result: # ( "error" ; $error ) ]'
      Calculation: '# ( "error" ; $error )'
      DisplayCalculation:
        Chunk:
        - '#'
        - ' ( "error" ; $error )'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"EVALUATE RESULT TEST EXPRESSION"
        ]
      Value:
        Calculation: '"EVALUATE RESULT TEST EXPRESSION"'
        DisplayCalculation:
          Chunk: '"EVALUATE RESULT TEST EXPRESSION"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ IsEmpty ( sel_TPA__TestParameter::resultTestExpression  ) ]
      Calculation: IsEmpty ( sel_TPA__TestParameter::resultTestExpression  )
      DisplayCalculation:
        Chunk:
        - IsEmpty
        - ' ( '
        - type: FieldRef
          Field:
            table: sel_TPA__TestParameter
            id: '6'
            name: resultTestExpression
        - '  )'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $result; Value:True

        /* If result test is empty, always pass */ ]
      Value:
        Calculation: |-
          True

          /* If result test is empty, always pass */
        DisplayCalculation:
          Chunk:
          - 'True'
          - |2-


            /* If result test is empty, always pass */
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $result
    - enable: 'True'
      id: '69'
      name: Else
      StepText: Else
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ not IsValidExpression ( sel_TPA__TestParameter::resultTestExpression
        ) ]
      Calculation: not IsValidExpression ( sel_TPA__TestParameter::resultTestExpression
        )
      DisplayCalculation:
        Chunk:
        - not
        - type: NoRef
          __content__: ' '
        - IsValidExpression
        - ' ( '
        - type: FieldRef
          Field:
            table: sel_TPA__TestParameter
            id: '6'
            name: resultTestExpression
        - ' )'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $EvaluationErrorCode; Value:EvaluationError ( Evaluate
        ( sel_TPA__TestParameter::resultTestExpression ) ) ]
      Value:
        Calculation: EvaluationError ( Evaluate ( sel_TPA__TestParameter::resultTestExpression
          ) )
        DisplayCalculation:
          Chunk:
          - EvaluationError
          - ' ( '
          - Evaluate
          - ' ( '
          - type: FieldRef
            Field:
              table: sel_TPA__TestParameter
              id: '6'
              name: resultTestExpression
          - ' ) )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $EvaluationErrorCode
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $error; Value: ErrorUnitTest ( 2 ; "resultExpression is not valid: " & ErrorFMPDescription ( $EvaluationErrorCode ) )
        & # ( "EvaluationError" ; $EvaluationErrorCode )
        & # ( "EvaluationErrorDescription" ; ErrorFMPDescription ( $EvaluationErrorCode ) ) ]
      Value:
        Calculation: |2-
           ErrorUnitTest ( 2 ; "resultExpression is not valid: " & ErrorFMPDescription ( $EvaluationErrorCode ) )
          & # ( "EvaluationError" ; $EvaluationErrorCode )
          & # ( "EvaluationErrorDescription" ; ErrorFMPDescription ( $EvaluationErrorCode ) )
        DisplayCalculation:
          Chunk:
          - type: NoRef
            __content__: ' '
          - ErrorUnitTest
          - ' ( 2 ; "resultExpression is not valid: " & '
          - ErrorFMPDescription
          - " ( $EvaluationErrorCode ) )\n& "
          - '#'
          - " ( \"EvaluationError\" ; $EvaluationErrorCode )\n& "
          - '#'
          - ' ( "EvaluationErrorDescription" ; '
          - ErrorFMPDescription
          - ' ( $EvaluationErrorCode ) )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $error
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “Logger: Create Entry ( logData )”; Parameter: LogData
        (\n\tLogLevel2Warn ;\n\t\"\"\n)\n& # ( \"error\" ; $error ) ]"
      Calculation: "LogData (\n\tLogLevel2Warn ;\n\t\"\"\n)\n& # ( \"error\" ; $error
        )"
      DisplayCalculation:
        Chunk:
        - LogData
        - " (\n\t"
        - LogLevel2Warn
        - " ;\n\t\"\"\n)\n& "
        - '#'
        - ' ( "error" ; $error )'
      Script:
        id: '32'
        name: 'Logger: Create Entry ( logData )'
    - enable: 'True'
      id: '76'
      name: Set Field
      StepText: Set Field [ sel_TPA__TestParameter::resultPass; False ]
      Calculation: 'False'
      DisplayCalculation:
        Chunk: 'False'
      Field:
        table: sel_TPA__TestParameter
        id: '8'
        name: resultPass
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: 'Exit Script [ Result: # ( "error" ; $error ) ]'
      Calculation: '# ( "error" ; $error )'
      DisplayCalculation:
        Chunk:
        - '#'
        - ' ( "error" ; $error )'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $result; Value:Evaluate ( sel_TPA__TestParameter::resultTestExpression
        ) ]
      Value:
        Calculation: Evaluate ( sel_TPA__TestParameter::resultTestExpression )
        DisplayCalculation:
          Chunk:
          - Evaluate
          - ' ( '
          - type: FieldRef
            Field:
              table: sel_TPA__TestParameter
              id: '6'
              name: resultTestExpression
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $result
    - enable: 'True'
      id: '68'
      name: If
      StepText: |-
        If [ $result ≠ True
        and
        $result ≠ False ]
      Calculation: |-
        $result ≠ True
        and
        $result ≠ False
      DisplayCalculation:
        Chunk:
        - '$result ≠ '
        - 'True'
        - type: NoRef
          __content__: |2+

        - and
        - "\n$result ≠ "
        - 'False'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $error; Value:ErrorUnitTest  ( 3 ; "resultExpression did not return a boolean result:¶" & $result )
        & # ( "result" ; $result ) ]
      Value:
        Calculation: |-
          ErrorUnitTest  ( 3 ; "resultExpression did not return a boolean result:¶" & $result )
          & # ( "result" ; $result )
        DisplayCalculation:
          Chunk:
          - ErrorUnitTest
          - "  ( 3 ; \"resultExpression did not return a boolean result:¶\" & $result
            )\n& "
          - '#'
          - ' ( "result" ; $result )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $error
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “Logger: Create Entry ( logData )”; Parameter: LogData
        (\n\tLogLevel2Warn ;\n\t\"\"\n)\n& # ( \"error\" ; $error ) ]"
      Calculation: "LogData (\n\tLogLevel2Warn ;\n\t\"\"\n)\n& # ( \"error\" ; $error
        )"
      DisplayCalculation:
        Chunk:
        - LogData
        - " (\n\t"
        - LogLevel2Warn
        - " ;\n\t\"\"\n)\n& "
        - '#'
        - ' ( "error" ; $error )'
      Script:
        id: '32'
        name: 'Logger: Create Entry ( logData )'
    - enable: 'True'
      id: '76'
      name: Set Field
      StepText: Set Field [ sel_TPA__TestParameter::resultPass; False ]
      Calculation: 'False'
      DisplayCalculation:
        Chunk: 'False'
      Field:
        table: sel_TPA__TestParameter
        id: '8'
        name: resultPass
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: 'Exit Script [ Result: # ( "error" ; $error ) ]'
      Calculation: '# ( "error" ; $error )'
      DisplayCalculation:
        Chunk:
        - '#'
        - ' ( "error" ; $error )'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '76'
      name: Set Field
      StepText: Set Field [ sel_TPA__TestParameter::resultPass; $result ]
      Calculation: $result
      DisplayCalculation:
        Chunk: $result
      Field:
        table: sel_TPA__TestParameter
        id: '8'
        name: resultPass
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $!; Value:""
        /**
         * This is a step that will not return an error.
         *
         * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
         * Get ( LastError ) to test if an error occurred with the Perform Script step.
         *
         */ ]
      Value:
        Calculation: |-
          ""
          /**
           * This is a step that will not return an error.
           *
           * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
           * Get ( LastError ) to test if an error occurred with the Perform Script step.
           *
           */
        DisplayCalculation:
          Chunk: |-
            ""
            /**
             * This is a step that will not return an error.
             *
             * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
             * Get ( LastError ) to test if an error occurred with the Perform Script step.
             *
             */
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $!
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: |-
        Exit Script [ Result: ""

        /**
         * do not want to return $error to calling script here because the result text expression may be expecting an error
         * (when testing that a script fails when it should)
         *
         * since the calling script is expecting this script to return a result, I am returning an emtpy result here
         */ ]
      Calculation: |-
        ""

        /**
         * do not want to return $error to calling script here because the result text expression may be expecting an error
         * (when testing that a script fails when it should)
         *
         * since the calling script is expecting this script to return a result, I am returning an emtpy result here
         */
      DisplayCalculation:
        Chunk: |-
          ""

          /**
           * do not want to return $error to calling script here because the result text expression may be expecting an error
           * (when testing that a script fails when it should)
           *
           * since the calling script is expecting this script to return a result, I am returning an emtpy result here
           */
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
