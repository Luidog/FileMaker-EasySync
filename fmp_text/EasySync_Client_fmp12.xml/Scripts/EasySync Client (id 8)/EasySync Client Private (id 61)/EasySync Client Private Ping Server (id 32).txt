#################################################################################
# PURPOSE:
#    "Pings" the server to confirm that it is available, and (optionally) that the connection is fast enough.
#
# CONTEXT: EasySync_Payloads
#
# PARAMETERS: none
#
# RETURNS:
#    $error | a dictionary containing error data
#
# VARIABLES:
#
# DEPENDENCIES:
#
# NOTES:
#
# REVISIONS:
#    2014-04-18			Tim Dietrich (timdietrich@me.com)	Initial version.	This script was split from "Sync with Server" due to its increasing complexity.2014-04-20	Tim Dietrich (timdietrich@me.com)	Added code to allow the user to easily email their administrator if their device	isn't on the white list.	2014-04-23	Tim Dietrich (timdietrich@me.com)	"Get ( SystemIPAddress )" is now comma-delimited when passed as a param.	This resolves an issue that comes up if the client has multiple IPs.
#################################################################################
Set Variable [ $~script.errorType; Value:"Module: EasySync Client" ]
#
#
#
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 5 ;	~message = "start script"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#
#
Perform Script [ “EasySync Client: Config: Show Message”; Parameter: "Testing Connection..." ]
#
#
#
Loop
# single-pass loop for error trapping
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"SET VARIABLES" ]
#================================================================================
Set Variable [ $$easydeploy; Value:/* Is the solution using EasyDeploy? */ExecuteSQL ( "SELECT COUNT ( * ) FROM FileMaker_Tables WHERE TableName = 'EasyDeploy'"; ""; "" ) ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"PING SERVER" ]
#================================================================================
Set Variable [ $ping_start; Value:Get ( CurrentTimeUTCMilliseconds ) ]
#
Perform Script [ “EasySync Client: Config: Ping Server”; Parameter: "$device_id = " & Quote ( $device_id ) & " ;¶"& "$client_version = " & Quote ( $$client_version ) & " ;¶"/* * older versions of EasySync sent all this data to Ping script * but none of it was being used by that script so I've disabled it *Substitute ( Get ( SystemIPAddress ); ¶; ", " ) & ¶ & Substitute ( Get ( SystemNICAddress ); ¶; ", " ) & ¶ & Get ( SystemPlatform ) & ¶ & Get ( SystemVersion ) & ¶ & Get ( Device ) & ¶ & Get ( NetworkProtocol ) & ¶ & Get ( NetworkType ) & If ( not IsEmpty ( $$additional_ping_info ); ¶ & $$additional_ping_info; "" )*/ ]
If [ Get ( LastError ) ]
Exit Loop If [ Let ( [	theErrorCode = Get ( LastError ) ;	theErrorDescription = "FileMaker Error" ;	theErrorInfo = "section: " & $~script.section & ". Make sure the perform script step calls the correct script and the user has permission to run it." ;	theErrorType = "Fmp" ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign script result to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& Get ( ScriptResult )	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign subscript error info to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section & ". $error could not be evaluated.";	theErrorInfo = "after performing script: '" & $~script.subscript & "'. $error could not be evaluated." ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ $errorCode ]
Exit Loop If [ /* subscript error has been saved to local variable(s) */Let ( [	/* add the current script's name to a list of scripts that triggered this error */	~scriptStack = List (		Get ( ScriptName ) ;		If ( IsEmpty ( $scriptStack ) ;			/* start the stack off with the script's name that triggered the error */			$ScriptName ;			$scriptStack		)	) ;	/* append this data to the error */	$error =		$error		& "$scriptStack = " & Quote ( ~scriptStack ) & " ;¶"] ;	True) ]
End If
#
Set Variable [ $ping_time; Value:Get ( CurrentTimeUTCMilliseconds ) - $ping_start ]
#
Set Variable [ $$EASYSYNC.SERVER.VISIBLE; Value:$server_file_visible/* save this script result so it can be accessed by the close server file script later */ ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"PING ERROR" ]
#================================================================================
#If there was a problem with the ping...
If [ $ping_result_code < 1 ]
#
If [ $ping_result_code = -1 ]
Show Custom Dialog [ Title: "Sync Error"; Message: "This device is not eligible for syncing. Do you want to email the Device ID (" & Get ( PersistentID ) & ") to your system administrator?"; Default Button: “Yes”, Commit: “Yes”; Button 2: “No”, Commit: “No” ]
If [ Get ( LastMessageChoice ) = 1 ]
Send Mail [ Send via E-mail Client; Subject: "Please add my device to the \"White List\""; Message: "My device cannot sync because it isn't on the \"white list.\"¶¶The device ID is: " & Get ( PersistentID ) & "¶¶Thank you." ]
End If
# TODO: determine what error code to use here(may want to revise the server's ping script before I do this)
Exit Loop If [ Let ( [	theErrorCode = -1 ;	theErrorDescription = "Ping Failed" ;	theErrorInfo = "This device is not eligible for syncing. (Device ID " & Get ( PersistentID ) & ")" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$ping_result_code = " & Quote ( $ping_result_code ) & " ;¶"	& "$messageShown = True ;¶"] ;	True) ]
#
Else If [ $ping_result_code = -2 ]
# TODO: determine what error code to use here(may want to revise the server's ping script before I do this)
Exit Loop If [ Let ( [	theErrorCode = -1 ;	theErrorDescription = "Ping Failed" ;	theErrorInfo = "This device is not allowed to sync. (Device ID " & Get ( PersistentID ) & ")" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$ping_result_code = " & Quote ( $ping_result_code ) & " ;¶"] ;	True) ]
#
Else If [ $ping_result_code = -3 ]
Perform Script [ “EasySync Client: API: Wipe” ]
If [ Get ( LastError ) ]
Exit Loop If [ Let ( [	theErrorCode = Get ( LastError ) ;	theErrorDescription = "FileMaker Error" ;	theErrorInfo = "section: " & $~script.section & ". Make sure the perform script step calls the correct script and the user has permission to run it." ;	theErrorType = "Fmp" ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign script result to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& Get ( ScriptResult )	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign subscript error info to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section & ". $error could not be evaluated.";	theErrorInfo = "after performing script: '" & $~script.subscript & "'. $error could not be evaluated." ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ $errorCode ]
Exit Loop If [ /* subscript error has been saved to local variable(s) */Let ( [	/* add the current script's name to a list of scripts that triggered this error */	~scriptStack = List (		Get ( ScriptName ) ;		If ( IsEmpty ( $scriptStack ) ;			/* start the stack off with the script's name that triggered the error */			$ScriptName ;			$scriptStack		)	) ;	/* append this data to the error */	$error =		$error		& "$scriptStack = " & Quote ( ~scriptStack ) & " ;¶"] ;	True) ]
End If
#
Perform Script [ “EasySync Client: API: Reset” ]
If [ Get ( LastError ) ]
Exit Loop If [ Let ( [	theErrorCode = Get ( LastError ) ;	theErrorDescription = "FileMaker Error" ;	theErrorInfo = "section: " & $~script.section & ". Make sure the perform script step calls the correct script and the user has permission to run it." ;	theErrorType = "Fmp" ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign script result to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& Get ( ScriptResult )	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign subscript error info to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section & ". $error could not be evaluated.";	theErrorInfo = "after performing script: '" & $~script.subscript & "'. $error could not be evaluated." ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ $errorCode ]
Exit Loop If [ /* subscript error has been saved to local variable(s) */Let ( [	/* add the current script's name to a list of scripts that triggered this error */	~scriptStack = List (		Get ( ScriptName ) ;		If ( IsEmpty ( $scriptStack ) ;			/* start the stack off with the script's name that triggered the error */			$ScriptName ;			$scriptStack		)	) ;	/* append this data to the error */	$error =		$error		& "$scriptStack = " & Quote ( ~scriptStack ) & " ;¶"] ;	True) ]
End If
#
# TODO: determine what error code to use here(may want to revise the server's ping script before I do this)
Exit Loop If [ Let ( [	theErrorCode = -1 ;	theErrorDescription = "Ping Failed" ;	theErrorInfo = "This device's local data has been removed." ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$ping_result_code = " & Quote ( $ping_result_code ) & " ;¶"] ;	True) ]
#
Else If [ $ping_result_code = -4 ]
# TODO: determine what error code to use here(may want to revise the server's ping script before I do this)
Set Variable [ $error; Value:Let ( [	theErrorCode = -1 ;	theErrorDescription = "Ping Failed" ;	theErrorInfo = "This version of the solution is obsolete and cannot sync with the hosted database." ;	theErrorType = $~script.errorType] ;	"$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$ping_result_code = " & Quote ( $ping_result_code ) & " ;¶") ]
If [ $$easydeploy ]
Show Custom Dialog [ Title: "Sync Error"; Message: "This version of the solution is obsolete, and cannot sync with the hosted database.¶¶Would you like to upgrade the solution now?"; Default Button: “Yes”, Commit: “Yes”; Button 2: “No”, Commit: “No” ]
If [ Get ( LastMessageChoice ) = 1 ]
Perform Script [ “Upgrade Solution” ]
Halt Script
End If
Set Variable [ $error; Value:$error& "$messageShown = True ;¶" ]
End If
Exit Loop If [ True ]
#
Else
# TODO: determine what error code to use here(may want to revise the server's ping script before I do this)
Exit Loop If [ Let ( [	theErrorCode = -1 ;	theErrorDescription = "Ping Failed" ;	theErrorInfo = "Unable to connect to the server." ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$ping_result_code = " & Quote ( $ping_result_code ) & " ;¶"] ;	True) ]
End If
#
# TODO: determine what error code to use here(may want to revise the server's ping script before I do this)
Exit Loop If [ Let ( [	theErrorCode = -1 ;	theErrorDescription = "Ping Failed" ;	theErrorInfo = "$ping_result_code: " & $ping_result_code ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"OUTDATED CLIENT" ]
#================================================================================
#Is this version of the mobile client out of date?
If [ $ping_result_code = 2 ]
If [ $$easydeploy ]
Set Variable [ $$easydeploy_suggest_upgrade; Value:1 ]
Else
Show Custom Dialog [ Title: "Notice"; Message: "This version of the solution is out-of-date. The sync will continue. However, you should contact your administrator for information on obtaining an updated version. "; Default Button: “OK”, Commit: “Yes” ]
End If
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"SLOW PING" ]
#================================================================================
#Was the ping response too slow?
If [ $ping_time > $$max_ping_time ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 3 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 3 ;	~message = "Ping roundtrip time was slow: " & $ping_time & " Milliseconds"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
If [ $$slow_connection_behavior = "warn" ]
Show Custom Dialog [ Title: "Sync Error"; Message: "It appears that your connection to the server is slow. Would you like to continue with the sync, or cancel?"; Default Button: “Cancel”, Commit: “Yes”; Button 2: “Continue”, Commit: “No” ]
If [ Get ( LastMessageChoice ) = 1 ]
Exit Loop If [ Let ( [	theErrorCode = 1 ;	theErrorDescription = "User canceled action" ;	theErrorInfo = "Slow Ping (" & $ping_time & "), user aborted" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	& "$messageShown = True ;¶"] ;	True) ]
End If
Else
# TODO: determine what error code to use here(may want to revise the server's ping script before I do this)
Exit Loop If [ Let ( [	theErrorCode = -1 ;	theErrorDescription = "Slow Ping; forced abort" ;	theErrorInfo = "The connection to the server is too slow to sync. (Ping time was " & $ping_time & " ms.)" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
Else If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Ping roundtrip time was ok: " & $ping_time & " Milliseconds"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#
#
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# end single-pass loop for error trapping
Exit Loop If [ True ]
End Loop
#
#
#
Set Variable [ $!; Value:""/** * This is a step that will not return an error. * * It's used to clear any errors reported by Get ( LastError ), so a calling script can use * Get ( LastError ) to test if an error occurred with the Perform Script step. * */ ]
Exit Script [ Result: "$error = " & Quote ( $error ) & " ;¶" ]
#


---
Script:
  includeInMenu: 'False'
  runFullAccess: 'False'
  id: '32'
  name: 'EasySync Client: Private: Ping Server'
  StepList:
    Step:
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#################################################################################'
      Text: '################################################################################'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PURPOSE:'
      Text: ' PURPOSE:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    "Pings" the server to confirm that it is available, and (optionally)
        that the connection is fast enough.'
      Text: '    "Pings" the server to confirm that it is available, and (optionally)
        that the connection is fast enough.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# CONTEXT: EasySync_Payloads'
      Text: ' CONTEXT: EasySync_Payloads'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PARAMETERS: none'
      Text: ' PARAMETERS: none'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# RETURNS:'
      Text: ' RETURNS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $error | a dictionary containing error data'
      Text: '    $error | a dictionary containing error data'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# VARIABLES:'
      Text: ' VARIABLES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# DEPENDENCIES:'
      Text: ' DEPENDENCIES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# NOTES:'
      Text: ' NOTES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# REVISIONS:'
      Text: ' REVISIONS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: "#    \n2014-04-18\t\t\n\tTim Dietrich (timdietrich@me.com)\n\tInitial
        version.\n\tThis script was split from \"Sync with Server\" due to its increasing
        complexity.\n\n2014-04-20\n\tTim Dietrich (timdietrich@me.com)\n\tAdded code
        to allow the user to easily email their administrator if their device\n\tisn't
        on the white list.\t\n\n2014-04-23\n\tTim Dietrich (timdietrich@me.com)\n\t\"Get
        ( SystemIPAddress )\" is now comma-delimited when passed as a param.\n\tThis
        resolves an issue that comes up if the client has multiple IPs."
      Text: "    \n2014-04-18\t\t\n\tTim Dietrich (timdietrich@me.com)\n\tInitial
        version.\n\tThis script was split from \"Sync with Server\" due to its increasing
        complexity.\n\n2014-04-20\n\tTim Dietrich (timdietrich@me.com)\n\tAdded code
        to allow the user to easily email their administrator if their device\n\tisn't
        on the white list.\t\n\n2014-04-23\n\tTim Dietrich (timdietrich@me.com)\n\t\"Get
        ( SystemIPAddress )\" is now comma-delimited when passed as a param.\n\tThis
        resolves an issue that comes up if the client has multiple IPs."
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#################################################################################'
      Text: '################################################################################'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: 'Set Variable [ $~script.errorType; Value:"Module: EasySync Client"
        ]'
      Value:
        Calculation: '"Module: EasySync Client"'
        DisplayCalculation:
          Chunk: '"Module: EasySync Client"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.errorType
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 5 ;\n\t~message = \"start script\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 5 ;\n\t~message = \"start script\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 5 ;\n\t~message = \"start script\"\n] ;\n\t\"$LogLevel
          = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: Config: Show Message”; Parameter:
        "Testing Connection..." ]'
      Calculation: '"Testing Connection..."'
      DisplayCalculation:
        Chunk: '"Testing Connection..."'
      Script:
        id: '67'
        name: 'EasySync Client: Config: Show Message'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# single-pass loop for error trapping'
      Text: ' single-pass loop for error trapping'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
      Text: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"SET VARIABLES" ]
      Value:
        Calculation: '"SET VARIABLES"'
        DisplayCalculation:
          Chunk: '"SET VARIABLES"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $$easydeploy; Value:/* Is the solution using EasyDeploy? */

        ExecuteSQL ( "SELECT COUNT ( * ) FROM FileMaker_Tables WHERE TableName = 'EasyDeploy'"; ""; "" ) ]
      Value:
        Calculation: |-
          /* Is the solution using EasyDeploy? */

          ExecuteSQL ( "SELECT COUNT ( * ) FROM FileMaker_Tables WHERE TableName = 'EasyDeploy'"; ""; "" )
        DisplayCalculation:
          Chunk:
          - |+
            /* Is the solution using EasyDeploy? */

          - ExecuteSQL
          - ' ( "SELECT COUNT ( * ) FROM FileMaker_Tables WHERE TableName = ''EasyDeploy''";
            ""; "" )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $$easydeploy
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"PING SERVER" ]
      Value:
        Calculation: '"PING SERVER"'
        DisplayCalculation:
          Chunk: '"PING SERVER"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $ping_start; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $ping_start
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Ping Server”; Parameter:
        \"$device_id = \" & Quote ( $device_id ) & \" ;¶\"\n& \"$client_version =
        \" & Quote ( $$client_version ) & \" ;¶\"\n\n\n/*\n * older versions of EasySync
        sent all this data to Ping script\n * but none of it was being used by that
        script so I've disabled it\n *\n\nSubstitute ( Get ( SystemIPAddress ); ¶;
        \", \" ) & ¶ & \nSubstitute ( Get ( SystemNICAddress ); ¶; \", \" ) & ¶ &
        \nGet ( SystemPlatform ) & ¶ & \nGet ( SystemVersion ) & ¶ & \nGet ( Device
        ) & ¶ & \nGet ( NetworkProtocol ) & ¶ & \nGet ( NetworkType ) & \nIf ( not
        IsEmpty ( $$additional_ping_info ); ¶ & $$additional_ping_info; \"\" )\n\n*/
        ]"
      Calculation: "\"$device_id = \" & Quote ( $device_id ) & \" ;¶\"\n& \"$client_version
        = \" & Quote ( $$client_version ) & \" ;¶\"\n\n\n/*\n * older versions of
        EasySync sent all this data to Ping script\n * but none of it was being used
        by that script so I've disabled it\n *\n\nSubstitute ( Get ( SystemIPAddress
        ); ¶; \", \" ) & ¶ & \nSubstitute ( Get ( SystemNICAddress ); ¶; \", \" )
        & ¶ & \nGet ( SystemPlatform ) & ¶ & \nGet ( SystemVersion ) & ¶ & \nGet (
        Device ) & ¶ & \nGet ( NetworkProtocol ) & ¶ & \nGet ( NetworkType ) & \nIf
        ( not IsEmpty ( $$additional_ping_info ); ¶ & $$additional_ping_info; \"\"
        )\n\n*/"
      DisplayCalculation:
        Chunk:
        - '"$device_id = " & '
        - Quote
        - " ( $device_id ) & \" ;¶\"\n& \"$client_version = \" & "
        - Quote
        - " ( $$client_version ) & \" ;¶\"\n\n\n/*\n * older versions of EasySync
          sent all this data to Ping script\n * but none of it was being used by that
          script so I've disabled it\n *\n\nSubstitute ( Get ( SystemIPAddress );
          ¶; \", \" ) & ¶ & \nSubstitute ( Get ( SystemNICAddress ); ¶; \", \" ) &
          ¶ & \nGet ( SystemPlatform ) & ¶ & \nGet ( SystemVersion ) & ¶ & \nGet (
          Device ) & ¶ & \nGet ( NetworkProtocol ) & ¶ & \nGet ( NetworkType ) & \nIf
          ( not IsEmpty ( $$additional_ping_info ); ¶ & $$additional_ping_info; \"\"
          )\n\n*/"
      Script:
        id: '53'
        name: 'EasySync Client: Config: Ping Server'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( LastError ) ]
      Calculation: Get ( LastError )
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - LastError
        - ' )'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\ttheErrorDescription = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section:
          \" & $~script.section & \". Make sure the perform script step calls the
          correct script and the user has permission to run it.\" ;\n\ttheErrorType
          = \"Fmp\" ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) ) ]"
      Calculation: "/* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign script result to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& "
        - Get
        - ' ( '
        - ScriptResult
        - " )\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n) )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType = \"
        & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode &
        \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) & \"
        ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" &
        Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$~script.section = \" & Quote
        ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) ) ]"
      Calculation: "/* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign subscript error info to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n)
          )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing
        script: '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)
        ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \".
        $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing script:
        '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \". $error could
          not be evaluated.\";\n\ttheErrorInfo = \"after performing script: '\" &
          $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $errorCode ]
      Calculation: $errorCode
      DisplayCalculation:
        Chunk: $errorCode
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /* subscript error has been saved to local variable(s)
        */\n\nLet ( [\n\t/* add the current script's name to a list of scripts that
        triggered this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf
        ( IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "/* subscript error has been saved to local variable(s) */\n\nLet
        ( [\n\t/* add the current script's name to a list of scripts that triggered
        this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf (
        IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - |+
          /* subscript error has been saved to local variable(s) */

        - Let
        - " ( [\n\t/* add the current script's name to a list of scripts that triggered
          this error */\n\t~scriptStack = "
        - List
        - " (\n\t\t"
        - Get
        - ' ( '
        - ScriptName
        - " ) ;\n\t\t"
        - If
        - ' ( '
        - IsEmpty
        - " ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's name
          that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
          ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
          \"$scriptStack = \" & "
        - Quote
        - " ( ~scriptStack ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $ping_time; Value:Get ( CurrentTimeUTCMilliseconds
        ) - $ping_start ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds ) - $ping_start
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $ping_start'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $ping_time
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $$EASYSYNC.SERVER.VISIBLE; Value:$server_file_visible

        /* save this script result so it can be accessed by the close server file script later */ ]
      Value:
        Calculation: |-
          $server_file_visible

          /* save this script result so it can be accessed by the close server file script later */
        DisplayCalculation:
          Chunk: |-
            $server_file_visible

            /* save this script result so it can be accessed by the close server file script later */
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $$EASYSYNC.SERVER.VISIBLE
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"PING ERROR" ]
      Value:
        Calculation: '"PING ERROR"'
        DisplayCalculation:
          Chunk: '"PING ERROR"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If there was a problem with the ping...'
      Text: If there was a problem with the ping...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $ping_result_code < 1 ]
      Calculation: $ping_result_code < 1
      DisplayCalculation:
        Chunk: $ping_result_code < 1
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $ping_result_code = -1 ]
      Calculation: $ping_result_code = -1
      DisplayCalculation:
        Chunk: $ping_result_code = -1
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: "Sync Error"; Message: "This device is
        not eligible for syncing. Do you want to email the Device ID (" & Get ( PersistentID
        ) & ") to your system administrator?"; Default Button: “Yes”, Commit: “Yes”;
        Button 2: “No”, Commit: “No” ]'
      Title:
        Calculation: '"Sync Error"'
        DisplayCalculation:
          Chunk: '"Sync Error"'
      Message:
        Calculation: '"This device is not eligible for syncing. Do you want to email
          the Device ID (" & Get ( PersistentID ) & ") to your system administrator?"'
        DisplayCalculation:
          Chunk:
          - '"This device is not eligible for syncing. Do you want to email the Device
            ID (" & '
          - Get
          - ' ( '
          - PersistentID
          - ' ) & ") to your system administrator?"'
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"Yes"'
          DisplayCalculation:
            Chunk: '"Yes"'
        - CommitState: 'False'
          Calculation: '"No"'
          DisplayCalculation:
            Chunk: '"No"'
        - CommitState: 'False'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( LastMessageChoice ) = 1 ]
      Calculation: Get ( LastMessageChoice ) = 1
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - LastMessageChoice
        - ' ) = 1'
    - enable: 'True'
      id: '63'
      name: Send Mail
      StepText: 'Send Mail [ Send via E-mail Client; Subject: "Please add my device
        to the \"White List\""; Message: "My device cannot sync because it isn''t
        on the \"white list.\"¶¶The device ID is: " & Get ( PersistentID ) & "¶¶Thank
        you." ]'
      NoInteract:
        state: 'False'
      Subject:
        Calculation: '"Please add my device to the \"White List\""'
        DisplayCalculation:
          Chunk: '"Please add my device to the \"White List\""'
      Message:
        Calculation: '"My device cannot sync because it isn''t on the \"white list.\"¶¶The
          device ID is: " & Get ( PersistentID ) & "¶¶Thank you."'
        DisplayCalculation:
          Chunk:
          - '"My device cannot sync because it isn''t on the \"white list.\"¶¶The
            device ID is: " & '
          - Get
          - ' ( '
          - PersistentID
          - ' ) & "¶¶Thank you."'
      MultipleEmails:
        state: 'False'
      SendViaSMTP:
        state: 'False'
      SMTPEncryptionType: 
      SMTPAuthenticationType: 
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: |-
        # TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
      Text: |2-
         TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription
        = \"Ping Failed\" ;\n\ttheErrorInfo = \"This device is not eligible for syncing.
        (Device ID \" & Get ( PersistentID ) & \")\" ;\n\ttheErrorType = $~script.errorType
        ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" &
        Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n\n\t&
        \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$ping_result_code
        = \" & Quote ( $ping_result_code ) & \" ;¶\"\n\t& \"$messageShown = True ;¶\"\n]
        ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Ping
        Failed\" ;\n\ttheErrorInfo = \"This device is not eligible for syncing. (Device
        ID \" & Get ( PersistentID ) & \")\" ;\n\ttheErrorType = $~script.errorType
        ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" &
        Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n\n\t&
        \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$ping_result_code
        = \" & Quote ( $ping_result_code ) & \" ;¶\"\n\t& \"$messageShown = True ;¶\"\n]
        ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Ping Failed\" ;\n\ttheErrorInfo
          = \"This device is not eligible for syncing. (Device ID \" & "
        - Get
        - ' ( '
        - PersistentID
        - " ) & \")\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType
          = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$ping_result_code = \" & "
        - Quote
        - " ( $ping_result_code ) & \" ;¶\"\n\t& \"$messageShown = True ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $ping_result_code = -2 ]
      Calculation: $ping_result_code = -2
      DisplayCalculation:
        Chunk: $ping_result_code = -2
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: |-
        # TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
      Text: |2-
         TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription
        = \"Ping Failed\" ;\n\ttheErrorInfo = \"This device is not allowed to sync.
        (Device ID \" & Get ( PersistentID ) & \")\" ;\n\ttheErrorType = $~script.errorType
        ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" &
        Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n\n\t&
        \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$ping_result_code
        = \" & Quote ( $ping_result_code ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Ping
        Failed\" ;\n\ttheErrorInfo = \"This device is not allowed to sync. (Device
        ID \" & Get ( PersistentID ) & \")\" ;\n\ttheErrorType = $~script.errorType
        ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" &
        Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n\n\t&
        \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$ping_result_code
        = \" & Quote ( $ping_result_code ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Ping Failed\" ;\n\ttheErrorInfo
          = \"This device is not allowed to sync. (Device ID \" & "
        - Get
        - ' ( '
        - PersistentID
        - " ) & \")\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType
          = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$ping_result_code = \" & "
        - Quote
        - " ( $ping_result_code ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $ping_result_code = -3 ]
      Calculation: $ping_result_code = -3
      DisplayCalculation:
        Chunk: $ping_result_code = -3
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: API: Wipe” ]'
      Script:
        id: '80'
        name: 'EasySync Client: API: Wipe'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( LastError ) ]
      Calculation: Get ( LastError )
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - LastError
        - ' )'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\ttheErrorDescription = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section:
          \" & $~script.section & \". Make sure the perform script step calls the
          correct script and the user has permission to run it.\" ;\n\ttheErrorType
          = \"Fmp\" ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) ) ]"
      Calculation: "/* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign script result to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& "
        - Get
        - ' ( '
        - ScriptResult
        - " )\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n) )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType = \"
        & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode &
        \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) & \"
        ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" &
        Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$~script.section = \" & Quote
        ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) ) ]"
      Calculation: "/* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign subscript error info to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n)
          )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing
        script: '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)
        ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \".
        $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing script:
        '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \". $error could
          not be evaluated.\";\n\ttheErrorInfo = \"after performing script: '\" &
          $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $errorCode ]
      Calculation: $errorCode
      DisplayCalculation:
        Chunk: $errorCode
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /* subscript error has been saved to local variable(s)
        */\n\nLet ( [\n\t/* add the current script's name to a list of scripts that
        triggered this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf
        ( IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "/* subscript error has been saved to local variable(s) */\n\nLet
        ( [\n\t/* add the current script's name to a list of scripts that triggered
        this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf (
        IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - |+
          /* subscript error has been saved to local variable(s) */

        - Let
        - " ( [\n\t/* add the current script's name to a list of scripts that triggered
          this error */\n\t~scriptStack = "
        - List
        - " (\n\t\t"
        - Get
        - ' ( '
        - ScriptName
        - " ) ;\n\t\t"
        - If
        - ' ( '
        - IsEmpty
        - " ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's name
          that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
          ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
          \"$scriptStack = \" & "
        - Quote
        - " ( ~scriptStack ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: API: Reset” ]'
      Script:
        id: '73'
        name: 'EasySync Client: API: Reset'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( LastError ) ]
      Calculation: Get ( LastError )
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - LastError
        - ' )'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\ttheErrorDescription = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section:
          \" & $~script.section & \". Make sure the perform script step calls the
          correct script and the user has permission to run it.\" ;\n\ttheErrorType
          = \"Fmp\" ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) ) ]"
      Calculation: "/* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign script result to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& "
        - Get
        - ' ( '
        - ScriptResult
        - " )\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n) )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType = \"
        & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode &
        \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) & \"
        ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" &
        Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$~script.section = \" & Quote
        ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) ) ]"
      Calculation: "/* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign subscript error info to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n)
          )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing
        script: '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)
        ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \".
        $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing script:
        '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \". $error could
          not be evaluated.\";\n\ttheErrorInfo = \"after performing script: '\" &
          $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $errorCode ]
      Calculation: $errorCode
      DisplayCalculation:
        Chunk: $errorCode
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /* subscript error has been saved to local variable(s)
        */\n\nLet ( [\n\t/* add the current script's name to a list of scripts that
        triggered this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf
        ( IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "/* subscript error has been saved to local variable(s) */\n\nLet
        ( [\n\t/* add the current script's name to a list of scripts that triggered
        this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf (
        IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - |+
          /* subscript error has been saved to local variable(s) */

        - Let
        - " ( [\n\t/* add the current script's name to a list of scripts that triggered
          this error */\n\t~scriptStack = "
        - List
        - " (\n\t\t"
        - Get
        - ' ( '
        - ScriptName
        - " ) ;\n\t\t"
        - If
        - ' ( '
        - IsEmpty
        - " ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's name
          that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
          ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
          \"$scriptStack = \" & "
        - Quote
        - " ( ~scriptStack ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: |-
        # TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
      Text: |2-
         TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription
        = \"Ping Failed\" ;\n\ttheErrorInfo = \"This device's local data has been
        removed.\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType
        = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) &
        \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n\n\t& \"$ScriptResult = \" & Quote
        ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$ping_result_code = \" & Quote (
        $ping_result_code ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Ping
        Failed\" ;\n\ttheErrorInfo = \"This device's local data has been removed.\"
        ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType = \"
        & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode &
        \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) & \"
        ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n\n\t& \"$ScriptResult = \" & Quote
        ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$ping_result_code = \" & Quote (
        $ping_result_code ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Ping Failed\" ;\n\ttheErrorInfo
          = \"This device's local data has been removed.\" ;\n\ttheErrorType = $~script.errorType
          ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$ping_result_code = \" & "
        - Quote
        - " ( $ping_result_code ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $ping_result_code = -4 ]
      Calculation: $ping_result_code = -4
      DisplayCalculation:
        Chunk: $ping_result_code = -4
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: |-
        # TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
      Text: |2-
         TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $error; Value:Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription
        = \"Ping Failed\" ;\n\ttheErrorInfo = \"This version of the solution is obsolete
        and cannot sync with the hosted database.\" ;\n\ttheErrorType = $~script.errorType\n]
        ;\n\t\"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode
        = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n\n\t& \"$ScriptResult = \" & Quote
        ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$ping_result_code = \" & Quote (
        $ping_result_code ) & \" ;¶\"\n) ]"
      Value:
        Calculation: "Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Ping
          Failed\" ;\n\ttheErrorInfo = \"This version of the solution is obsolete
          and cannot sync with the hosted database.\" ;\n\ttheErrorType = $~script.errorType\n]
          ;\n\t\"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode
          = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
          ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
          ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t&
          \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter
          = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section
          = \" & Quote ( $~script.section ) & \" ;¶\"\n\n\t& \"$ScriptResult = \"
          & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$ping_result_code = \"
          & Quote ( $ping_result_code ) & \" ;¶\"\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Ping Failed\"
            ;\n\ttheErrorInfo = \"This version of the solution is obsolete and cannot
            sync with the hosted database.\" ;\n\ttheErrorType = $~script.errorType\n]
            ;\n\t\"$errorType = \" & "
          - Quote
          - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
            ;¶\"\n\t& \"$errorDescription = \" & "
          - Quote
          - " ( theErrorDescription ) & \" ;¶\"\n\t& "
          - If
          - ' ( '
          - not
          - type: NoRef
            __content__: ' '
          - IsEmpty
          - ' ( theErrorInfo ) '
          - and
          - type: NoRef
            __content__: ' '
          - GetAsBoolean
          - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
          - Quote
          - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
          - Quote
          - ' ( '
          - Get
          - ' ( '
          - ScriptName
          - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
          - Quote
          - ' ( '
          - Get
          - ' ( '
          - ScriptParameter
          - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
          - Quote
          - " ( $~script.section ) & \" ;¶\"\n\n\t& \"$ScriptResult = \" & "
          - Quote
          - ' ( '
          - Get
          - ' ( '
          - ScriptResult
          - " ) ) & \" ;¶\"\n\t& \"$ping_result_code = \" & "
          - Quote
          - |2-
             ( $ping_result_code ) & " ;¶"
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $error
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$easydeploy ]
      Calculation: $$easydeploy
      DisplayCalculation:
        Chunk: $$easydeploy
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: "Sync Error"; Message: "This version
        of the solution is obsolete, and cannot sync with the hosted database.¶¶Would
        you like to upgrade the solution now?"; Default Button: “Yes”, Commit: “Yes”;
        Button 2: “No”, Commit: “No” ]'
      Title:
        Calculation: '"Sync Error"'
        DisplayCalculation:
          Chunk: '"Sync Error"'
      Message:
        Calculation: '"This version of the solution is obsolete, and cannot sync with
          the hosted database.¶¶Would you like to upgrade the solution now?"'
        DisplayCalculation:
          Chunk: '"This version of the solution is obsolete, and cannot sync with
            the hosted database.¶¶Would you like to upgrade the solution now?"'
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"Yes"'
          DisplayCalculation:
            Chunk: '"Yes"'
        - CommitState: 'False'
          Calculation: '"No"'
          DisplayCalculation:
            Chunk: '"No"'
        - CommitState: 'False'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( LastMessageChoice ) = 1 ]
      Calculation: Get ( LastMessageChoice ) = 1
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - LastMessageChoice
        - ' ) = 1'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: Perform Script [ “Upgrade Solution” ]
      Script:
        id: '46'
        name: Upgrade Solution
    - enable: 'True'
      id: '90'
      name: Halt Script
      StepText: Halt Script
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $error; Value:$error
        & "$messageShown = True ;¶" ]
      Value:
        Calculation: |-
          $error
          & "$messageShown = True ;¶"
        DisplayCalculation:
          Chunk: |-
            $error
            & "$messageShown = True ;¶"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $error
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ True ]
      Calculation: 'True'
      DisplayCalculation:
        Chunk: 'True'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '69'
      name: Else
      StepText: Else
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: |-
        # TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
      Text: |2-
         TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription
        = \"Ping Failed\" ;\n\ttheErrorInfo = \"Unable to connect to the server.\"
        ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType = \"
        & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode &
        \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) & \"
        ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n\n\t& \"$ScriptResult = \" & Quote
        ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$ping_result_code = \" & Quote (
        $ping_result_code ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Ping
        Failed\" ;\n\ttheErrorInfo = \"Unable to connect to the server.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n\n\t&
        \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$ping_result_code
        = \" & Quote ( $ping_result_code ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Ping Failed\" ;\n\ttheErrorInfo
          = \"Unable to connect to the server.\" ;\n\ttheErrorType = $~script.errorType
          ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$ping_result_code = \" & "
        - Quote
        - " ( $ping_result_code ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: |-
        # TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
      Text: |2-
         TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription
        = \"Ping Failed\" ;\n\ttheErrorInfo = \"$ping_result_code: \" & $ping_result_code
        ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType = \"
        & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode &
        \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) & \"
        ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Ping
        Failed\" ;\n\ttheErrorInfo = \"$ping_result_code: \" & $ping_result_code ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Ping Failed\" ;\n\ttheErrorInfo
          = \"$ping_result_code: \" & $ping_result_code ;\n\ttheErrorType = $~script.errorType
          ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"OUTDATED CLIENT" ]
      Value:
        Calculation: '"OUTDATED CLIENT"'
        DisplayCalculation:
          Chunk: '"OUTDATED CLIENT"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Is this version of the mobile client out of date?'
      Text: Is this version of the mobile client out of date?
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $ping_result_code = 2 ]
      Calculation: $ping_result_code = 2
      DisplayCalculation:
        Chunk: $ping_result_code = 2
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$easydeploy ]
      Calculation: $$easydeploy
      DisplayCalculation:
        Chunk: $$easydeploy
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $$easydeploy_suggest_upgrade; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $$easydeploy_suggest_upgrade
    - enable: 'True'
      id: '69'
      name: Else
      StepText: Else
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: "Notice"; Message: "This version of the
        solution is out-of-date. The sync will continue. However, you should contact
        your administrator for information on obtaining an updated version. "; Default
        Button: “OK”, Commit: “Yes” ]'
      Title:
        Calculation: '"Notice"'
        DisplayCalculation:
          Chunk: '"Notice"'
      Message:
        Calculation: '"This version of the solution is out-of-date. The sync will
          continue. However, you should contact your administrator for information
          on obtaining an updated version. "'
        DisplayCalculation:
          Chunk: '"This version of the solution is out-of-date. The sync will continue.
            However, you should contact your administrator for information on obtaining
            an updated version. "'
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"OK"'
          DisplayCalculation:
            Chunk: '"OK"'
        - CommitState: 'False'
        - CommitState: 'False'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"SLOW PING" ]
      Value:
        Calculation: '"SLOW PING"'
        DisplayCalculation:
          Chunk: '"SLOW PING"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Was the ping response too slow?'
      Text: Was the ping response too slow?
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $ping_time > $$max_ping_time ]
      Calculation: $ping_time > $$max_ping_time
      DisplayCalculation:
        Chunk: $ping_time > $$max_ping_time
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 3 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 3
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 3
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 3 ;\n\t~message = \"Ping roundtrip time was slow: \"
        & $ping_time & \" Milliseconds\"\n] ;\n\t\"$LogLevel = \" & ~logLevel & \"
        ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 3 ;\n\t~message = \"Ping roundtrip time
        was slow: \" & $ping_time & \" Milliseconds\"\n] ;\n\t\"$LogLevel = \" & ~logLevel
        & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 3 ;\n\t~message = \"Ping roundtrip time was slow: \"
          & $ping_time & \" Milliseconds\"\n] ;\n\t\"$LogLevel = \" & ~logLevel &
          \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$slow_connection_behavior = "warn" ]
      Calculation: $$slow_connection_behavior = "warn"
      DisplayCalculation:
        Chunk: $$slow_connection_behavior = "warn"
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: "Sync Error"; Message: "It appears that
        your connection to the server is slow. Would you like to continue with the
        sync, or cancel?"; Default Button: “Cancel”, Commit: “Yes”; Button 2: “Continue”,
        Commit: “No” ]'
      Title:
        Calculation: '"Sync Error"'
        DisplayCalculation:
          Chunk: '"Sync Error"'
      Message:
        Calculation: '"It appears that your connection to the server is slow. Would
          you like to continue with the sync, or cancel?"'
        DisplayCalculation:
          Chunk: '"It appears that your connection to the server is slow. Would you
            like to continue with the sync, or cancel?"'
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"Cancel"'
          DisplayCalculation:
            Chunk: '"Cancel"'
        - CommitState: 'False'
          Calculation: '"Continue"'
          DisplayCalculation:
            Chunk: '"Continue"'
        - CommitState: 'False'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( LastMessageChoice ) = 1 ]
      Calculation: Get ( LastMessageChoice ) = 1
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - LastMessageChoice
        - ' ) = 1'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 1 ;\n\ttheErrorDescription
        = \"User canceled action\" ;\n\ttheErrorInfo = \"Slow Ping (\" & $ping_time
        & \"), user aborted\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error
        = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode =
        \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n\t& \"$messageShown = True ;¶\"\n]
        ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = 1 ;\n\ttheErrorDescription = \"User
        canceled action\" ;\n\ttheErrorInfo = \"Slow Ping (\" & $ping_time & \"),
        user aborted\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType
        = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) &
        \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n\t& \"$messageShown = True ;¶\"\n]
        ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 1 ;\n\ttheErrorDescription = \"User canceled action\"
          ;\n\ttheErrorInfo = \"Slow Ping (\" & $ping_time & \"), user aborted\" ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t& \"$messageShown = True ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '69'
      name: Else
      StepText: Else
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: |-
        # TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
      Text: |2-
         TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription
        = \"Slow Ping; forced abort\" ;\n\ttheErrorInfo = \"The connection to the
        server is too slow to sync. (Ping time was \" & $ping_time & \" ms.)\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Slow
        Ping; forced abort\" ;\n\ttheErrorInfo = \"The connection to the server is
        too slow to sync. (Ping time was \" & $ping_time & \" ms.)\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Slow Ping; forced
          abort\" ;\n\ttheErrorInfo = \"The connection to the server is too slow to
          sync. (Ping time was \" & $ping_time & \" ms.)\" ;\n\ttheErrorType = $~script.errorType
          ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Ping roundtrip time was ok: \"
        & $ping_time & \" Milliseconds\"\n] ;\n\t\"$LogLevel = \" & ~logLevel & \"
        ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Ping roundtrip time
        was ok: \" & $ping_time & \" Milliseconds\"\n] ;\n\t\"$LogLevel = \" & ~logLevel
        & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Ping roundtrip time was ok: \"
          & $ping_time & \" Milliseconds\"\n] ;\n\t\"$LogLevel = \" & ~logLevel &
          \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'
      Text: ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# end single-pass loop for error trapping'
      Text: ' end single-pass loop for error trapping'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ True ]
      Calculation: 'True'
      DisplayCalculation:
        Chunk: 'True'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $!; Value:""
        /**
         * This is a step that will not return an error.
         *
         * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
         * Get ( LastError ) to test if an error occurred with the Perform Script step.
         *
         */ ]
      Value:
        Calculation: |-
          ""
          /**
           * This is a step that will not return an error.
           *
           * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
           * Get ( LastError ) to test if an error occurred with the Perform Script step.
           *
           */
        DisplayCalculation:
          Chunk: |-
            ""
            /**
             * This is a step that will not return an error.
             *
             * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
             * Get ( LastError ) to test if an error occurred with the Perform Script step.
             *
             */
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $!
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: 'Exit Script [ Result: "$error = " & Quote ( $error ) & " ;¶" ]'
      Calculation: '"$error = " & Quote ( $error ) & " ;¶"'
      DisplayCalculation:
        Chunk:
        - '"$error = " & '
        - Quote
        - ' ( $error ) & " ;¶"'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
