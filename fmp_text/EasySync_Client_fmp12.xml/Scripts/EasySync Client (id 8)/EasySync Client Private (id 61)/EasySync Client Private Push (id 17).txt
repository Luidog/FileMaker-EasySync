#################################################################################
# PURPOSE:
#    Create and push a sync payload to the server.
#
# CONTEXT: EasySync_Payloads
#
# PARAMETERS: none
#
# RETURNS:
#    $error | a dictionary containing error data
#    $runtime | number of seconds this script was running (with millisecond precision)
#    $nothingToPush | boolean | True if no errors were encounted and there were no changes to push to the server.
#
# VARIABLES:
#
# DEPENDENCIES:
#
# NOTES:
#
# REVISIONS:
#    2014-04-16			Tim Dietrich (timdietrich@me.com)	Initial version.2014-04-18			Tim Dietrich (timdietrich@me.com)	Added "timezone offset" to the settings portion of the payload.2014-04-19	Tim Dietrich (timdietrich@me.com)	Reflects shift to UTC timestamps.2014-04-21	Tim Dietrich (timdietrich@me.com)	Resolves issues with non-SQL compliant table names.2014-04-21	Tim Dietrich (timdietrich@me.com)	Added support for passing in a param of ES_Record_UUIDs so that a "partial push"	can be processed. See the sample "partial push" script for an example of how to put	the param together and how to handle the partial push in general.2014-04-23	Tim Dietrich (timdietrich@me.com)	"Get ( SystemIPAddress )" is now comma-delimited when passed as a param.	This resolves an issue that comes up if the client has multiple IPs.2014-04-22	Tim Dietrich (timdietrich@me.com)	Begrudgingly added support for repeating fields.	Yeah, I know. Don't get me started.2014-04-30	Tim Dietrich (timdietrich@me.com)	Added support for the new "deletions" portion of the payload.	Now omitting global fields from the payload.2014-05-02	Tim Dietrich (timdietrich@me.com)	Modified the SELECT statement that gets the list of tables to be synced, so that the underscore	escaped. Thanks to Paul Jansen (of APJ Computing Solutions - http://www.apjuk.com/) for	reporting this bug.2014-05-04	Tim Dietrich (timdietrich@me.com)	Added support for Push/Pull-only tables.2014-10-19	Tim Dietrich (timdietrich@me.com)	Modified config check to support pull-only scenarios.
#################################################################################
Set Variable [ $~script.start; Value:Get ( CurrentTimeUTCMilliseconds ) ]
Set Variable [ $~script.errorType; Value:"Module: EasySync Client" ]
#
#
#
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 5 ;	~message = "start script"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#
#
Perform Script [ “EasySync Client: Config: Show Message”; Parameter: "Preparing to Push..." ]
#
#
#
Loop
# single-pass loop for error trapping
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"MAKE SURE LAST PULL TIME IS NOT EMPTY" ]
#================================================================================
If [ IsEmpty ( Evaluate ( "EasySync_Payloads::ES_Last_Pull_UTC_Time" ) ) ]
Set Field By Name [ "EasySync_Payloads::ES_Last_Pull_UTC_Time"; 0 ]
Exit Loop If [ If ( Get ( LastError ) ;	Let ( [		theErrorCode = Get ( LastError ) ;		theErrorDescription = "(see FileMaker documentation for the description of this error code)" ;		theErrorInfo = "after set field: EasySync_Payloads::ES_Last_Pull_UTC_Time" ;		theErrorType = "Fmp" ;				$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"		& "$errorCode = " & theErrorCode & " ;¶"		& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"		& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;			"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"		)		& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"		& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	] ;		True	)) ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"GET LIST OF TABLES TO SYNC" ]
#================================================================================
Set Variable [ $sync_tables; Value:ExecuteSQL ( "SELECT * FROM FileMaker_Tables WHERE ( TableName LIKE 'ES\_%' ) AND ( TableName NOT LIKE 'ES\_PULL\_%' )"; "</col>"; ¶ ) ]
If [ IsEmpty ( $sync_tables ) ]
# TODO: determine what error code to use here(may want to revise the server's ping script before I do this)
Exit Loop If [ Let ( [	theErrorCode = -1 ;	theErrorDescription = "No tables configured for push" ;	theErrorInfo = "" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Sync Tables: " & $sync_tables] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"Loop over the tables to be synced" ]
#================================================================================
Set Variable [ $table_info; Value:"" ]
Set Variable [ $records; Value:"" ]
Set Variable [ $i; Value:1 ]
Loop
#
#Get the table's name.
Set Variable [ $sync_table; Value:Let ( [$t = GetValue ( $sync_tables ; $i );$t = Substitute ( $t; "</col>"; ¶ )];GetValue ( $t; 1 )) ]
#
#Get the names (and # of reps) of the fields in this table.
#Note: Fields with an "EXCL_" prefix are excluded from the payload.
#Note: We also exclude calculated fields and those stored as globals.
Set Variable [ $sync_fields; Value:ExecuteSQL ( "SELECT FieldName, FieldReps FROM FileMaker_Fields WHERE ( TableName = ? ) AND ( ( FieldClass = 'Normal' ) OR ( FieldName LIKE 'B64_%' ) ) AND ( FieldName NOT LIKE 'EXCL_%' ) AND ( FieldName <> 'ES_Exclude' ) AND ( FieldType NOT LIKE 'global%')"; "|"; ¶; $sync_table ) ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Fields in " & $sync_table & ": " & $sync_fields] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#Reformat the field names so that repetitions are considered.
Set Variable [ $fields; Value:$sync_table & "</field>" ]
Set Variable [ $f; Value:1 ]
Loop
Set Variable [ $field_name; Value:Let ( [field_combo_raw = GetValue ( $sync_fields ; $f ); // The value pulled from the query. Example: Some_Field|5field_combo_list = Substitute ( field_combo_raw; "|"; ¶ ) // Convert the value to a value list.];GetValue ( field_combo_list; 1 )) ]
Set Variable [ $field_reps; Value:Let ( [field_combo_raw = GetValue ( $sync_fields ; $f ); // The value pulled from the query. Example: Some_Field|5field_combo_list = Substitute ( field_combo_raw; "|"; ¶ ) // Convert the value to a value list.];GetValue ( field_combo_list; 2 )) ]
Set Variable [ $r; Value:1 ]
Loop
Set Variable [ $fields; Value:$fields & $field_name & "[" & $r & "]</field>" ]
Set Variable [ $r; Value:$r + 1 ]
Exit Loop If [ $r > GetAsNumber ( $field_reps )// v1.2: $r > $field_reps ]
End Loop
Set Variable [ $f; Value:$f + 1 ]
Exit Loop If [ $f > ValueCount ( $sync_fields ) ]
End Loop
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Reformatted Fields in " & $sync_table & ": " & $fields] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#Add this table's info to the running "table_info."
Set Variable [ $table_info; Value:If ( not IsEmpty ( $table_info ); $table_info & ¶; "" ) & $fields & "</table>" ]
#
#Loop over the fields in the table to create the fields portion of what will be the SELECT statement...
Set Variable [ $dyn_sql; Value:"'" & $sync_table & "'" ]
Set Variable [ $j; Value:1 ]
Loop
Set Variable [ $field_name; Value:Let ( [field_combo_raw = GetValue ( $sync_fields ; $j ); // The value pulled from the query. Example: Some_Field|5field_combo_list = Substitute ( field_combo_raw; "|"; ¶ ) // Convert the value to a value list.];GetValue ( field_combo_list; 1 )) ]
Set Variable [ $field_reps; Value:Let ( [field_combo_raw = GetValue ( $sync_fields ; $j ); // The value pulled from the query. Example: Some_Field|5field_combo_list = Substitute ( field_combo_raw; "|"; ¶ ) // Convert the value to a value list.];GetValue ( field_combo_list; 2 )) ]
#
#Loop over the reps...
Set Variable [ $r; Value:1 ]
Loop
Set Variable [ $dyn_sql; Value:$dyn_sql & ", '' || \\\"" & $field_name & "\\\"" & "[" & $r & "]" ]
Set Variable [ $r; Value:$r + 1 ]
Exit Loop If [ $r > GetAsNumber ( $field_reps )// v1.2: $r > $field_reps ]
End Loop
#
Set Variable [ $j; Value:$j + 1 ]
Exit Loop If [ $j > ValueCount ( $sync_fields ) ]
End Loop
#
#Add this table's fields to the SELECT statement.
Set Variable [ $dyn_sql; Value:"SELECT " & $dyn_sql & ", '" & $$record_delimiter & "' FROM \\\"" & $sync_table & "\\\"" &" WHERE ( ES_UTC_Time > " & Evaluate ( "EasySync_Payloads::ES_Last_Pull_UTC_Time" ) & " ) AND ( COALESCE ( ES_Exclude, 0 ) = 0 )" ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "SELECT Statement for " & $sync_table & ": " & $dyn_sql] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#Wrap the SELECT statement in an ExecuteSQL call.
Set Variable [ $dyn_esql; Value:"ExecuteSQL ( \"" & $dyn_sql & "\"; \"" & $$field_delimiter & "\"; \"\" )" ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "ExecuteSQL Statement for " & $sync_table & ": " & $dyn_esql] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#Evaluate the ExecuteSQL statement to get the actual data, and append it to the records.
Set Variable [ $temp_recs; Value:Evaluate ( $dyn_esql  ) ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Records From " & $sync_table & ": " & $temp_recs] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#If there are records in the current table to be pushed...
If [ not IsEmpty ( $temp_recs ) ]
Set Variable [ $records; Value:If ( not IsEmpty ( $records ); $records & ¶; "" ) & $temp_recs ]
End If
#
Set Variable [ $i; Value:$i + 1 ]
Exit Loop If [ $i > ValueCount ( $sync_tables ) ]
#
End Loop
#
#
#
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"COMPILE PAYLOAD" ]
#================================================================================
#Check to see if any records have been deleted.
Set Variable [ $deletions; Value:ExecuteSQL ( "SELECT ES_Deleted_Record_UUID, Created_TimeStamp_UTC FROM EasySync_Payloads WHERE ES_Deleted_Record_UUID IS NOT NULL"; "|"; ¶ ) ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Deletions: " & $deletions] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
If [ IsEmpty ( $records ) and IsEmpty ( $deletions ) ]
Set Variable [ $nothingToPush; Value:True ]
Else
#Create payload header (everything that isn't the record data/id's to delete)
Set Variable [ $payload_header; Value:/* last_sync_info */"<last_pull>¶"	& Evaluate ( "EasySync_Payloads::ES_Last_Pull_UTC_Time" )& "¶</last_pull>"& ¶/* settings_info */& "<settings>¶"	& $$field_delimiter & "</setting>"	& $$record_delimiter & "</setting>"	& Get ( PersistentID ) & "</setting>"	& $$client_version & "</setting>"	& Substitute ( Get ( SystemIPAddress ); ¶; ", " ) & "</setting>"	& Substitute ( Get ( SystemNICAddress ); ¶; ", " ) & "</setting>"	& Get ( SystemPlatform ) & "</setting>"	& Get ( SystemVersion ) & "</setting>"	& Get ( Device ) & "</setting>"	& Get ( NetworkProtocol ) & "</setting>"	& Get ( NetworkType ) & "</setting>"	& $$additional_push_info& "¶</settings>"& ¶/* table_info */& "<tables>¶"	& $table_info& "¶</tables>" ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Payload Header: " & $payload_header] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#Put the payload together.
Set Variable [ $payload; Value:"<payload>¶"	& $payload_header & ¶	& If ( not IsEmpty ( $records ) ;		"<records>" & ¶ & $records & ¶ & "</records>¶"	)	& If ( not IsEmpty ( $deletions ) ;		"<deletions>" & ¶ & $deletions & ¶ & "</deletions>¶"	)& "¶</payload>" ]
#
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"SEND PAYLOAD TO SERVER" ]
#Note: We use this segmented approach to work around the PSoS script parameter's 1,000,000 character limit.
#Special thanks to Kirk Bowman @ MightyData for the idea!
#================================================================================
If [ not $nothingToPush ]
Perform Script [ “EasySync Client: Config: Show Message”; Parameter: "Pushing payload to server..." ]
Set Variable [ $payload_length; Value:Length ( $payload ) ]
Set Variable [ $num_segments; Value:Int ( $payload_length / $$max_push_segment_size )+ If ( Mod ( $payload_length ; $$max_push_segment_size ) ;	1 ;	0) ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = List (		"Payload Size: " & $payload_length ;		"Max Segment Size: " & $$max_push_segment_size ;		"Number of Segments Being Sent: " & $num_segments	)] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
Set Variable [ $payload_segment_ids; Value:"" ]
Set Variable [ $i; Value:1 ]
Loop
Set Variable [ $segment; Value:Middle (	$payload ;	( ( $i - 1 ) * $$max_push_segment_size ) + 1 ;	$$max_push_segment_size) ]
Perform Script [ “EasySync Client: Config: Push: Send Segment”; Parameter: $segment ]
If [ Get ( LastError ) ]
Exit Loop If [ Let ( [	theErrorCode = Get ( LastError ) ;	theErrorDescription = "FileMaker Error" ;	theErrorInfo = "section: " & $~script.section & ". Make sure the perform script step calls the correct script and the user has permission to run it." ;	theErrorType = "Fmp" ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign script result to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& Get ( ScriptResult )	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign subscript error info to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section & ". $error could not be evaluated.";	theErrorInfo = "after performing script: '" & $~script.subscript & "'. $error could not be evaluated." ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ $errorCode ]
Exit Loop If [ /* subscript error has been saved to local variable(s) */Let ( [	/* add the current script's name to a list of scripts that triggered this error */	~scriptStack = List (		Get ( ScriptName ) ;		If ( IsEmpty ( $scriptStack ) ;			/* start the stack off with the script's name that triggered the error */			$ScriptName ;			$scriptStack		)	) ;	/* append this data to the error */	$error =		$error		& "$scriptStack = " & Quote ( ~scriptStack ) & " ;¶"] ;	True) ]
End If
#
Set Variable [ $payload_segment_ids; Value:$payload_segment_ids& If ( not IsEmpty ( $payload_segment_ids ) ; ¶ )& $payload_segment_id ]
Set Variable [ $i; Value:$i + 1 ]
Exit Loop If [ $i > $num_segments ]
End Loop
Exit Loop If [ /** * An error occurred in the above loop * * assign error info to local variables * then evaluate the errorCode as a Boolean *  */GetAsBoolean ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; $errorCode )") ) ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Payload Segment IDs: " & $payload_segment_ids] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"PROCESS PAYLOAD" ]
#================================================================================
If [ not $nothingToPush ]
Perform Script [ “EasySync Client: Config: Show Message”; Parameter: "Server is processing payload..." ]
Perform Script [ “EasySync Client: Config: Push: Process”; Parameter: "$payload_segment_ids = " & Quote ( $payload_segment_ids ) & " ;¶" ]
If [ Get ( LastError ) ]
Exit Loop If [ Let ( [	theErrorCode = Get ( LastError ) ;	theErrorDescription = "FileMaker Error" ;	theErrorInfo = "section: " & $~script.section & ". Make sure the perform script step calls the correct script and the user has permission to run it." ;	theErrorType = "Fmp" ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign script result to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& Get ( ScriptResult )	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign subscript error info to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section & ". $error could not be evaluated.";	theErrorInfo = "after performing script: '" & $~script.subscript & "'. $error could not be evaluated." ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ $errorCode ]
Exit Loop If [ /* subscript error has been saved to local variable(s) */Let ( [	/* add the current script's name to a list of scripts that triggered this error */	~scriptStack = List (		Get ( ScriptName ) ;		If ( IsEmpty ( $scriptStack ) ;			/* start the stack off with the script's name that triggered the error */			$ScriptName ;			$scriptStack		)	) ;	/* append this data to the error */	$error =		$error		& "$scriptStack = " & Quote ( ~scriptStack ) & " ;¶"] ;	True) ]
End If
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"UPDATE LAST PUSH TIME" ]
#================================================================================
Set Field By Name [ "EasySync_Payloads::ES_Last_Push_UTC_Time"; Get ( CurrentTimeUTCMilliseconds ) ]
Exit Loop If [ If ( Get ( LastError ) ;	Let ( [		theErrorCode = Get ( LastError ) ;		theErrorDescription = "(see FileMaker documentation for the description of this error code)" ;		theErrorInfo = "" ;		theErrorType = "Fmp" ;				$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"		& "$errorCode = " & theErrorCode & " ;¶"		& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"		& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;			"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"		)		& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"		& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	] ;		True	)) ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"COMMIT RECORD" ]
#================================================================================
Commit Records/Requests[ Skip data entry validation; No dialog ]
Exit Loop If [ If ( Get ( LastError ) ;	Let ( [		theErrorCode = Get ( LastError ) ;		theErrorDescription = "(see FileMaker documentation for the description of this error code)" ;		theErrorInfo = "after commit record" ;		theErrorType = "Fmp" ;				$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"		& "$errorCode = " & theErrorCode & " ;¶"		& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"		& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;			"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"		)		& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"		& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	] ;		True	)) ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"CLEAN UP LOCALLY LOGGED DELETIONS" ]
# errors in this section don't affect the sync, only the cleanup, so they will be logged but not reported in the script result
#================================================================================
Loop
#single-pass loop for error trapping
#
Enter Find Mode [  ]
Set Field [ EasySync_Payloads::ES_Deleted_Record_UUID; "@*" ]
Exit Loop If [ If ( Get ( LastError ) ;	Let ( [		theErrorCode = Get ( LastError ) ;		theErrorDescription = "(see FileMaker documentation for the description of this error code)" ;		theErrorInfo = "after set field: deleted record uuid" ;		theErrorType = "Fmp" ;				$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"		& "$errorCode = " & theErrorCode & " ;¶"		& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"		& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;			"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"		)		& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"		& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	] ;		True	)) ]
Perform Find [  ]
If [ Get ( FoundCount ) ]
Delete All Records[ No dialog ]
Exit Loop If [ If ( Get ( LastError ) ;	Let ( [		theErrorCode = Get ( LastError ) ;		theErrorDescription = "(see FileMaker documentation for the description of this error code)" ;		theErrorInfo = "after delete all records step" ;		theErrorType = "Fmp" ;				$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"		& "$errorCode = " & theErrorCode & " ;¶"		& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"		& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;			"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"		)		& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"		& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"		& "$FoundCount = " & Get ( FoundCount ) & " ;¶"	] ;		True	)) ]
End If
#
#end single-pass loop for error trapping
Exit Loop If [ True ]
End Loop
If [ /** * assign error info to local variables * then evaluate the errorCode as a Boolean *  */GetAsBoolean ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; $errorCode )") ) ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 2 ;	~message = "an error occurred when cleaning up locally logged deletions"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$error = " & Quote ( $error ) & " ;¶"	& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶") ]
End If
Set Variable [ $error; Value:"" ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"SHOW SUCCESS DIALOG" ]
#================================================================================
If [ $$show_successful_pushesand/* is client application */Left ( Get ( ApplicationVersion ) ; 3 ) = "Pro"orLeft ( Get ( ApplicationVersion ) ; 7 ) = "Runtime"orGet ( SystemPlatform ) = 3	 // iOSorGet ( SystemPlatform ) = 4	 // WebDirect ]
Show Custom Dialog [ Title: "Push Successful"; Message: "Local data has been successfully pushed to the server. (Elapsed Time: " & GetAsTime ( $~script.runtime ) & ")"; Default Button: “OK”, Commit: “Yes” ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"EASYDEPLOY: SUGGEST UPGRADE" ]
#================================================================================
If [ $$easydeploy_suggest_upgradeand/* is client application */Left ( Get ( ApplicationVersion ) ; 3 ) = "Pro"orLeft ( Get ( ApplicationVersion ) ; 7 ) = "Runtime"orGet ( SystemPlatform ) = 3	 // iOSorGet ( SystemPlatform ) = 4	 // WebDirect ]
Show Custom Dialog [ Title: "Upgrade Solution?"; Message: "A new version of this solution is available.¶¶Would you like to upgrade now?"; Default Button: “Yes”, Commit: “Yes”; Button 2: “No”, Commit: “No” ]
If [ Get ( LastMessageChoice ) = 1 ]
Perform Script [ “Upgrade Solution” ]
Halt Script
End If
End If
#
#
#
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# end single-pass loop for error trapping
Exit Loop If [ True ]
End Loop
#
#
#
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"HANDLE ERROR" ]
#================================================================================
Set Variable [ $~script.runtime; Value:( Get ( CurrentTimeUTCMilliseconds ) - $~script.start ) / 1000 ]
If [ /** * assign error info to local variables * then evaluate the errorCode as a Boolean *  */GetAsBoolean ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; $errorCode )") ) ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 2 ;	~message = "exit script with error"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$error = " & Quote ( $error ) & " ;¶"	& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶") ]
End If
Else
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "exit script without error"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶") ]
End If
End If
#
#
#
Set Variable [ $!; Value:""/** * This is a step that will not return an error. * * It's used to clear any errors reported by Get ( LastError ), so a calling script can use * Get ( LastError ) to test if an error occurred with the Perform Script step. * */ ]
Exit Script [ Result: "$error = " & Quote ( $error ) & " ;¶"& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶"& "$nothingToPush = " & GetAsBoolean( $nothingToPush ) & " ;¶" ]
#


---
Script:
  includeInMenu: 'False'
  runFullAccess: 'False'
  id: '17'
  name: 'EasySync Client: Private: Push'
  StepList:
    Step:
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#################################################################################'
      Text: '################################################################################'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PURPOSE:'
      Text: ' PURPOSE:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    Create and push a sync payload to the server.'
      Text: '    Create and push a sync payload to the server.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# CONTEXT: EasySync_Payloads'
      Text: ' CONTEXT: EasySync_Payloads'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PARAMETERS: none'
      Text: ' PARAMETERS: none'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# RETURNS:'
      Text: ' RETURNS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $error | a dictionary containing error data'
      Text: '    $error | a dictionary containing error data'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $runtime | number of seconds this script was running (with millisecond
        precision)'
      Text: '    $runtime | number of seconds this script was running (with millisecond
        precision)'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $nothingToPush | boolean | True if no errors were encounted
        and there were no changes to push to the server.'
      Text: '    $nothingToPush | boolean | True if no errors were encounted and there
        were no changes to push to the server.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# VARIABLES:'
      Text: ' VARIABLES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# DEPENDENCIES:'
      Text: ' DEPENDENCIES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# NOTES:'
      Text: ' NOTES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# REVISIONS:'
      Text: ' REVISIONS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: "#    \n2014-04-16\t\t\n\tTim Dietrich (timdietrich@me.com)\n\tInitial
        version.\n\n2014-04-18\t\t\n\tTim Dietrich (timdietrich@me.com)\n\tAdded \"timezone
        offset\" to the settings portion of the payload.\n\n2014-04-19\n\tTim Dietrich
        (timdietrich@me.com)\n\tReflects shift to UTC timestamps.\n\n2014-04-21\n\tTim
        Dietrich (timdietrich@me.com)\n\tResolves issues with non-SQL compliant table
        names.\n\n2014-04-21\n\tTim Dietrich (timdietrich@me.com)\n\tAdded support
        for passing in a param of ES_Record_UUIDs so that a \"partial push\"\n\tcan
        be processed. See the sample \"partial push\" script for an example of how
        to put\n\tthe param together and how to handle the partial push in general.\n\n2014-04-23\n\tTim
        Dietrich (timdietrich@me.com)\n\t\"Get ( SystemIPAddress )\" is now comma-delimited
        when passed as a param.\n\tThis resolves an issue that comes up if the client
        has multiple IPs.\n\n2014-04-22\n\tTim Dietrich (timdietrich@me.com)\n\tBegrudgingly
        added support for repeating fields.\n\tYeah, I know. Don't get me started.\n\n2014-04-30\n\tTim
        Dietrich (timdietrich@me.com)\n\tAdded support for the new \"deletions\" portion
        of the payload.\n\tNow omitting global fields from the payload.\n\n2014-05-02\n\tTim
        Dietrich (timdietrich@me.com)\n\tModified the SELECT statement that gets the
        list of tables to be synced, so that the underscore\n\tescaped. Thanks to
        Paul Jansen (of APJ Computing Solutions - http://www.apjuk.com/) for\n\treporting
        this bug.\n\n2014-05-04\n\tTim Dietrich (timdietrich@me.com)\n\tAdded support
        for Push/Pull-only tables.\n\n2014-10-19\n\tTim Dietrich (timdietrich@me.com)\n\tModified
        config check to support pull-only scenarios.\n"
      Text: "    \n2014-04-16\t\t\n\tTim Dietrich (timdietrich@me.com)\n\tInitial
        version.\n\n2014-04-18\t\t\n\tTim Dietrich (timdietrich@me.com)\n\tAdded \"timezone
        offset\" to the settings portion of the payload.\n\n2014-04-19\n\tTim Dietrich
        (timdietrich@me.com)\n\tReflects shift to UTC timestamps.\n\n2014-04-21\n\tTim
        Dietrich (timdietrich@me.com)\n\tResolves issues with non-SQL compliant table
        names.\n\n2014-04-21\n\tTim Dietrich (timdietrich@me.com)\n\tAdded support
        for passing in a param of ES_Record_UUIDs so that a \"partial push\"\n\tcan
        be processed. See the sample \"partial push\" script for an example of how
        to put\n\tthe param together and how to handle the partial push in general.\n\n2014-04-23\n\tTim
        Dietrich (timdietrich@me.com)\n\t\"Get ( SystemIPAddress )\" is now comma-delimited
        when passed as a param.\n\tThis resolves an issue that comes up if the client
        has multiple IPs.\n\n2014-04-22\n\tTim Dietrich (timdietrich@me.com)\n\tBegrudgingly
        added support for repeating fields.\n\tYeah, I know. Don't get me started.\n\n2014-04-30\n\tTim
        Dietrich (timdietrich@me.com)\n\tAdded support for the new \"deletions\" portion
        of the payload.\n\tNow omitting global fields from the payload.\n\n2014-05-02\n\tTim
        Dietrich (timdietrich@me.com)\n\tModified the SELECT statement that gets the
        list of tables to be synced, so that the underscore\n\tescaped. Thanks to
        Paul Jansen (of APJ Computing Solutions - http://www.apjuk.com/) for\n\treporting
        this bug.\n\n2014-05-04\n\tTim Dietrich (timdietrich@me.com)\n\tAdded support
        for Push/Pull-only tables.\n\n2014-10-19\n\tTim Dietrich (timdietrich@me.com)\n\tModified
        config check to support pull-only scenarios.\n"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#################################################################################'
      Text: '################################################################################'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.start; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.start
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: 'Set Variable [ $~script.errorType; Value:"Module: EasySync Client"
        ]'
      Value:
        Calculation: '"Module: EasySync Client"'
        DisplayCalculation:
          Chunk: '"Module: EasySync Client"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.errorType
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 5 ;\n\t~message = \"start script\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 5 ;\n\t~message = \"start script\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 5 ;\n\t~message = \"start script\"\n] ;\n\t\"$LogLevel
          = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: Config: Show Message”; Parameter:
        "Preparing to Push..." ]'
      Calculation: '"Preparing to Push..."'
      DisplayCalculation:
        Chunk: '"Preparing to Push..."'
      Script:
        id: '67'
        name: 'EasySync Client: Config: Show Message'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# single-pass loop for error trapping'
      Text: ' single-pass loop for error trapping'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
      Text: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"MAKE SURE LAST PULL TIME IS
        NOT EMPTY" ]
      Value:
        Calculation: '"MAKE SURE LAST PULL TIME IS NOT EMPTY"'
        DisplayCalculation:
          Chunk: '"MAKE SURE LAST PULL TIME IS NOT EMPTY"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ IsEmpty ( Evaluate ( "EasySync_Payloads::ES_Last_Pull_UTC_Time"
        ) ) ]
      Calculation: IsEmpty ( Evaluate ( "EasySync_Payloads::ES_Last_Pull_UTC_Time"
        ) )
      DisplayCalculation:
        Chunk:
        - IsEmpty
        - ' ( '
        - Evaluate
        - ' ( "EasySync_Payloads::ES_Last_Pull_UTC_Time" ) )'
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ "EasySync_Payloads::ES_Last_Pull_UTC_Time"; 0
        ]
      Result:
        Calculation: '0'
        DisplayCalculation:
          Chunk: '0'
      TargetName:
        Calculation: '"EasySync_Payloads::ES_Last_Pull_UTC_Time"'
        DisplayCalculation:
          Chunk: '"EasySync_Payloads::ES_Last_Pull_UTC_Time"'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode
        = Get ( LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation
        for the description of this error code)\" ;\n\t\ttheErrorInfo = \"after set
        field: EasySync_Payloads::ES_Last_Pull_UTC_Time\" ;\n\t\ttheErrorType = \"Fmp\"
        ;\n\t\t\n\t\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t\t& \"$errorDescription = \"
        & Quote ( theErrorDescription ) & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & Quote ( Get ( ScriptName )
        ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & Quote ( $~script.section )
        & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n) ]"
      Calculation: "If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode = Get (
        LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for
        the description of this error code)\" ;\n\t\ttheErrorInfo = \"after set field:
        EasySync_Payloads::ES_Last_Pull_UTC_Time\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error
        = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode
        = \" & theErrorCode & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n)"
      DisplayCalculation:
        Chunk:
        - If
        - ' ( '
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t"
        - Let
        - " ( [\n\t\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for the
          description of this error code)\" ;\n\t\ttheErrorInfo = \"after set field:
          EasySync_Payloads::ES_Last_Pull_UTC_Time\" ;\n\t\ttheErrorType = \"Fmp\"
          ;\n\t\t\n\t\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\t"
        - 'True'
        - "\n\t)\n)"
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"GET LIST OF TABLES TO SYNC"
        ]
      Value:
        Calculation: '"GET LIST OF TABLES TO SYNC"'
        DisplayCalculation:
          Chunk: '"GET LIST OF TABLES TO SYNC"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $sync_tables; Value:ExecuteSQL ( "SELECT * FROM FileMaker_Tables
        WHERE ( TableName LIKE 'ES\_%' ) AND ( TableName NOT LIKE 'ES\_PULL\_%' )";
        "</col>"; ¶ ) ]
      Value:
        Calculation: ExecuteSQL ( "SELECT * FROM FileMaker_Tables WHERE ( TableName
          LIKE 'ES\_%' ) AND ( TableName NOT LIKE 'ES\_PULL\_%' )"; "</col>"; ¶ )
        DisplayCalculation:
          Chunk:
          - ExecuteSQL
          - ' ( "SELECT * FROM FileMaker_Tables WHERE ( TableName LIKE ''ES\_%'' )
            AND ( TableName NOT LIKE ''ES\_PULL\_%'' )"; "</col>"; ¶ )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $sync_tables
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ IsEmpty ( $sync_tables ) ]
      Calculation: IsEmpty ( $sync_tables )
      DisplayCalculation:
        Chunk:
        - IsEmpty
        - ' ( $sync_tables )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: |-
        # TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
      Text: |2-
         TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription
        = \"No tables configured for push\" ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"No tables
        configured for push\" ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType = $~script.errorType
        ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" &
        Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"No tables configured
          for push\" ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType = $~script.errorType
          ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Sync Tables: \" & $sync_tables\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Sync Tables: \" & $sync_tables\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Sync Tables: \" & $sync_tables\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"Loop over the tables to be
        synced" ]
      Value:
        Calculation: '"Loop over the tables to be synced"'
        DisplayCalculation:
          Chunk: '"Loop over the tables to be synced"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $table_info; Value:"" ]
      Value:
        Calculation: '""'
        DisplayCalculation:
          Chunk: '""'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $table_info
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $records; Value:"" ]
      Value:
        Calculation: '""'
        DisplayCalculation:
          Chunk: '""'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $records
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the table''s name.'
      Text: Get the table's name.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $sync_table; Value:Let ( \n[\n$t = GetValue ( $sync_tables
        ; $i );\n$t = Substitute ( $t; \"</col>\"; ¶ )\n];\nGetValue ( $t; 1 )\n)
        ]"
      Value:
        Calculation: "Let ( \n[\n$t = GetValue ( $sync_tables ; $i );\n$t = Substitute
          ( $t; \"</col>\"; ¶ )\n];\nGetValue ( $t; 1 )\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( \n[\n$t = "
          - GetValue
          - " ( $sync_tables ; $i );\n$t = "
          - Substitute
          - |2
             ( $t; "</col>"; ¶ )
            ];
          - GetValue
          - |2-
             ( $t; 1 )
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $sync_table
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the names (and # of reps) of the fields in this table.'
      Text: 'Get the names (and # of reps) of the fields in this table.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Note: Fields with an "EXCL_" prefix are excluded from the payload.'
      Text: 'Note: Fields with an "EXCL_" prefix are excluded from the payload.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Note: We also exclude calculated fields and those stored as globals.'
      Text: 'Note: We also exclude calculated fields and those stored as globals.'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $sync_fields; Value:ExecuteSQL ( "SELECT FieldName,
        FieldReps FROM FileMaker_Fields WHERE ( TableName = ? ) AND ( ( FieldClass
        = 'Normal' ) OR ( FieldName LIKE 'B64_%' ) ) AND ( FieldName NOT LIKE 'EXCL_%'
        ) AND ( FieldName <> 'ES_Exclude' ) AND ( FieldType NOT LIKE 'global%')";
        "|"; ¶; $sync_table ) ]
      Value:
        Calculation: ExecuteSQL ( "SELECT FieldName, FieldReps FROM FileMaker_Fields
          WHERE ( TableName = ? ) AND ( ( FieldClass = 'Normal' ) OR ( FieldName LIKE
          'B64_%' ) ) AND ( FieldName NOT LIKE 'EXCL_%' ) AND ( FieldName <> 'ES_Exclude'
          ) AND ( FieldType NOT LIKE 'global%')"; "|"; ¶; $sync_table )
        DisplayCalculation:
          Chunk:
          - ExecuteSQL
          - ' ( "SELECT FieldName, FieldReps FROM FileMaker_Fields WHERE ( TableName
            = ? ) AND ( ( FieldClass = ''Normal'' ) OR ( FieldName LIKE ''B64_%''
            ) ) AND ( FieldName NOT LIKE ''EXCL_%'' ) AND ( FieldName <> ''ES_Exclude''
            ) AND ( FieldType NOT LIKE ''global%'')"; "|"; ¶; $sync_table )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $sync_fields
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Fields in \" & $sync_table & \":
        \" & $sync_fields\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Fields in \" & $sync_table
        & \": \" & $sync_fields\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
        \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \"
        & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote
        ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp (
        \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 )
        ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Fields in \" & $sync_table & \":
          \" & $sync_fields\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
          = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Reformat the field names so that repetitions are considered.'
      Text: Reformat the field names so that repetitions are considered.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $fields; Value:$sync_table & "</field>" ]
      Value:
        Calculation: $sync_table & "</field>"
        DisplayCalculation:
          Chunk: $sync_table & "</field>"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $fields
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $f; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $f
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $field_name; Value:Let ( \n[\nfield_combo_raw = GetValue
        ( $sync_fields ; $f ); // The value pulled from the query. Example: Some_Field|5\nfield_combo_list
        = Substitute ( field_combo_raw; \"|\"; ¶ ) // Convert the value to a value
        list.\n];\nGetValue ( field_combo_list; 1 )\n) ]"
      Value:
        Calculation: "Let ( \n[\nfield_combo_raw = GetValue ( $sync_fields ; $f );
          // The value pulled from the query. Example: Some_Field|5\nfield_combo_list
          = Substitute ( field_combo_raw; \"|\"; ¶ ) // Convert the value to a value
          list.\n];\nGetValue ( field_combo_list; 1 )\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( \n[\nfield_combo_raw = "
          - GetValue
          - ' ( $sync_fields ; $f ); '
          - |
            // The value pulled from the query. Example: Some_Field|5
          - 'field_combo_list = '
          - Substitute
          - ' ( field_combo_raw; "|"; ¶ ) '
          - |
            // Convert the value to a value list.
          - |
            ];
          - GetValue
          - |2-
             ( field_combo_list; 1 )
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_name
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $field_reps; Value:Let ( \n[\nfield_combo_raw = GetValue
        ( $sync_fields ; $f ); // The value pulled from the query. Example: Some_Field|5\nfield_combo_list
        = Substitute ( field_combo_raw; \"|\"; ¶ ) // Convert the value to a value
        list.\n];\nGetValue ( field_combo_list; 2 )\n) ]"
      Value:
        Calculation: "Let ( \n[\nfield_combo_raw = GetValue ( $sync_fields ; $f );
          // The value pulled from the query. Example: Some_Field|5\nfield_combo_list
          = Substitute ( field_combo_raw; \"|\"; ¶ ) // Convert the value to a value
          list.\n];\nGetValue ( field_combo_list; 2 )\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( \n[\nfield_combo_raw = "
          - GetValue
          - ' ( $sync_fields ; $f ); '
          - |
            // The value pulled from the query. Example: Some_Field|5
          - 'field_combo_list = '
          - Substitute
          - ' ( field_combo_raw; "|"; ¶ ) '
          - |
            // Convert the value to a value list.
          - |
            ];
          - GetValue
          - |2-
             ( field_combo_list; 2 )
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_reps
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $r; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $r
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $fields; Value:$fields & $field_name & "[" & $r & "]</field>"
        ]
      Value:
        Calculation: $fields & $field_name & "[" & $r & "]</field>"
        DisplayCalculation:
          Chunk: $fields & $field_name & "[" & $r & "]</field>"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $fields
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $r; Value:$r + 1 ]
      Value:
        Calculation: $r + 1
        DisplayCalculation:
          Chunk: $r + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $r
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: |-
        Exit Loop If [ $r > GetAsNumber ( $field_reps )

        // v1.2: $r > $field_reps ]
      Calculation: |-
        $r > GetAsNumber ( $field_reps )

        // v1.2: $r > $field_reps
      DisplayCalculation:
        Chunk:
        - '$r > '
        - GetAsNumber
        - |2+
           ( $field_reps )

        - '// v1.2: $r > $field_reps'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $f; Value:$f + 1 ]
      Value:
        Calculation: $f + 1
        DisplayCalculation:
          Chunk: $f + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $f
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $f > ValueCount ( $sync_fields ) ]
      Calculation: $f > ValueCount ( $sync_fields )
      DisplayCalculation:
        Chunk:
        - '$f > '
        - ValueCount
        - ' ( $sync_fields )'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Reformatted Fields in \" & $sync_table
        & \": \" & $fields\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Reformatted Fields
        in \" & $sync_table & \": \" & $fields\n] ;\n\t\"$LogLevel = \" & ~logLevel
        & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Reformatted Fields in \" & $sync_table
          & \": \" & $fields\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
          = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Add this table''s info to the running "table_info."'
      Text: Add this table's info to the running "table_info."
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $table_info; Value:If ( not IsEmpty ( $table_info );
        $table_info & ¶; "" ) & $fields & "</table>" ]
      Value:
        Calculation: If ( not IsEmpty ( $table_info ); $table_info & ¶; "" ) & $fields
          & "</table>"
        DisplayCalculation:
          Chunk:
          - If
          - ' ( '
          - not
          - type: NoRef
            __content__: ' '
          - IsEmpty
          - ' ( $table_info ); $table_info & ¶; "" ) & $fields & "</table>"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $table_info
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Loop over the fields in the table to create the fields portion of
        what will be the SELECT statement...'
      Text: Loop over the fields in the table to create the fields portion of what
        will be the SELECT statement...
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $dyn_sql; Value:"'" & $sync_table & "'" ]
      Value:
        Calculation: '"''" & $sync_table & "''"'
        DisplayCalculation:
          Chunk: '"''" & $sync_table & "''"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $dyn_sql
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $j; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $j
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $field_name; Value:Let ( \n[\nfield_combo_raw = GetValue
        ( $sync_fields ; $j ); // The value pulled from the query. Example: Some_Field|5\nfield_combo_list
        = Substitute ( field_combo_raw; \"|\"; ¶ ) // Convert the value to a value
        list.\n];\nGetValue ( field_combo_list; 1 )\n) ]"
      Value:
        Calculation: "Let ( \n[\nfield_combo_raw = GetValue ( $sync_fields ; $j );
          // The value pulled from the query. Example: Some_Field|5\nfield_combo_list
          = Substitute ( field_combo_raw; \"|\"; ¶ ) // Convert the value to a value
          list.\n];\nGetValue ( field_combo_list; 1 )\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( \n[\nfield_combo_raw = "
          - GetValue
          - ' ( $sync_fields ; $j ); '
          - |
            // The value pulled from the query. Example: Some_Field|5
          - 'field_combo_list = '
          - Substitute
          - ' ( field_combo_raw; "|"; ¶ ) '
          - |
            // Convert the value to a value list.
          - |
            ];
          - GetValue
          - |2-
             ( field_combo_list; 1 )
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_name
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $field_reps; Value:Let ( \n[\nfield_combo_raw = GetValue
        ( $sync_fields ; $j ); // The value pulled from the query. Example: Some_Field|5\nfield_combo_list
        = Substitute ( field_combo_raw; \"|\"; ¶ ) // Convert the value to a value
        list.\n];\nGetValue ( field_combo_list; 2 )\n) ]"
      Value:
        Calculation: "Let ( \n[\nfield_combo_raw = GetValue ( $sync_fields ; $j );
          // The value pulled from the query. Example: Some_Field|5\nfield_combo_list
          = Substitute ( field_combo_raw; \"|\"; ¶ ) // Convert the value to a value
          list.\n];\nGetValue ( field_combo_list; 2 )\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( \n[\nfield_combo_raw = "
          - GetValue
          - ' ( $sync_fields ; $j ); '
          - |
            // The value pulled from the query. Example: Some_Field|5
          - 'field_combo_list = '
          - Substitute
          - ' ( field_combo_raw; "|"; ¶ ) '
          - |
            // Convert the value to a value list.
          - |
            ];
          - GetValue
          - |2-
             ( field_combo_list; 2 )
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_reps
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Loop over the reps...'
      Text: Loop over the reps...
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $r; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $r
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $dyn_sql; Value:$dyn_sql & ", '' || \\\"" & $field_name
        & "\\\"" & "[" & $r & "]" ]
      Value:
        Calculation: $dyn_sql & ", '' || \\\"" & $field_name & "\\\"" & "[" & $r &
          "]"
        DisplayCalculation:
          Chunk: $dyn_sql & ", '' || \\\"" & $field_name & "\\\"" & "[" & $r & "]"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $dyn_sql
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $r; Value:$r + 1 ]
      Value:
        Calculation: $r + 1
        DisplayCalculation:
          Chunk: $r + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $r
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: |-
        Exit Loop If [ $r > GetAsNumber ( $field_reps )

        // v1.2: $r > $field_reps ]
      Calculation: |-
        $r > GetAsNumber ( $field_reps )

        // v1.2: $r > $field_reps
      DisplayCalculation:
        Chunk:
        - '$r > '
        - GetAsNumber
        - |2+
           ( $field_reps )

        - '// v1.2: $r > $field_reps'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $j; Value:$j + 1 ]
      Value:
        Calculation: $j + 1
        DisplayCalculation:
          Chunk: $j + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $j
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $j > ValueCount ( $sync_fields ) ]
      Calculation: $j > ValueCount ( $sync_fields )
      DisplayCalculation:
        Chunk:
        - '$j > '
        - ValueCount
        - ' ( $sync_fields )'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Add this table''s fields to the SELECT statement.'
      Text: Add this table's fields to the SELECT statement.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $dyn_sql; Value:\"SELECT \" & $dyn_sql & \", '\" &
        $$record_delimiter & \n\"' FROM \\\\\\\"\" & $sync_table & \"\\\\\\\"\" &\n\"
        WHERE ( ES_UTC_Time > \" & Evaluate ( \"EasySync_Payloads::ES_Last_Pull_UTC_Time\"
        ) & \" ) AND ( COALESCE ( ES_Exclude, 0 ) = 0 )\" ]"
      Value:
        Calculation: "\"SELECT \" & $dyn_sql & \", '\" & $$record_delimiter & \n\"'
          FROM \\\\\\\"\" & $sync_table & \"\\\\\\\"\" &\n\" WHERE ( ES_UTC_Time >
          \" & Evaluate ( \"EasySync_Payloads::ES_Last_Pull_UTC_Time\" ) & \" ) AND
          ( COALESCE ( ES_Exclude, 0 ) = 0 )\""
        DisplayCalculation:
          Chunk:
          - "\"SELECT \" & $dyn_sql & \", '\" & $$record_delimiter & \n\"' FROM \\\\\\\"\"
            & $sync_table & \"\\\\\\\"\" &\n\" WHERE ( ES_UTC_Time > \" & "
          - Evaluate
          - ' ( "EasySync_Payloads::ES_Last_Pull_UTC_Time" ) & " ) AND ( COALESCE
            ( ES_Exclude, 0 ) = 0 )"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $dyn_sql
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"SELECT Statement for \" & $sync_table
        & \": \" & $dyn_sql\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"SELECT Statement for
        \" & $sync_table & \": \" & $dyn_sql\n] ;\n\t\"$LogLevel = \" & ~logLevel
        & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"SELECT Statement for \" & $sync_table
          & \": \" & $dyn_sql\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
          \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Wrap the SELECT statement in an ExecuteSQL call.'
      Text: Wrap the SELECT statement in an ExecuteSQL call.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $dyn_esql; Value:"ExecuteSQL ( \"" & $dyn_sql & "\";
        \"" & $$field_delimiter & "\"; \"\" )" ]
      Value:
        Calculation: '"ExecuteSQL ( \"" & $dyn_sql & "\"; \"" & $$field_delimiter
          & "\"; \"\" )"'
        DisplayCalculation:
          Chunk: '"ExecuteSQL ( \"" & $dyn_sql & "\"; \"" & $$field_delimiter & "\";
            \"\" )"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $dyn_esql
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"ExecuteSQL Statement for \" & $sync_table
        & \": \" & $dyn_esql\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"ExecuteSQL Statement
        for \" & $sync_table & \": \" & $dyn_esql\n] ;\n\t\"$LogLevel = \" & ~logLevel
        & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"ExecuteSQL Statement for \" & $sync_table
          & \": \" & $dyn_esql\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
          \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Evaluate the ExecuteSQL statement to get the actual data, and append
        it to the records.'
      Text: Evaluate the ExecuteSQL statement to get the actual data, and append it
        to the records.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $temp_recs; Value:Evaluate ( $dyn_esql  ) ]
      Value:
        Calculation: Evaluate ( $dyn_esql  )
        DisplayCalculation:
          Chunk:
          - Evaluate
          - ' ( $dyn_esql  )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $temp_recs
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Records From \" & $sync_table &
        \": \" & $temp_recs\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Records From \" & $sync_table
        & \": \" & $temp_recs\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
        \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \"
        & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote
        ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp (
        \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 )
        ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Records From \" & $sync_table &
          \": \" & $temp_recs\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
          \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If there are records in the current table to be pushed...'
      Text: If there are records in the current table to be pushed...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ not IsEmpty ( $temp_recs ) ]
      Calculation: not IsEmpty ( $temp_recs )
      DisplayCalculation:
        Chunk:
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( $temp_recs )'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $records; Value:If ( not IsEmpty ( $records ); $records
        & ¶; "" ) & $temp_recs ]
      Value:
        Calculation: If ( not IsEmpty ( $records ); $records & ¶; "" ) & $temp_recs
        DisplayCalculation:
          Chunk:
          - If
          - ' ( '
          - not
          - type: NoRef
            __content__: ' '
          - IsEmpty
          - ' ( $records ); $records & ¶; "" ) & $temp_recs'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $records
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:$i + 1 ]
      Value:
        Calculation: $i + 1
        DisplayCalculation:
          Chunk: $i + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $i > ValueCount ( $sync_tables ) ]
      Calculation: $i > ValueCount ( $sync_tables )
      DisplayCalculation:
        Chunk:
        - '$i > '
        - ValueCount
        - ' ( $sync_tables )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"COMPILE PAYLOAD" ]
      Value:
        Calculation: '"COMPILE PAYLOAD"'
        DisplayCalculation:
          Chunk: '"COMPILE PAYLOAD"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Check to see if any records have been deleted.'
      Text: Check to see if any records have been deleted.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $deletions; Value:ExecuteSQL ( "SELECT ES_Deleted_Record_UUID,
        Created_TimeStamp_UTC FROM EasySync_Payloads WHERE ES_Deleted_Record_UUID
        IS NOT NULL"; "|"; ¶ ) ]
      Value:
        Calculation: ExecuteSQL ( "SELECT ES_Deleted_Record_UUID, Created_TimeStamp_UTC
          FROM EasySync_Payloads WHERE ES_Deleted_Record_UUID IS NOT NULL"; "|"; ¶
          )
        DisplayCalculation:
          Chunk:
          - ExecuteSQL
          - ' ( "SELECT ES_Deleted_Record_UUID, Created_TimeStamp_UTC FROM EasySync_Payloads
            WHERE ES_Deleted_Record_UUID IS NOT NULL"; "|"; ¶ )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $deletions
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Deletions: \" & $deletions\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Deletions: \" & $deletions\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Deletions: \" & $deletions\n] ;\n\t\"$LogLevel
          = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ IsEmpty ( $records ) and IsEmpty ( $deletions ) ]
      Calculation: IsEmpty ( $records ) and IsEmpty ( $deletions )
      DisplayCalculation:
        Chunk:
        - IsEmpty
        - ' ( $records ) '
        - and
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( $deletions )'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $nothingToPush; Value:True ]
      Value:
        Calculation: 'True'
        DisplayCalculation:
          Chunk: 'True'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $nothingToPush
    - enable: 'True'
      id: '69'
      name: Else
      StepText: Else
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Create payload header (everything that isn''t the record data/id''s
        to delete)'
      Text: Create payload header (everything that isn't the record data/id's to delete)
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $payload_header; Value:/* last_sync_info */\n\"<last_pull>¶\"\n\t&
        Evaluate ( \"EasySync_Payloads::ES_Last_Pull_UTC_Time\" )\n& \"¶</last_pull>\"\n&
        ¶\n\n/* settings_info */\n& \"<settings>¶\"\n\t& $$field_delimiter & \"</setting>\"\n\t&
        $$record_delimiter & \"</setting>\"\n\t& Get ( PersistentID ) & \"</setting>\"\n\t&
        $$client_version & \"</setting>\"\n\t& Substitute ( Get ( SystemIPAddress
        ); ¶; \", \" ) & \"</setting>\"\n\t& Substitute ( Get ( SystemNICAddress );
        ¶; \", \" ) & \"</setting>\"\n\t& Get ( SystemPlatform ) & \"</setting>\"\n\t&
        Get ( SystemVersion ) & \"</setting>\"\n\t& Get ( Device ) & \"</setting>\"\n\t&
        Get ( NetworkProtocol ) & \"</setting>\"\n\t& Get ( NetworkType ) & \"</setting>\"\n\t&
        $$additional_push_info\n& \"¶</settings>\"\n& ¶\n\n/* table_info */\n& \"<tables>¶\"\n\t&
        $table_info\n& \"¶</tables>\" ]"
      Value:
        Calculation: "/* last_sync_info */\n\"<last_pull>¶\"\n\t& Evaluate ( \"EasySync_Payloads::ES_Last_Pull_UTC_Time\"
          )\n& \"¶</last_pull>\"\n& ¶\n\n/* settings_info */\n& \"<settings>¶\"\n\t&
          $$field_delimiter & \"</setting>\"\n\t& $$record_delimiter & \"</setting>\"\n\t&
          Get ( PersistentID ) & \"</setting>\"\n\t& $$client_version & \"</setting>\"\n\t&
          Substitute ( Get ( SystemIPAddress ); ¶; \", \" ) & \"</setting>\"\n\t&
          Substitute ( Get ( SystemNICAddress ); ¶; \", \" ) & \"</setting>\"\n\t&
          Get ( SystemPlatform ) & \"</setting>\"\n\t& Get ( SystemVersion ) & \"</setting>\"\n\t&
          Get ( Device ) & \"</setting>\"\n\t& Get ( NetworkProtocol ) & \"</setting>\"\n\t&
          Get ( NetworkType ) & \"</setting>\"\n\t& $$additional_push_info\n& \"¶</settings>\"\n&
          ¶\n\n/* table_info */\n& \"<tables>¶\"\n\t& $table_info\n& \"¶</tables>\""
        DisplayCalculation:
          Chunk:
          - "/* last_sync_info */\n\"<last_pull>¶\"\n\t& "
          - Evaluate
          - " ( \"EasySync_Payloads::ES_Last_Pull_UTC_Time\" )\n& \"¶</last_pull>\"\n&
            ¶\n\n/* settings_info */\n& \"<settings>¶\"\n\t& $$field_delimiter & \"</setting>\"\n\t&
            $$record_delimiter & \"</setting>\"\n\t& "
          - Get
          - ' ( '
          - PersistentID
          - " ) & \"</setting>\"\n\t& $$client_version & \"</setting>\"\n\t& "
          - Substitute
          - ' ( '
          - Get
          - ' ( '
          - SystemIPAddress
          - " ); ¶; \", \" ) & \"</setting>\"\n\t& "
          - Substitute
          - ' ( '
          - Get
          - ' ( '
          - SystemNICAddress
          - " ); ¶; \", \" ) & \"</setting>\"\n\t& "
          - Get
          - ' ( '
          - SystemPlatform
          - " ) & \"</setting>\"\n\t& "
          - Get
          - ' ( '
          - SystemVersion
          - " ) & \"</setting>\"\n\t& "
          - Get
          - ' ( '
          - Device
          - " ) & \"</setting>\"\n\t& "
          - Get
          - ' ( '
          - NetworkProtocol
          - " ) & \"</setting>\"\n\t& "
          - Get
          - ' ( '
          - NetworkType
          - " ) & \"</setting>\"\n\t& $$additional_push_info\n& \"¶</settings>\"\n&
            ¶\n\n/* table_info */\n& \"<tables>¶\"\n\t& $table_info\n& \"¶</tables>\""
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $payload_header
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Header: \" & $payload_header\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Header: \"
        & $payload_header\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Header: \" & $payload_header\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Put the payload together.'
      Text: Put the payload together.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $payload; Value:\"<payload>¶\"\n\t& $payload_header
        & ¶\n\t& If ( not IsEmpty ( $records ) ;\n\t\t\"<records>\" & ¶ & $records
        & ¶ & \"</records>¶\"\n\t)\n\t& If ( not IsEmpty ( $deletions ) ;\n\t\t\"<deletions>\"
        & ¶ & $deletions & ¶ & \"</deletions>¶\"\n\t)\n& \"¶</payload>\" ]"
      Value:
        Calculation: "\"<payload>¶\"\n\t& $payload_header & ¶\n\t& If ( not IsEmpty
          ( $records ) ;\n\t\t\"<records>\" & ¶ & $records & ¶ & \"</records>¶\"\n\t)\n\t&
          If ( not IsEmpty ( $deletions ) ;\n\t\t\"<deletions>\" & ¶ & $deletions
          & ¶ & \"</deletions>¶\"\n\t)\n& \"¶</payload>\""
        DisplayCalculation:
          Chunk:
          - "\"<payload>¶\"\n\t& $payload_header & ¶\n\t& "
          - If
          - ' ( '
          - not
          - type: NoRef
            __content__: ' '
          - IsEmpty
          - " ( $records ) ;\n\t\t\"<records>\" & ¶ & $records & ¶ & \"</records>¶\"\n\t)\n\t& "
          - If
          - ' ( '
          - not
          - type: NoRef
            __content__: ' '
          - IsEmpty
          - " ( $deletions ) ;\n\t\t\"<deletions>\" & ¶ & $deletions & ¶ & \"</deletions>¶\"\n\t)\n&
            \"¶</payload>\""
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $payload
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"SEND PAYLOAD TO SERVER" ]
      Value:
        Calculation: '"SEND PAYLOAD TO SERVER"'
        DisplayCalculation:
          Chunk: '"SEND PAYLOAD TO SERVER"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Note: We use this segmented approach to work around the PSoS script
        parameter''s 1,000,000 character limit.'
      Text: 'Note: We use this segmented approach to work around the PSoS script parameter''s
        1,000,000 character limit.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Special thanks to Kirk Bowman @ MightyData for the idea!'
      Text: Special thanks to Kirk Bowman @ MightyData for the idea!
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ not $nothingToPush ]
      Calculation: not $nothingToPush
      DisplayCalculation:
        Chunk:
        - not
        - ' $nothingToPush'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: Config: Show Message”; Parameter:
        "Pushing payload to server..." ]'
      Calculation: '"Pushing payload to server..."'
      DisplayCalculation:
        Chunk: '"Pushing payload to server..."'
      Script:
        id: '67'
        name: 'EasySync Client: Config: Show Message'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $payload_length; Value:Length ( $payload ) ]
      Value:
        Calculation: Length ( $payload )
        DisplayCalculation:
          Chunk:
          - Length
          - ' ( $payload )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $payload_length
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $num_segments; Value:Int ( $payload_length / $$max_push_segment_size
        )\n+ If ( Mod ( $payload_length ; $$max_push_segment_size ) ;\n\t1 ;\n\t0\n)
        ]"
      Value:
        Calculation: "Int ( $payload_length / $$max_push_segment_size )\n+ If ( Mod
          ( $payload_length ; $$max_push_segment_size ) ;\n\t1 ;\n\t0\n)"
        DisplayCalculation:
          Chunk:
          - Int
          - " ( $payload_length / $$max_push_segment_size )\n+ "
          - If
          - ' ( '
          - Mod
          - " ( $payload_length ; $$max_push_segment_size ) ;\n\t1 ;\n\t0\n)"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $num_segments
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = List (\n\t\t\"Payload Size: \" &
        $payload_length ;\n\t\t\"Max Segment Size: \" & $$max_push_segment_size ;\n\t\t\"Number
        of Segments Being Sent: \" & $num_segments\n\t)\n] ;\n\t\"$LogLevel = \" &
        ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = List (\n\t\t\"Payload
        Size: \" & $payload_length ;\n\t\t\"Max Segment Size: \" & $$max_push_segment_size
        ;\n\t\t\"Number of Segments Being Sent: \" & $num_segments\n\t)\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = "
        - List
        - " (\n\t\t\"Payload Size: \" & $payload_length ;\n\t\t\"Max Segment Size:
          \" & $$max_push_segment_size ;\n\t\t\"Number of Segments Being Sent: \"
          & $num_segments\n\t)\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
          \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $payload_segment_ids; Value:"" ]
      Value:
        Calculation: '""'
        DisplayCalculation:
          Chunk: '""'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $payload_segment_ids
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $segment; Value:Middle (\n\t$payload ;\n\t( ( $i -
        1 ) * $$max_push_segment_size ) + 1 ;\n\t$$max_push_segment_size\n) ]"
      Value:
        Calculation: "Middle (\n\t$payload ;\n\t( ( $i - 1 ) * $$max_push_segment_size
          ) + 1 ;\n\t$$max_push_segment_size\n)"
        DisplayCalculation:
          Chunk:
          - Middle
          - " (\n\t$payload ;\n\t( ( $i - 1 ) * $$max_push_segment_size ) + 1 ;\n\t$$max_push_segment_size\n)"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $segment
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: Config: Push: Send Segment”; Parameter:
        $segment ]'
      Calculation: $segment
      DisplayCalculation:
        Chunk: $segment
      Script:
        id: '54'
        name: 'EasySync Client: Config: Push: Send Segment'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( LastError ) ]
      Calculation: Get ( LastError )
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - LastError
        - ' )'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\ttheErrorDescription = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section:
          \" & $~script.section & \". Make sure the perform script step calls the
          correct script and the user has permission to run it.\" ;\n\ttheErrorType
          = \"Fmp\" ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) ) ]"
      Calculation: "/* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign script result to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& "
        - Get
        - ' ( '
        - ScriptResult
        - " )\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n) )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType = \"
        & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode &
        \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) & \"
        ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" &
        Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$~script.section = \" & Quote
        ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) ) ]"
      Calculation: "/* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign subscript error info to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n)
          )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing
        script: '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)
        ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \".
        $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing script:
        '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \". $error could
          not be evaluated.\";\n\ttheErrorInfo = \"after performing script: '\" &
          $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $errorCode ]
      Calculation: $errorCode
      DisplayCalculation:
        Chunk: $errorCode
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /* subscript error has been saved to local variable(s)
        */\n\nLet ( [\n\t/* add the current script's name to a list of scripts that
        triggered this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf
        ( IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "/* subscript error has been saved to local variable(s) */\n\nLet
        ( [\n\t/* add the current script's name to a list of scripts that triggered
        this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf (
        IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - |+
          /* subscript error has been saved to local variable(s) */

        - Let
        - " ( [\n\t/* add the current script's name to a list of scripts that triggered
          this error */\n\t~scriptStack = "
        - List
        - " (\n\t\t"
        - Get
        - ' ( '
        - ScriptName
        - " ) ;\n\t\t"
        - If
        - ' ( '
        - IsEmpty
        - " ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's name
          that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
          ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
          \"$scriptStack = \" & "
        - Quote
        - " ( ~scriptStack ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $payload_segment_ids; Value:$payload_segment_ids
        & If ( not IsEmpty ( $payload_segment_ids ) ; ¶ )
        & $payload_segment_id ]
      Value:
        Calculation: |-
          $payload_segment_ids
          & If ( not IsEmpty ( $payload_segment_ids ) ; ¶ )
          & $payload_segment_id
        DisplayCalculation:
          Chunk:
          - "$payload_segment_ids\n& "
          - If
          - ' ( '
          - not
          - type: NoRef
            __content__: ' '
          - IsEmpty
          - |2-
             ( $payload_segment_ids ) ; ¶ )
            & $payload_segment_id
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $payload_segment_ids
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:$i + 1 ]
      Value:
        Calculation: $i + 1
        DisplayCalculation:
          Chunk: $i + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $i > $num_segments ]
      Calculation: $i > $num_segments
      DisplayCalculation:
        Chunk: $i > $num_segments
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /**\n * An error occurred in the above loop\n *\n
        * assign error info to local variables\n * then evaluate the errorCode as
        a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t&
        \"! = \\\"\\\" ] ; $errorCode )\"\n) ) ]"
      Calculation: "/**\n * An error occurred in the above loop\n *\n * assign error
        info to local variables\n * then evaluate the errorCode as a Boolean\n * \n
        */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\"
        ] ; $errorCode )\"\n) )"
      DisplayCalculation:
        Chunk:
        - "/**\n * An error occurred in the above loop\n *\n * assign error info to
          local variables\n * then evaluate the errorCode as a Boolean\n * \n */\n\n"
        - GetAsBoolean
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n)
          )"
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Segment IDs: \" & $payload_segment_ids\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Segment IDs:
        \" & $payload_segment_ids\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
        \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \"
        & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote
        ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp (
        \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 )
        ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Segment IDs: \" & $payload_segment_ids\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"PROCESS PAYLOAD" ]
      Value:
        Calculation: '"PROCESS PAYLOAD"'
        DisplayCalculation:
          Chunk: '"PROCESS PAYLOAD"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ not $nothingToPush ]
      Calculation: not $nothingToPush
      DisplayCalculation:
        Chunk:
        - not
        - ' $nothingToPush'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: Config: Show Message”; Parameter:
        "Server is processing payload..." ]'
      Calculation: '"Server is processing payload..."'
      DisplayCalculation:
        Chunk: '"Server is processing payload..."'
      Script:
        id: '67'
        name: 'EasySync Client: Config: Show Message'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: Config: Push: Process”; Parameter:
        "$payload_segment_ids = " & Quote ( $payload_segment_ids ) & " ;¶" ]'
      Calculation: '"$payload_segment_ids = " & Quote ( $payload_segment_ids ) & "
        ;¶"'
      DisplayCalculation:
        Chunk:
        - '"$payload_segment_ids = " & '
        - Quote
        - ' ( $payload_segment_ids ) & " ;¶"'
      Script:
        id: '55'
        name: 'EasySync Client: Config: Push: Process'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( LastError ) ]
      Calculation: Get ( LastError )
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - LastError
        - ' )'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\ttheErrorDescription = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section:
          \" & $~script.section & \". Make sure the perform script step calls the
          correct script and the user has permission to run it.\" ;\n\ttheErrorType
          = \"Fmp\" ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) ) ]"
      Calculation: "/* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign script result to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& "
        - Get
        - ' ( '
        - ScriptResult
        - " )\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n) )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType = \"
        & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode &
        \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) & \"
        ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" &
        Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$~script.section = \" & Quote
        ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) ) ]"
      Calculation: "/* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign subscript error info to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n)
          )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing
        script: '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)
        ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \".
        $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing script:
        '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \". $error could
          not be evaluated.\";\n\ttheErrorInfo = \"after performing script: '\" &
          $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $errorCode ]
      Calculation: $errorCode
      DisplayCalculation:
        Chunk: $errorCode
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /* subscript error has been saved to local variable(s)
        */\n\nLet ( [\n\t/* add the current script's name to a list of scripts that
        triggered this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf
        ( IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "/* subscript error has been saved to local variable(s) */\n\nLet
        ( [\n\t/* add the current script's name to a list of scripts that triggered
        this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf (
        IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - |+
          /* subscript error has been saved to local variable(s) */

        - Let
        - " ( [\n\t/* add the current script's name to a list of scripts that triggered
          this error */\n\t~scriptStack = "
        - List
        - " (\n\t\t"
        - Get
        - ' ( '
        - ScriptName
        - " ) ;\n\t\t"
        - If
        - ' ( '
        - IsEmpty
        - " ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's name
          that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
          ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
          \"$scriptStack = \" & "
        - Quote
        - " ( ~scriptStack ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"UPDATE LAST PUSH TIME" ]
      Value:
        Calculation: '"UPDATE LAST PUSH TIME"'
        DisplayCalculation:
          Chunk: '"UPDATE LAST PUSH TIME"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ "EasySync_Payloads::ES_Last_Push_UTC_Time"; Get
        ( CurrentTimeUTCMilliseconds ) ]
      Result:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      TargetName:
        Calculation: '"EasySync_Payloads::ES_Last_Push_UTC_Time"'
        DisplayCalculation:
          Chunk: '"EasySync_Payloads::ES_Last_Push_UTC_Time"'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode
        = Get ( LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation
        for the description of this error code)\" ;\n\t\ttheErrorInfo = \"\" ;\n\t\ttheErrorType
        = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType = \" & Quote ( theErrorType )
        & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & Quote ( Get ( ScriptName )
        ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & Quote ( $~script.section )
        & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n) ]"
      Calculation: "If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode = Get (
        LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for
        the description of this error code)\" ;\n\t\ttheErrorInfo = \"\" ;\n\t\ttheErrorType
        = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType = \" & Quote ( theErrorType )
        & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & Quote ( Get ( ScriptName )
        ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & Quote ( $~script.section )
        & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n)"
      DisplayCalculation:
        Chunk:
        - If
        - ' ( '
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t"
        - Let
        - " ( [\n\t\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for the
          description of this error code)\" ;\n\t\ttheErrorInfo = \"\" ;\n\t\ttheErrorType
          = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\t"
        - 'True'
        - "\n\t)\n)"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"COMMIT RECORD" ]
      Value:
        Calculation: '"COMMIT RECORD"'
        DisplayCalculation:
          Chunk: '"COMMIT RECORD"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '75'
      name: Commit Records/Requests
      StepText: |-
        Commit Records/Requests
        [ Skip data entry validation; No dialog ]
      NoInteract:
        state: 'True'
      Option:
        state: 'True'
      ESSForceCommit:
        state: 'False'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode
        = Get ( LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation
        for the description of this error code)\" ;\n\t\ttheErrorInfo = \"after commit
        record\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType
        = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription )
        & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n) ]"
      Calculation: "If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode = Get (
        LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for
        the description of this error code)\" ;\n\t\ttheErrorInfo = \"after commit
        record\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType
        = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription )
        & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n)"
      DisplayCalculation:
        Chunk:
        - If
        - ' ( '
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t"
        - Let
        - " ( [\n\t\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for the
          description of this error code)\" ;\n\t\ttheErrorInfo = \"after commit record\"
          ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\t"
        - 'True'
        - "\n\t)\n)"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"CLEAN UP LOCALLY LOGGED DELETIONS"
        ]
      Value:
        Calculation: '"CLEAN UP LOCALLY LOGGED DELETIONS"'
        DisplayCalculation:
          Chunk: '"CLEAN UP LOCALLY LOGGED DELETIONS"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# errors in this section don''t affect the sync, only the cleanup,
        so they will be logged but not reported in the script result'
      Text: ' errors in this section don''t affect the sync, only the cleanup, so
        they will be logged but not reported in the script result'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#single-pass loop for error trapping'
      Text: single-pass loop for error trapping
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '22'
      name: Enter Find Mode
      StepText: Enter Find Mode [  ]
      Pause:
        state: 'False'
      Restore:
        state: 'False'
    - enable: 'True'
      id: '76'
      name: Set Field
      StepText: Set Field [ EasySync_Payloads::ES_Deleted_Record_UUID; "@*" ]
      Calculation: '"@*"'
      DisplayCalculation:
        Chunk: '"@*"'
      Field:
        table: EasySync_Payloads
        id: '17'
        name: ES_Deleted_Record_UUID
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode
        = Get ( LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation
        for the description of this error code)\" ;\n\t\ttheErrorInfo = \"after set
        field: deleted record uuid\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error
        = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode
        = \" & theErrorCode & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n) ]"
      Calculation: "If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode = Get (
        LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for
        the description of this error code)\" ;\n\t\ttheErrorInfo = \"after set field:
        deleted record uuid\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode =
        \" & theErrorCode & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n)"
      DisplayCalculation:
        Chunk:
        - If
        - ' ( '
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t"
        - Let
        - " ( [\n\t\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for the
          description of this error code)\" ;\n\t\ttheErrorInfo = \"after set field:
          deleted record uuid\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error
          = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\t"
        - 'True'
        - "\n\t)\n)"
    - enable: 'True'
      id: '28'
      name: Perform Find
      StepText: Perform Find [  ]
      Restore:
        state: 'False'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( FoundCount ) ]
      Calculation: Get ( FoundCount )
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - FoundCount
        - ' )'
    - enable: 'True'
      id: '10'
      name: Delete All Records
      StepText: |-
        Delete All Records
        [ No dialog ]
      NoInteract:
        state: 'True'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode
        = Get ( LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation
        for the description of this error code)\" ;\n\t\ttheErrorInfo = \"after delete
        all records step\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType
        = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription )
        & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\n\t\t& \"$FoundCount = \" &
        Get ( FoundCount ) & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n) ]"
      Calculation: "If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode = Get (
        LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for
        the description of this error code)\" ;\n\t\ttheErrorInfo = \"after delete
        all records step\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType
        = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription )
        & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\n\t\t& \"$FoundCount = \" &
        Get ( FoundCount ) & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n)"
      DisplayCalculation:
        Chunk:
        - If
        - ' ( '
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t"
        - Let
        - " ( [\n\t\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for the
          description of this error code)\" ;\n\t\ttheErrorInfo = \"after delete all
          records step\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType
          = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\n\t\t& \"$FoundCount = \" & "
        - Get
        - ' ( '
        - FoundCount
        - " ) & \" ;¶\"\n\t] ;\n\t\t"
        - 'True'
        - "\n\t)\n)"
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#end single-pass loop for error trapping'
      Text: end single-pass loop for error trapping
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ True ]
      Calculation: 'True'
      DisplayCalculation:
        Chunk: 'True'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '68'
      name: If
      StepText: "If [ /**\n * assign error info to local variables\n * then evaluate
        the errorCode as a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let
        ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n) ) ]"
      Calculation: "/**\n * assign error info to local variables\n * then evaluate
        the errorCode as a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let
        ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n) )"
      DisplayCalculation:
        Chunk:
        - "/**\n * assign error info to local variables\n * then evaluate the errorCode
          as a Boolean\n * \n */\n\n"
        - GetAsBoolean
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n)
          )"
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 2 ;\n\t~message = \"an error occurred when cleaning
        up locally logged deletions\"\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
        \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \"
        & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote
        ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp (
        \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 )
        ) & \" ) ;¶\"\n\n\t& \"$error = \" & Quote ( $error ) & \" ;¶\"\n\t& \"$runtime
        = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 2 ;\n\t~message = \"an error occurred when
        cleaning up locally logged deletions\"\n] ;\n\t\"$LogLevel = \" & ~logLevel
        & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n\n\t& \"$error = \" & Quote ( $error ) & \" ;¶\"\n\t& \"$runtime
        = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 2 ;\n\t~message = \"an error occurred when cleaning
          up locally logged deletions\"\n] ;\n\t\"$LogLevel = \" & ~logLevel & \"
          ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error = \" & "
        - Quote
        - " ( $error ) & \" ;¶\"\n\t& \"$runtime = \" & "
        - GetAsNumber
        - |2-
           ( $~script.runtime ) & " ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $error; Value:"" ]
      Value:
        Calculation: '""'
        DisplayCalculation:
          Chunk: '""'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $error
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"SHOW SUCCESS DIALOG" ]
      Value:
        Calculation: '"SHOW SUCCESS DIALOG"'
        DisplayCalculation:
          Chunk: '"SHOW SUCCESS DIALOG"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: "If [ $$show_successful_pushes\nand\n/* is client application */\n\nLeft
        ( Get ( ApplicationVersion ) ; 3 ) = \"Pro\"\nor\nLeft ( Get ( ApplicationVersion
        ) ; 7 ) = \"Runtime\"\nor\nGet ( SystemPlatform ) = 3\t // iOS\nor\nGet (
        SystemPlatform ) = 4\t // WebDirect ]"
      Calculation: "$$show_successful_pushes\nand\n/* is client application */\n\nLeft
        ( Get ( ApplicationVersion ) ; 3 ) = \"Pro\"\nor\nLeft ( Get ( ApplicationVersion
        ) ; 7 ) = \"Runtime\"\nor\nGet ( SystemPlatform ) = 3\t // iOS\nor\nGet (
        SystemPlatform ) = 4\t // WebDirect"
      DisplayCalculation:
        Chunk:
        - |
          $$show_successful_pushes
        - and
        - |2+

          /* is client application */

        - Left
        - ' ( '
        - Get
        - ' ( '
        - ApplicationVersion
        - |2
           ) ; 3 ) = "Pro"
        - or
        - type: NoRef
          __content__: |2+

        - Left
        - ' ( '
        - Get
        - ' ( '
        - ApplicationVersion
        - |2
           ) ; 7 ) = "Runtime"
        - or
        - type: NoRef
          __content__: |2+

        - Get
        - ' ( '
        - SystemPlatform
        - " ) = 3\t "
        - |
          // iOS
        - or
        - type: NoRef
          __content__: |2+

        - Get
        - ' ( '
        - SystemPlatform
        - " ) = 4\t "
        - // WebDirect
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: "Push Successful"; Message: "Local data
        has been successfully pushed to the server. (Elapsed Time: " & GetAsTime (
        $~script.runtime ) & ")"; Default Button: “OK”, Commit: “Yes” ]'
      Title:
        Calculation: '"Push Successful"'
        DisplayCalculation:
          Chunk: '"Push Successful"'
      Message:
        Calculation: '"Local data has been successfully pushed to the server. (Elapsed
          Time: " & GetAsTime ( $~script.runtime ) & ")"'
        DisplayCalculation:
          Chunk:
          - '"Local data has been successfully pushed to the server. (Elapsed Time:
            " & '
          - GetAsTime
          - ' ( $~script.runtime ) & ")"'
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"OK"'
          DisplayCalculation:
            Chunk: '"OK"'
        - CommitState: 'False'
        - CommitState: 'False'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: 'Set Variable [ $~script.section; Value:"EASYDEPLOY: SUGGEST UPGRADE"
        ]'
      Value:
        Calculation: '"EASYDEPLOY: SUGGEST UPGRADE"'
        DisplayCalculation:
          Chunk: '"EASYDEPLOY: SUGGEST UPGRADE"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: "If [ $$easydeploy_suggest_upgrade\nand\n/* is client application
        */\n\nLeft ( Get ( ApplicationVersion ) ; 3 ) = \"Pro\"\nor\nLeft ( Get (
        ApplicationVersion ) ; 7 ) = \"Runtime\"\nor\nGet ( SystemPlatform ) = 3\t
        // iOS\nor\nGet ( SystemPlatform ) = 4\t // WebDirect ]"
      Calculation: "$$easydeploy_suggest_upgrade\nand\n/* is client application */\n\nLeft
        ( Get ( ApplicationVersion ) ; 3 ) = \"Pro\"\nor\nLeft ( Get ( ApplicationVersion
        ) ; 7 ) = \"Runtime\"\nor\nGet ( SystemPlatform ) = 3\t // iOS\nor\nGet (
        SystemPlatform ) = 4\t // WebDirect"
      DisplayCalculation:
        Chunk:
        - |
          $$easydeploy_suggest_upgrade
        - and
        - |2+

          /* is client application */

        - Left
        - ' ( '
        - Get
        - ' ( '
        - ApplicationVersion
        - |2
           ) ; 3 ) = "Pro"
        - or
        - type: NoRef
          __content__: |2+

        - Left
        - ' ( '
        - Get
        - ' ( '
        - ApplicationVersion
        - |2
           ) ; 7 ) = "Runtime"
        - or
        - type: NoRef
          __content__: |2+

        - Get
        - ' ( '
        - SystemPlatform
        - " ) = 3\t "
        - |
          // iOS
        - or
        - type: NoRef
          __content__: |2+

        - Get
        - ' ( '
        - SystemPlatform
        - " ) = 4\t "
        - // WebDirect
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: "Upgrade Solution?"; Message: "A new
        version of this solution is available.¶¶Would you like to upgrade now?"; Default
        Button: “Yes”, Commit: “Yes”; Button 2: “No”, Commit: “No” ]'
      Title:
        Calculation: '"Upgrade Solution?"'
        DisplayCalculation:
          Chunk: '"Upgrade Solution?"'
      Message:
        Calculation: '"A new version of this solution is available.¶¶Would you like
          to upgrade now?"'
        DisplayCalculation:
          Chunk: '"A new version of this solution is available.¶¶Would you like to
            upgrade now?"'
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"Yes"'
          DisplayCalculation:
            Chunk: '"Yes"'
        - CommitState: 'False'
          Calculation: '"No"'
          DisplayCalculation:
            Chunk: '"No"'
        - CommitState: 'False'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( LastMessageChoice ) = 1 ]
      Calculation: Get ( LastMessageChoice ) = 1
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - LastMessageChoice
        - ' ) = 1'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: Perform Script [ “Upgrade Solution” ]
      Script:
        id: '46'
        name: Upgrade Solution
    - enable: 'True'
      id: '90'
      name: Halt Script
      StepText: Halt Script
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'
      Text: ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# end single-pass loop for error trapping'
      Text: ' end single-pass loop for error trapping'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ True ]
      Calculation: 'True'
      DisplayCalculation:
        Chunk: 'True'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"HANDLE ERROR" ]
      Value:
        Calculation: '"HANDLE ERROR"'
        DisplayCalculation:
          Chunk: '"HANDLE ERROR"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.runtime; Value:( Get ( CurrentTimeUTCMilliseconds
        ) - $~script.start ) / 1000 ]
      Value:
        Calculation: ( Get ( CurrentTimeUTCMilliseconds ) - $~script.start ) / 1000
        DisplayCalculation:
          Chunk:
          - '( '
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $~script.start ) / 1000'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.runtime
    - enable: 'True'
      id: '68'
      name: If
      StepText: "If [ /**\n * assign error info to local variables\n * then evaluate
        the errorCode as a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let
        ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n) ) ]"
      Calculation: "/**\n * assign error info to local variables\n * then evaluate
        the errorCode as a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let
        ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n) )"
      DisplayCalculation:
        Chunk:
        - "/**\n * assign error info to local variables\n * then evaluate the errorCode
          as a Boolean\n * \n */\n\n"
        - GetAsBoolean
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n)
          )"
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error = \" & Quote ( $error ) & \" ;¶\"\n\t&
        \"$runtime = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error
        = \" & Quote ( $error ) & \" ;¶\"\n\t& \"$runtime = \" & GetAsNumber ( $~script.runtime
        ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n] ;\n\t\"$LogLevel
          = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error = \" & "
        - Quote
        - " ( $error ) & \" ;¶\"\n\t& \"$runtime = \" & "
        - GetAsNumber
        - |2-
           ( $~script.runtime ) & " ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '69'
      name: Else
      StepText: Else
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"exit script without error\"\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime
        = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"exit script without
        error\"\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime
        = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"exit script without error\"\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime = \" & "
        - GetAsNumber
        - |2-
           ( $~script.runtime ) & " ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $!; Value:""
        /**
         * This is a step that will not return an error.
         *
         * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
         * Get ( LastError ) to test if an error occurred with the Perform Script step.
         *
         */ ]
      Value:
        Calculation: |-
          ""
          /**
           * This is a step that will not return an error.
           *
           * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
           * Get ( LastError ) to test if an error occurred with the Perform Script step.
           *
           */
        DisplayCalculation:
          Chunk: |-
            ""
            /**
             * This is a step that will not return an error.
             *
             * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
             * Get ( LastError ) to test if an error occurred with the Perform Script step.
             *
             */
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $!
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: |-
        Exit Script [ Result: "$error = " & Quote ( $error ) & " ;¶"
        & "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶"
        & "$nothingToPush = " & GetAsBoolean( $nothingToPush ) & " ;¶" ]
      Calculation: |-
        "$error = " & Quote ( $error ) & " ;¶"
        & "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶"
        & "$nothingToPush = " & GetAsBoolean( $nothingToPush ) & " ;¶"
      DisplayCalculation:
        Chunk:
        - '"$error = " & '
        - Quote
        - " ( $error ) & \" ;¶\"\n& \"$runtime = \" & "
        - GetAsNumber
        - " ( $~script.runtime ) & \" ;¶\"\n& \"$nothingToPush = \" & "
        - GetAsBoolean
        - ( $nothingToPush ) & " ;¶"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
