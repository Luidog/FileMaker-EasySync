#################################################################################
# PURPOSE:
#    Create and pull a sync payload from the server.
#
# CONTEXT: EasySync_Payloads
#
# PARAMETERS: none
#
# RETURNS:
#    $error | a dictionary containing error data
#    $runtime | number of seconds this script was running (with millisecond precision)
#    $nothingToPull | boolean | True if no errors were encounted and there were no changes to pull from to the server.
#
# VARIABLES:
#
# DEPENDENCIES:
#
# NOTES:
#
# REVISIONS:
#    2014-04-16			Tim Dietrich (timdietrich@me.com)	Initial version.2014-04-17			Tim Dietrich (timdietrich@me.com)	Now pushing the last push / pull timestamps in a SQL-friendly format.	We're doing this client-side to avoid problems that occur when the server's	timestamp format differs from that of the client.2014-04-18	Tim Dietrich (timdietrich@me.com)	Adjusting ES_Timestamp values based on the timezone offset.	Other minor changes to improve performance.2014-04-19	Tim Dietrich (timdietrich@me.com)	Reflects shift to UTC timestamps.2014-04-21     Tim Dietrich (timdietrich@me.com)     We're now only setting fields that have actually changed.2014-04-22	Tim Dietrich (timdietrich@me.com)	Now searching for the closing "</records>" tag using -1 as the start position	so that we're searching for the tag from the end of the payload.	Thanks to Daniel Smith (@FMweetbicks) for the suggestion.2014-04-23	Tim Dietrich (timdietrich@me.com)	"Get ( SystemIPAddress )" is now comma-delimited when passed as a param.	This resolves an issue that comes up if the client has multiple IPs.2014-04-24	Tim Dietrich (timdietrich@me.com)	Added support for repeating fields.2014-04-28	Tim Dietrich (timdietrich@me.com)	Added a variable that allows auto-enter calcs for "ES_UTC_Time" and "ES_Device_ID" to be	overwritten during the sync process.2014-05-08	Tim Dietrich (timdietrich@me.com)	Optimized code that gets the next record.2014-05-15	Tim Dietrich (timdietrich@me.com)	Eliminated the need to copy the records portion of the payload to a distinct $records variable.	This should help to reduce the memory needed to process the payload, and should also slightly	increase performance.	Also, we're now only saving the actual payload to the record if debugging of the pull process	is enabled. Otherwise, there is no need to write the payload to disk.
#################################################################################
Set Variable [ $~script.start; Value:Get ( CurrentTimeUTCMilliseconds ) ]
Set Variable [ $~script.errorType; Value:"Module: EasySync Client" ]
#
#
#
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 5 ;	~message = "start script"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#
#
Perform Script [ “EasySync Client: Config: Show Message”; Parameter: "Pulling Data from Server..." ]
#
#
#
Loop
# single-pass loop for error trapping
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"SET VARIABLES" ]
#================================================================================
Set Variable [ $script_override; Value:True/** * Used to override auto-enter calculations. *  * Allow auto-enter calcs for "ES_UTC_Time" and "ES_Device_ID" to be overwritten during the sync process. *  */ ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"MAKE SURE LAST PULL AND PUSH TIME IS NOT EMPTY" ]
#================================================================================
If [ IsEmpty ( Evaluate ( "EasySync_Payloads::ES_Last_Pull_UTC_Time" ) ) ]
Set Field By Name [ "EasySync_Payloads::ES_Last_Pull_UTC_Time"; 0 ]
Exit Loop If [ If ( Get ( LastError ) ;	Let ( [		theErrorCode = Get ( LastError ) ;		theErrorDescription = "(see FileMaker documentation for the description of this error code)" ;		theErrorInfo = "after set field: EasySync_Payloads::ES_Last_Pull_UTC_Time" ;		theErrorType = "Fmp" ;				$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"		& "$errorCode = " & theErrorCode & " ;¶"		& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"		& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;			"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"		)		& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"		& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	] ;		True	)) ]
End If
#
If [ IsEmpty ( Evaluate ( "EasySync_Payloads::ES_Last_Push_UTC_Time" ) ) ]
Set Field By Name [ "EasySync_Payloads::ES_Last_Push_UTC_Time"; 0 ]
Exit Loop If [ If ( Get ( LastError ) ;	Let ( [		theErrorCode = Get ( LastError ) ;		theErrorDescription = "(see FileMaker documentation for the description of this error code)" ;		theErrorInfo = "after set field: EasySync_Payloads::ES_Last_Push_UTC_Time" ;		theErrorType = "Fmp" ;				$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"		& "$errorCode = " & theErrorCode & " ;¶"		& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"		& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;			"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"		)		& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"		& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	] ;		True	)) ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"REQUEST PAYLOAD FROM SERVER" ]
#================================================================================
#Setup the params to pass to the server.
Set Variable [ $pull_params; Value:"$last_pull_utc = " & Quote ( Evaluate ( "EasySync_Payloads::ES_Last_Pull_UTC_Time" ) ) & " ;¶"& "$last_push_utc = " & Quote ( Evaluate ( "EasySync_Payloads::ES_Last_Push_UTC_Time" ) ) & " ;¶"& "$client_persistent_id = " & Quote ( Get ( PersistentID ) ) & " ;¶"& "$client_version = " & Quote ( $$client_version ) & " ;¶"& "$client_ip_address = " & Quote ( Get ( SystemIPAddress ) ) & " ;¶"& "$client_nic_address = " & Quote ( Get ( SystemNICAddress ) ) & " ;¶"& "$client_platform = " & Quote ( Get ( SystemPlatform ) ) & " ;¶"& "$client_system_version = " & Quote ( Get ( SystemVersion ) ) & " ;¶"& "$client_device = " & Quote ( Get ( Device ) ) & " ;¶"& "$client_network_protocol = " & Quote ( Get ( NetworkProtocol ) ) & " ;¶"& "$client_network_type = " & Quote ( Get ( NetworkType ) ) & " ;¶"& "$additional_settings = " & Quote ( $$additional_pull_info ) & " ;¶" ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Pull Parameters: " & $pull_params] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#Ask the server for a "pull" payload.
Perform Script [ “EasySync Client: Config: Pull: Prepare”; Parameter: $pull_params ]
If [ Get ( LastError ) ]
Exit Loop If [ Let ( [	theErrorCode = Get ( LastError ) ;	theErrorDescription = "FileMaker Error" ;	theErrorInfo = "section: " & $~script.section & ". Make sure the perform script step calls the correct script and the user has permission to run it." ;	theErrorType = "Fmp" ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign script result to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& Get ( ScriptResult )	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign subscript error info to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section & ". $error could not be evaluated.";	theErrorInfo = "after performing script: '" & $~script.subscript & "'. $error could not be evaluated." ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ $errorCode ]
Exit Loop If [ /* subscript error has been saved to local variable(s) */Let ( [	/* add the current script's name to a list of scripts that triggered this error */	~scriptStack = List (		Get ( ScriptName ) ;		If ( IsEmpty ( $scriptStack ) ;			/* start the stack off with the script's name that triggered the error */			$ScriptName ;			$scriptStack		)	) ;	/* append this data to the error */	$error =		$error		& "$scriptStack = " & Quote ( ~scriptStack ) & " ;¶"] ;	True) ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"GET PAYLOAD SEGMENTS" ]
#================================================================================
#If the payload needs to be pulled in segments...
Set Variable [ $payload; Value:"" ]
Set Variable [ $i; Value:1 ]
Loop
Set Variable [ $start_pos; Value:( ( $i - 1 ) * $$max_pull_segment_size ) + 1 ]
Perform Script [ “EasySync Client: Config: Pull: Get Segment”; Parameter: "$payload_uuid = " & Quote ( $payload_uuid ) & " ;¶"& "$start_pos = " & GetAsNumber ( $start_pos ) & " ;¶"& "$segment_size = " & GetAsNumber ( $$max_pull_segment_size ) & " ;¶" ]
If [ IsEmpty (  Get ( ScriptResult ) ) ]
# TODO: determine what error code to use here(may want to revise the server's ping script before I do this)
Exit Loop If [ Let ( [	theErrorCode = -1 ;	theErrorDescription = "Pull Error" ;	theErrorInfo = "Server did not return payload segment" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Segment Received (" & $i & ")"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$segment = " & Quote ( Get ( ScriptResult ) ) & " ;¶") ]
End If
Set Variable [ $payload; Value:$payload & Get ( ScriptResult ) ]
Exit Loop If [ Right ( $payload ; 10 ) = "</payload>" ]
Set Variable [ $i; Value:$i + 1 ]
End Loop
Exit Loop If [ /** * An error occurred in the above loop * * assign error info to local variables * then evaluate the errorCode as a Boolean *  */GetAsBoolean ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; $errorCode )") ) ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Payload Received"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$payload = " & Quote ( $payload ) & " ;¶") ]
End If
#
#
#
#Close the connection to the hosted database. (We don't need to hold the connection while processing.)
Perform Script [ “EasySync Client: Private: Close Server File” ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"VALIDATE PAYLOAD" ]
#================================================================================
Perform Script [ “EasySync Client: Config: Show Message”; Parameter: "Examining payload received from server..." ]
#
#Is the payload well-formed?
If [ PatternCount ( $payload ; "<payload>" ) ≠ 1or PatternCount ( $payload ; "</payload>" ) ≠ 1or PatternCount ( $payload ; "<settings>" ) ≠ 1or PatternCount ( $payload ; "</settings>" ) ≠ 1or PatternCount ( $payload ; "<tables>" ) ≠ 1or PatternCount ( $payload ; "</tables>" ) ≠ 1or PatternCount ( $payload ; "<records>" ) ≠ 1or PatternCount ( $payload ; "</records>" ) ≠ 1 ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 2 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 2 ;	~message = "Pull Error: payload received from the server was malformed."] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
# TODO: determine what error code to use here(may want to revise the server's ping script before I do this)
Exit Loop If [ Let ( [	theErrorCode = -1 ;	theErrorDescription = "Pull Error" ;	theErrorInfo = "The payload received from the server was malformed." ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"EXTRACT HEADER FROM PAYLOAD" ]
#================================================================================
#Get the payload settings.
Set Variable [ $settings; Value:Let ( [beginning = Position ( $payload ; "<settings>¶" ; 1 ; 1 ) + 11;end = Position ( $payload ; "¶</settings>" ; 1 ; 1 );settings = Middle ( $payload ; beginning ; end - beginning );settings = Trim ( settings )];settings) ]
Set Variable [ $field_delimiter; Value:GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 1 ) ]
Set Variable [ $record_delimiter; Value:GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 2 ) ]
Set Variable [ $sync_method; Value:GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 3 ) ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Payload Settings: " & $settings] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"METHOD: REPLACE" ]
#================================================================================
#If the sync method is "Replace"...
If [ $sync_method = "Replace" ]
Perform Script [ “EasySync Client: Config: Show Message”; Parameter: "Wiping local data..." ]
#
Perform Script [ “EasySync Client: API: Wipe” ]
If [ Get ( LastError ) ]
Exit Loop If [ Let ( [	theErrorCode = Get ( LastError ) ;	theErrorDescription = "FileMaker Error" ;	theErrorInfo = "section: " & $~script.section & ". Make sure the perform script step calls the correct script and the user has permission to run it." ;	theErrorType = "Fmp" ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign script result to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& Get ( ScriptResult )	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign subscript error info to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section & ". $error could not be evaluated.";	theErrorInfo = "after performing script: '" & $~script.subscript & "'. $error could not be evaluated." ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ $errorCode ]
Exit Loop If [ /* subscript error has been saved to local variable(s) */Let ( [	/* add the current script's name to a list of scripts that triggered this error */	~scriptStack = List (		Get ( ScriptName ) ;		If ( IsEmpty ( $scriptStack ) ;			/* start the stack off with the script's name that triggered the error */			$ScriptName ;			$scriptStack		)	) ;	/* append this data to the error */	$error =		$error		& "$scriptStack = " & Quote ( ~scriptStack ) & " ;¶"] ;	True) ]
End If
#
Perform Script [ “EasySync Client: API: Reset” ]
If [ Get ( LastError ) ]
Exit Loop If [ Let ( [	theErrorCode = Get ( LastError ) ;	theErrorDescription = "FileMaker Error" ;	theErrorInfo = "section: " & $~script.section & ". Make sure the perform script step calls the correct script and the user has permission to run it." ;	theErrorType = "Fmp" ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign script result to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& Get ( ScriptResult )	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign subscript error info to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section & ". $error could not be evaluated.";	theErrorInfo = "after performing script: '" & $~script.subscript & "'. $error could not be evaluated." ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ $errorCode ]
Exit Loop If [ /* subscript error has been saved to local variable(s) */Let ( [	/* add the current script's name to a list of scripts that triggered this error */	~scriptStack = List (		Get ( ScriptName ) ;		If ( IsEmpty ( $scriptStack ) ;			/* start the stack off with the script's name that triggered the error */			$ScriptName ;			$scriptStack		)	) ;	/* append this data to the error */	$error =		$error		& "$scriptStack = " & Quote ( ~scriptStack ) & " ;¶"] ;	True) ]
End If
#
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"SAVE PAYLOAD" ]
#================================================================================
Perform Script [ “EasySync Client: Config: Show Message”; Parameter: "Saving payload..." ]
#
#Save the payload.
#Note: We wait to save the payload until this point. Otherwise, a "wipe" would have deleted the saved payload.
Freeze Window
New Record/Request
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
Set Field By Name [ "EasySync_Payloads::Payload"; $payload ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Payload"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$payload = " & Quote ( $payload ) & " ;¶") ]
End If
Set Field By Name [ "EasySync_Payloads::Payload_Type"; "Pull Payload" ]
Commit Records/Requests[ No dialog ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"EXTRACT TABLE AND FIELD INFO FROM PAYLOAD" ]
#================================================================================
Perform Script [ “EasySync Client: Config: Show Message”; Parameter: "Processing payload..." ]
#
#Get the table info.
Set Variable [ $tables; Value:Let ( [beginning = Position ( $payload ; "<tables>¶" ; 1 ; 1 ) + 9;end = Position ( $payload ; "¶</tables>" ; 1 ; 1 );tables = Middle ( $payload ; beginning ; end - beginning );tables = Trim ( tables );tables = Substitute ( tables ; "<table>" ; "" );tables = Substitute ( tables ; "</table>" ; "" )];tables) ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Payload Tables: " & $tables] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#Create field name value lists for each table.
Set Variable [ $i; Value:1 ]
Loop
Set Variable [ $table; Value:Substitute ( GetValue ( $tables ; $i ); "</field>"; ¶ ) ]
Set Variable [ $table_name; Value:GetValue ( $table; 1 ) ]
Set Variable [ $dyn_code; Value:"Let ( [ $" & $table_name & " = $table ]; 1 )" ]
Set Variable [ $dyn_code; Value:Evaluate ( $dyn_code ) ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Created Field Value List for Table: " & $table_name		& ¶ & Evaluate ( "$" & $table_name )] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
Set Variable [ $i; Value:$i + 1 ]
Exit Loop If [ $i > ValueCount ( $tables ) ]
End Loop
#
#Get the # of records in the payload.
Set Variable [ $record_count; Value:PatternCount ( $payload; $record_delimiter ) - 1 ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"PROCESS PAYLOAD" ]
#================================================================================
#If there are no records to sync...
If [ $record_count = 0 ]
Set Variable [ $nothingToPull; Value:True ]
Else
Perform Script [ “EasySync Client: Config: Show Message”; Parameter: "Processing " & $record_count & " records received from server..." ]
#
#Loop over the records.
Set Variable [ $i; Value:1  /* initialize variable */ ]
Set Variable [ $previous_start; Value:0  /* initialize variable */ ]
Loop
#
#Refresh sync status occasionally...
If [ Evaluate ( $$pull_progress_indicator_logic ) ]
Perform Script [ “EasySync Client: Config: Show Message”; Parameter: "Processing record " & $i & " of " & $record_count & "..." ]
End If
#
#Get the record, formatted as a return-delimited value list.
Set Variable [ $record; Value:Let ( [	// Note: The "+1" in the "beginning calc" is to account for the default carriage return imposed by ExectueSQL.	beginning = If ( $previous_start > 0 ;		Position ( $payload ; $record_delimiter ; $previous_start ; 1 ) + Length ( $record_delimiter ) + 1 ;		Position ( $payload; "<records>¶"; 1; 1 ) + 10	) ;	end = Position ( $payload ; $record_delimiter ; 1 ; $i + 1 ) ;	$previous_start = end ;	record = Middle ( $payload ; beginning ; end - beginning ) ;	// Encode CRLFs that might be found in Base64-encoded container data.	// This makes it easier to treat the fields as a return-delimited value list.	record = Substitute ( record ; Char ( 13 ) & Char ( 10 ) ; "[[CRLF]]" ) ;	// Encode any remaining newline characters.	record = Substitute ( record ; ¶ ; "[[BR]]" ) ;	record = Substitute ( record ; $field_delimiter ; ¶ )] ;	record) ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Payload Record " & $i] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$record = " & Quote ( $record ) & " ;¶") ]
End If
#
#Get the name of the table that is associated with this record.
Set Variable [ $table_name; Value:GetValue ( $record ; 1 ) ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Table Name for Payload Record " & $i & ": " & $table_name] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#Get the names of the fields that are associated with this record.
Set Variable [ $field_names; Value:Evaluate ( "$" & $table_name ) ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Field Names for Payload Record " & $i & ": " & $field_names] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#Get the ES_Record_UUID value of this record.
Set Variable [ $ES_Record_UUID; Value:// Note: This is based in VERY large part on Kevin Frank's "ValuePosition ( theList ; theValue )" function.// See: http://filemakerhacks.com/2011/06/12/valueposition-the-function-filemaker-forgot/// Thanks Kevin!Let( [theList = $field_names;theValue = "ES_Record_UUID[1]";pLp = ¶ & theList & ¶ ;pVp = ¶ & theValue & ¶ ;thePos = Position ( pLp ; pVp ; 1 ; 1 ) ;theSegment = Left ( pLp ; thePos ) ;theValPos = PatternCount ( theSegment ; ¶ )] ;GetValue ( $record ; theValPos )) ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "ES_Record_UUID for Payload Record " & $i & ": " & $ES_Record_UUID] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#Go to the correct row in the Payload Details portal.
Go to Portal Row [ $i ][ Select; No dialog ]
#
#Set the Record UUID for the Payload Details record.
Set Field By Name [ "EasySync_Payload_Details::ES_Child_Record_UUID"; $ES_Record_UUID ]
Set Field By Name [ "EasySync_Payload_Details::Payload_Type"; "Payload Detail" ]
#
#Loop over the field names.
#We skip the first value because it is really the table name that the record is from.
Set Variable [ $f; Value:2 ]
Loop
#
#Get the name of the field.
Set Variable [ $field_name; Value:GetValue ( $field_names; $f ) ]
#
#If this is not a container...
If [ Left ( $field_name ; 4 ) ≠ "B64_" ]
Set Variable [ $field_value; Value:Let ([value = GetValue ( $record ; $f );value = Substitute ( value ; "[[BR]]" ; ¶ )];value) ]
Else
Set Variable [ $field_name; Value:Right ( $field_name; Length ( $field_name ) - 4 ) ]
Set Variable [ $field_value; Value:GetValue ( $record ; $f ) ]
If [ not IsEmpty ( $field_value ) ]
Set Variable [ $field_value; Value:Let ([value = $field_value;value = Substitute ( value ; "</b64>"; "" );fileNameWithExtension = GetValue ( Substitute ( value ; "<b64>"; "¶" ); 1 );encoded = Substitute ( value; fileNameWithExtension & "<b64>"; "" );encoded = Substitute ( encoded ; "[[CRLF]]" ; Char ( 13 ) & Char ( 10 ) );decoded = Base64Decode ( encoded; fileNameWithExtension )];decoded) ]
End If
End If
#
#If the value of this field has changed...
If [ not Exact ( $field_value ; Evaluate ( $table_name & "::" & $field_name ) )// v1.2: $field_value ≠ Evaluate ( $table_name & "::" & $field_name ) ]
#
#Update the field.
Set Field By Name [ $table_name & "::" & $field_name; $field_value ]
#
#If an error has occurred...
#And if it is not a 102 ("Field is missing") error...
#Note: We ignore 102s because they are indicative of a field in the hosted DB that is simply not mirrored in the remote DB.
Set Variable [ $LastError; Value:Get ( LastError ) ]
If [ $LastError ≠ 0 and $LastError ≠ 102 ]
Exit Loop If [ Let ( [	theErrorCode = $LastError ;	theErrorDescription = "(see FileMaker documentation for the description of this error code)" ;	theErrorInfo = "Pull Error: an error occurred when attempting to process the pulled payload, on " & $table_name & "::" & $field_name ;	theErrorType = "Fmp" ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
#
End If
#
Set Variable [ $f; Value:$f + 1 ]
Exit Loop If [ $f > ValueCount ( $field_names ) ]
#
End Loop
#End loop that sets the fields.
Exit Loop If [ /** * An error occurred in the above loop * * assign error info to local variables * then evaluate the errorCode as a Boolean *  */GetAsBoolean ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; $errorCode )") ) ]
#
#
Set Variable [ $i; Value:$i + 1 ]
Exit Loop If [ $i > $record_count ]
#
#End loop over the records.
End Loop
Exit Loop If [ /** * An error occurred in the above loop * * assign error info to local variables * then evaluate the errorCode as a Boolean *  */GetAsBoolean ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; $errorCode )") ) ]
End If
#
#
#
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"UPDATE LAST PULL TIME" ]
#================================================================================
Set Field By Name [ "EasySync_Payloads::ES_Last_Pull_UTC_Time"; $~script.start ]
Exit Loop If [ If ( Get ( LastError ) ;	Let ( [		theErrorCode = Get ( LastError ) ;		theErrorDescription = "(see FileMaker documentation for the description of this error code)" ;		theErrorInfo = "" ;		theErrorType = "Fmp" ;				$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"		& "$errorCode = " & theErrorCode & " ;¶"		& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"		& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;			"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"		)		& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"		& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	] ;		True	)) ]
#
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = $~script.section & " end"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶") ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"COMMIT RECORD" ]
#================================================================================
#Try to commit the transaction.
Commit Records/Requests[ No dialog ]
#
#If an error has occurred...
Set Variable [ $LastError; Value:Get ( LastError ) ]
If [ $LastError ≠ 0 ]
#Rollback the changes.
Revert Record/Request[ No dialog ]
If [ $Delete_Payloads = "All" ]
Delete Record/Request[ No dialog ]
End If
Exit Loop If [ Let ( [	theErrorCode = $LastError ;	theErrorDescription = "(see FileMaker documentation for the description of this error code)" ;	theErrorInfo = "Pull Error: when attempting to commit the data in the pulled payload." ;	theErrorType = "Fmp" ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"DELETE PAYLOAD" ]
#================================================================================
#Delete the payload.
If [ $$delete_pull_payloads = "All" or $$delete_pull_payloads = "Successful" ]
Delete Record/Request[ No dialog ]
End If
#
#
#
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# end single-pass loop for error trapping
Exit Loop If [ True ]
End Loop
#
#
#
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"HANDLE ERROR" ]
#================================================================================
Set Variable [ $~script.runtime; Value:( Get ( CurrentTimeUTCMilliseconds ) - $~script.start ) / 1000 ]
If [ /** * assign error info to local variables * then evaluate the errorCode as a Boolean *  */GetAsBoolean ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; $errorCode )") ) ]
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 2 ;	~message = "exit script with error"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$error = " & Quote ( $error ) & " ;¶"	& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶") ]
End If
Else
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "exit script without error"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶") ]
End If
If [ $$show_successful_pulls ]
Show Custom Dialog [ Title: "Pull Success"; Message: "Remote data has been successfully pulled from the server. (Elapsed Time: " & GetAsTime ( $~script.runtime ) & ")"; Default Button: “OK”, Commit: “Yes” ]
End If
End If
#
#
#
Set Variable [ $!; Value:""/** * This is a step that will not return an error. * * It's used to clear any errors reported by Get ( LastError ), so a calling script can use * Get ( LastError ) to test if an error occurred with the Perform Script step. * */ ]
Exit Script [ Result: "$error = " & Quote ( $error ) & " ;¶"& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶"& "$nothingToPull = " & GetAsBoolean( $nothingToPull ) & " ;¶" ]
#


---
Script:
  includeInMenu: 'False'
  runFullAccess: 'False'
  id: '18'
  name: 'EasySync Client: Private: Pull'
  StepList:
    Step:
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#################################################################################'
      Text: '################################################################################'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PURPOSE:'
      Text: ' PURPOSE:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    Create and pull a sync payload from the server.'
      Text: '    Create and pull a sync payload from the server.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# CONTEXT: EasySync_Payloads'
      Text: ' CONTEXT: EasySync_Payloads'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PARAMETERS: none'
      Text: ' PARAMETERS: none'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# RETURNS:'
      Text: ' RETURNS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $error | a dictionary containing error data'
      Text: '    $error | a dictionary containing error data'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $runtime | number of seconds this script was running (with millisecond
        precision)'
      Text: '    $runtime | number of seconds this script was running (with millisecond
        precision)'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $nothingToPull | boolean | True if no errors were encounted
        and there were no changes to pull from to the server.'
      Text: '    $nothingToPull | boolean | True if no errors were encounted and there
        were no changes to pull from to the server.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# VARIABLES:'
      Text: ' VARIABLES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# DEPENDENCIES:'
      Text: ' DEPENDENCIES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# NOTES:'
      Text: ' NOTES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# REVISIONS:'
      Text: ' REVISIONS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: "#    \n2014-04-16\t\t\n\tTim Dietrich (timdietrich@me.com)\n\tInitial
        version.\n\n2014-04-17\t\t\n\tTim Dietrich (timdietrich@me.com)\n\tNow pushing
        the last push / pull timestamps in a SQL-friendly format.\n\tWe're doing this
        client-side to avoid problems that occur when the server's\n\ttimestamp format
        differs from that of the client.\n\n2014-04-18\n\tTim Dietrich (timdietrich@me.com)\n\tAdjusting
        ES_Timestamp values based on the timezone offset.\n\tOther minor changes to
        improve performance.\n\n2014-04-19\n\tTim Dietrich (timdietrich@me.com)\n\tReflects
        shift to UTC timestamps.\n\n2014-04-21\n     Tim Dietrich (timdietrich@me.com)\n
        \    We're now only setting fields that have actually changed.\n\n2014-04-22\n\tTim
        Dietrich (timdietrich@me.com)\n\tNow searching for the closing \"</records>\"
        tag using -1 as the start position\n\tso that we're searching for the tag
        from the end of the payload.\n\tThanks to Daniel Smith (@FMweetbicks) for
        the suggestion.\n\n2014-04-23\n\tTim Dietrich (timdietrich@me.com)\n\t\"Get
        ( SystemIPAddress )\" is now comma-delimited when passed as a param.\n\tThis
        resolves an issue that comes up if the client has multiple IPs.\n\n2014-04-24\n\tTim
        Dietrich (timdietrich@me.com)\n\tAdded support for repeating fields.\n\n2014-04-28\n\tTim
        Dietrich (timdietrich@me.com)\n\tAdded a variable that allows auto-enter calcs
        for \"ES_UTC_Time\" and \"ES_Device_ID\" to be\n\toverwritten during the sync
        process.\n\n2014-05-08\n\tTim Dietrich (timdietrich@me.com)\n\tOptimized code
        that gets the next record.\n\n2014-05-15\n\tTim Dietrich (timdietrich@me.com)\n\tEliminated
        the need to copy the records portion of the payload to a distinct $records
        variable.\n\tThis should help to reduce the memory needed to process the payload,
        and should also slightly\n\tincrease performance.\n\tAlso, we're now only
        saving the actual payload to the record if debugging of the pull process\n\tis
        enabled. Otherwise, there is no need to write the payload to disk.\n"
      Text: "    \n2014-04-16\t\t\n\tTim Dietrich (timdietrich@me.com)\n\tInitial
        version.\n\n2014-04-17\t\t\n\tTim Dietrich (timdietrich@me.com)\n\tNow pushing
        the last push / pull timestamps in a SQL-friendly format.\n\tWe're doing this
        client-side to avoid problems that occur when the server's\n\ttimestamp format
        differs from that of the client.\n\n2014-04-18\n\tTim Dietrich (timdietrich@me.com)\n\tAdjusting
        ES_Timestamp values based on the timezone offset.\n\tOther minor changes to
        improve performance.\n\n2014-04-19\n\tTim Dietrich (timdietrich@me.com)\n\tReflects
        shift to UTC timestamps.\n\n2014-04-21\n     Tim Dietrich (timdietrich@me.com)\n
        \    We're now only setting fields that have actually changed.\n\n2014-04-22\n\tTim
        Dietrich (timdietrich@me.com)\n\tNow searching for the closing \"</records>\"
        tag using -1 as the start position\n\tso that we're searching for the tag
        from the end of the payload.\n\tThanks to Daniel Smith (@FMweetbicks) for
        the suggestion.\n\n2014-04-23\n\tTim Dietrich (timdietrich@me.com)\n\t\"Get
        ( SystemIPAddress )\" is now comma-delimited when passed as a param.\n\tThis
        resolves an issue that comes up if the client has multiple IPs.\n\n2014-04-24\n\tTim
        Dietrich (timdietrich@me.com)\n\tAdded support for repeating fields.\n\n2014-04-28\n\tTim
        Dietrich (timdietrich@me.com)\n\tAdded a variable that allows auto-enter calcs
        for \"ES_UTC_Time\" and \"ES_Device_ID\" to be\n\toverwritten during the sync
        process.\n\n2014-05-08\n\tTim Dietrich (timdietrich@me.com)\n\tOptimized code
        that gets the next record.\n\n2014-05-15\n\tTim Dietrich (timdietrich@me.com)\n\tEliminated
        the need to copy the records portion of the payload to a distinct $records
        variable.\n\tThis should help to reduce the memory needed to process the payload,
        and should also slightly\n\tincrease performance.\n\tAlso, we're now only
        saving the actual payload to the record if debugging of the pull process\n\tis
        enabled. Otherwise, there is no need to write the payload to disk.\n"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#################################################################################'
      Text: '################################################################################'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.start; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.start
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: 'Set Variable [ $~script.errorType; Value:"Module: EasySync Client"
        ]'
      Value:
        Calculation: '"Module: EasySync Client"'
        DisplayCalculation:
          Chunk: '"Module: EasySync Client"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.errorType
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 5 ;\n\t~message = \"start script\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 5 ;\n\t~message = \"start script\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 5 ;\n\t~message = \"start script\"\n] ;\n\t\"$LogLevel
          = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: Config: Show Message”; Parameter:
        "Pulling Data from Server..." ]'
      Calculation: '"Pulling Data from Server..."'
      DisplayCalculation:
        Chunk: '"Pulling Data from Server..."'
      Script:
        id: '67'
        name: 'EasySync Client: Config: Show Message'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# single-pass loop for error trapping'
      Text: ' single-pass loop for error trapping'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
      Text: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"SET VARIABLES" ]
      Value:
        Calculation: '"SET VARIABLES"'
        DisplayCalculation:
          Chunk: '"SET VARIABLES"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $script_override; Value:True\n\n/**\n * Used to override
        auto-enter calculations.\n * \n * Allow auto-enter calcs for \"ES_UTC_Time\"
        and \"ES_Device_ID\" to be overwritten during the sync process.\n * \n */
        ]"
      Value:
        Calculation: "True\n\n/**\n * Used to override auto-enter calculations.\n
          * \n * Allow auto-enter calcs for \"ES_UTC_Time\" and \"ES_Device_ID\" to
          be overwritten during the sync process.\n * \n */"
        DisplayCalculation:
          Chunk:
          - 'True'
          - "\n\n/**\n * Used to override auto-enter calculations.\n * \n * Allow
            auto-enter calcs for \"ES_UTC_Time\" and \"ES_Device_ID\" to be overwritten
            during the sync process.\n * \n */"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $script_override
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"MAKE SURE LAST PULL AND PUSH
        TIME IS NOT EMPTY" ]
      Value:
        Calculation: '"MAKE SURE LAST PULL AND PUSH TIME IS NOT EMPTY"'
        DisplayCalculation:
          Chunk: '"MAKE SURE LAST PULL AND PUSH TIME IS NOT EMPTY"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ IsEmpty ( Evaluate ( "EasySync_Payloads::ES_Last_Pull_UTC_Time"
        ) ) ]
      Calculation: IsEmpty ( Evaluate ( "EasySync_Payloads::ES_Last_Pull_UTC_Time"
        ) )
      DisplayCalculation:
        Chunk:
        - IsEmpty
        - ' ( '
        - Evaluate
        - ' ( "EasySync_Payloads::ES_Last_Pull_UTC_Time" ) )'
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ "EasySync_Payloads::ES_Last_Pull_UTC_Time"; 0
        ]
      Result:
        Calculation: '0'
        DisplayCalculation:
          Chunk: '0'
      TargetName:
        Calculation: '"EasySync_Payloads::ES_Last_Pull_UTC_Time"'
        DisplayCalculation:
          Chunk: '"EasySync_Payloads::ES_Last_Pull_UTC_Time"'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode
        = Get ( LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation
        for the description of this error code)\" ;\n\t\ttheErrorInfo = \"after set
        field: EasySync_Payloads::ES_Last_Pull_UTC_Time\" ;\n\t\ttheErrorType = \"Fmp\"
        ;\n\t\t\n\t\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t\t& \"$errorDescription = \"
        & Quote ( theErrorDescription ) & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & Quote ( Get ( ScriptName )
        ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & Quote ( $~script.section )
        & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n) ]"
      Calculation: "If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode = Get (
        LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for
        the description of this error code)\" ;\n\t\ttheErrorInfo = \"after set field:
        EasySync_Payloads::ES_Last_Pull_UTC_Time\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error
        = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode
        = \" & theErrorCode & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n)"
      DisplayCalculation:
        Chunk:
        - If
        - ' ( '
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t"
        - Let
        - " ( [\n\t\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for the
          description of this error code)\" ;\n\t\ttheErrorInfo = \"after set field:
          EasySync_Payloads::ES_Last_Pull_UTC_Time\" ;\n\t\ttheErrorType = \"Fmp\"
          ;\n\t\t\n\t\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\t"
        - 'True'
        - "\n\t)\n)"
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ IsEmpty ( Evaluate ( "EasySync_Payloads::ES_Last_Push_UTC_Time"
        ) ) ]
      Calculation: IsEmpty ( Evaluate ( "EasySync_Payloads::ES_Last_Push_UTC_Time"
        ) )
      DisplayCalculation:
        Chunk:
        - IsEmpty
        - ' ( '
        - Evaluate
        - ' ( "EasySync_Payloads::ES_Last_Push_UTC_Time" ) )'
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ "EasySync_Payloads::ES_Last_Push_UTC_Time"; 0
        ]
      Result:
        Calculation: '0'
        DisplayCalculation:
          Chunk: '0'
      TargetName:
        Calculation: '"EasySync_Payloads::ES_Last_Push_UTC_Time"'
        DisplayCalculation:
          Chunk: '"EasySync_Payloads::ES_Last_Push_UTC_Time"'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode
        = Get ( LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation
        for the description of this error code)\" ;\n\t\ttheErrorInfo = \"after set
        field: EasySync_Payloads::ES_Last_Push_UTC_Time\" ;\n\t\ttheErrorType = \"Fmp\"
        ;\n\t\t\n\t\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t\t& \"$errorDescription = \"
        & Quote ( theErrorDescription ) & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & Quote ( Get ( ScriptName )
        ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & Quote ( $~script.section )
        & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n) ]"
      Calculation: "If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode = Get (
        LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for
        the description of this error code)\" ;\n\t\ttheErrorInfo = \"after set field:
        EasySync_Payloads::ES_Last_Push_UTC_Time\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error
        = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode
        = \" & theErrorCode & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n)"
      DisplayCalculation:
        Chunk:
        - If
        - ' ( '
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t"
        - Let
        - " ( [\n\t\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for the
          description of this error code)\" ;\n\t\ttheErrorInfo = \"after set field:
          EasySync_Payloads::ES_Last_Push_UTC_Time\" ;\n\t\ttheErrorType = \"Fmp\"
          ;\n\t\t\n\t\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\t"
        - 'True'
        - "\n\t)\n)"
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"REQUEST PAYLOAD FROM SERVER"
        ]
      Value:
        Calculation: '"REQUEST PAYLOAD FROM SERVER"'
        DisplayCalculation:
          Chunk: '"REQUEST PAYLOAD FROM SERVER"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Setup the params to pass to the server.'
      Text: Setup the params to pass to the server.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $pull_params; Value:"$last_pull_utc = " & Quote ( Evaluate ( "EasySync_Payloads::ES_Last_Pull_UTC_Time" ) ) & " ;¶"
        & "$last_push_utc = " & Quote ( Evaluate ( "EasySync_Payloads::ES_Last_Push_UTC_Time" ) ) & " ;¶"
        & "$client_persistent_id = " & Quote ( Get ( PersistentID ) ) & " ;¶"
        & "$client_version = " & Quote ( $$client_version ) & " ;¶"
        & "$client_ip_address = " & Quote ( Get ( SystemIPAddress ) ) & " ;¶"
        & "$client_nic_address = " & Quote ( Get ( SystemNICAddress ) ) & " ;¶"
        & "$client_platform = " & Quote ( Get ( SystemPlatform ) ) & " ;¶"
        & "$client_system_version = " & Quote ( Get ( SystemVersion ) ) & " ;¶"
        & "$client_device = " & Quote ( Get ( Device ) ) & " ;¶"
        & "$client_network_protocol = " & Quote ( Get ( NetworkProtocol ) ) & " ;¶"
        & "$client_network_type = " & Quote ( Get ( NetworkType ) ) & " ;¶"
        & "$additional_settings = " & Quote ( $$additional_pull_info ) & " ;¶" ]
      Value:
        Calculation: |-
          "$last_pull_utc = " & Quote ( Evaluate ( "EasySync_Payloads::ES_Last_Pull_UTC_Time" ) ) & " ;¶"
          & "$last_push_utc = " & Quote ( Evaluate ( "EasySync_Payloads::ES_Last_Push_UTC_Time" ) ) & " ;¶"
          & "$client_persistent_id = " & Quote ( Get ( PersistentID ) ) & " ;¶"
          & "$client_version = " & Quote ( $$client_version ) & " ;¶"
          & "$client_ip_address = " & Quote ( Get ( SystemIPAddress ) ) & " ;¶"
          & "$client_nic_address = " & Quote ( Get ( SystemNICAddress ) ) & " ;¶"
          & "$client_platform = " & Quote ( Get ( SystemPlatform ) ) & " ;¶"
          & "$client_system_version = " & Quote ( Get ( SystemVersion ) ) & " ;¶"
          & "$client_device = " & Quote ( Get ( Device ) ) & " ;¶"
          & "$client_network_protocol = " & Quote ( Get ( NetworkProtocol ) ) & " ;¶"
          & "$client_network_type = " & Quote ( Get ( NetworkType ) ) & " ;¶"
          & "$additional_settings = " & Quote ( $$additional_pull_info ) & " ;¶"
        DisplayCalculation:
          Chunk:
          - '"$last_pull_utc = " & '
          - Quote
          - ' ( '
          - Evaluate
          - " ( \"EasySync_Payloads::ES_Last_Pull_UTC_Time\" ) ) & \" ;¶\"\n& \"$last_push_utc
            = \" & "
          - Quote
          - ' ( '
          - Evaluate
          - " ( \"EasySync_Payloads::ES_Last_Push_UTC_Time\" ) ) & \" ;¶\"\n& \"$client_persistent_id
            = \" & "
          - Quote
          - ' ( '
          - Get
          - ' ( '
          - PersistentID
          - " ) ) & \" ;¶\"\n& \"$client_version = \" & "
          - Quote
          - " ( $$client_version ) & \" ;¶\"\n& \"$client_ip_address = \" & "
          - Quote
          - ' ( '
          - Get
          - ' ( '
          - SystemIPAddress
          - " ) ) & \" ;¶\"\n& \"$client_nic_address = \" & "
          - Quote
          - ' ( '
          - Get
          - ' ( '
          - SystemNICAddress
          - " ) ) & \" ;¶\"\n& \"$client_platform = \" & "
          - Quote
          - ' ( '
          - Get
          - ' ( '
          - SystemPlatform
          - " ) ) & \" ;¶\"\n& \"$client_system_version = \" & "
          - Quote
          - ' ( '
          - Get
          - ' ( '
          - SystemVersion
          - " ) ) & \" ;¶\"\n& \"$client_device = \" & "
          - Quote
          - ' ( '
          - Get
          - ' ( '
          - Device
          - " ) ) & \" ;¶\"\n& \"$client_network_protocol = \" & "
          - Quote
          - ' ( '
          - Get
          - ' ( '
          - NetworkProtocol
          - " ) ) & \" ;¶\"\n& \"$client_network_type = \" & "
          - Quote
          - ' ( '
          - Get
          - ' ( '
          - NetworkType
          - " ) ) & \" ;¶\"\n& \"$additional_settings = \" & "
          - Quote
          - ' ( $$additional_pull_info ) & " ;¶"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $pull_params
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Pull Parameters: \" & $pull_params\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Pull Parameters: \"
        & $pull_params\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Pull Parameters: \" & $pull_params\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Ask the server for a "pull" payload.'
      Text: Ask the server for a "pull" payload.
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: Config: Pull: Prepare”; Parameter:
        $pull_params ]'
      Calculation: $pull_params
      DisplayCalculation:
        Chunk: $pull_params
      Script:
        id: '56'
        name: 'EasySync Client: Config: Pull: Prepare'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( LastError ) ]
      Calculation: Get ( LastError )
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - LastError
        - ' )'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\ttheErrorDescription = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section:
          \" & $~script.section & \". Make sure the perform script step calls the
          correct script and the user has permission to run it.\" ;\n\ttheErrorType
          = \"Fmp\" ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) ) ]"
      Calculation: "/* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign script result to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& "
        - Get
        - ' ( '
        - ScriptResult
        - " )\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n) )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType = \"
        & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode &
        \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) & \"
        ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" &
        Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$~script.section = \" & Quote
        ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) ) ]"
      Calculation: "/* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign subscript error info to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n)
          )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing
        script: '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)
        ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \".
        $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing script:
        '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \". $error could
          not be evaluated.\";\n\ttheErrorInfo = \"after performing script: '\" &
          $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $errorCode ]
      Calculation: $errorCode
      DisplayCalculation:
        Chunk: $errorCode
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /* subscript error has been saved to local variable(s)
        */\n\nLet ( [\n\t/* add the current script's name to a list of scripts that
        triggered this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf
        ( IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "/* subscript error has been saved to local variable(s) */\n\nLet
        ( [\n\t/* add the current script's name to a list of scripts that triggered
        this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf (
        IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - |+
          /* subscript error has been saved to local variable(s) */

        - Let
        - " ( [\n\t/* add the current script's name to a list of scripts that triggered
          this error */\n\t~scriptStack = "
        - List
        - " (\n\t\t"
        - Get
        - ' ( '
        - ScriptName
        - " ) ;\n\t\t"
        - If
        - ' ( '
        - IsEmpty
        - " ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's name
          that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
          ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
          \"$scriptStack = \" & "
        - Quote
        - " ( ~scriptStack ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"GET PAYLOAD SEGMENTS" ]
      Value:
        Calculation: '"GET PAYLOAD SEGMENTS"'
        DisplayCalculation:
          Chunk: '"GET PAYLOAD SEGMENTS"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If the payload needs to be pulled in segments...'
      Text: If the payload needs to be pulled in segments...
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $payload; Value:"" ]
      Value:
        Calculation: '""'
        DisplayCalculation:
          Chunk: '""'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $payload
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $start_pos; Value:( ( $i - 1 ) * $$max_pull_segment_size
        ) + 1 ]
      Value:
        Calculation: ( ( $i - 1 ) * $$max_pull_segment_size ) + 1
        DisplayCalculation:
          Chunk: ( ( $i - 1 ) * $$max_pull_segment_size ) + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $start_pos
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: |-
        Perform Script [ “EasySync Client: Config: Pull: Get Segment”; Parameter: "$payload_uuid = " & Quote ( $payload_uuid ) & " ;¶"
        & "$start_pos = " & GetAsNumber ( $start_pos ) & " ;¶"
        & "$segment_size = " & GetAsNumber ( $$max_pull_segment_size ) & " ;¶" ]
      Calculation: |-
        "$payload_uuid = " & Quote ( $payload_uuid ) & " ;¶"
        & "$start_pos = " & GetAsNumber ( $start_pos ) & " ;¶"
        & "$segment_size = " & GetAsNumber ( $$max_pull_segment_size ) & " ;¶"
      DisplayCalculation:
        Chunk:
        - '"$payload_uuid = " & '
        - Quote
        - " ( $payload_uuid ) & \" ;¶\"\n& \"$start_pos = \" & "
        - GetAsNumber
        - " ( $start_pos ) & \" ;¶\"\n& \"$segment_size = \" & "
        - GetAsNumber
        - ' ( $$max_pull_segment_size ) & " ;¶"'
      Script:
        id: '57'
        name: 'EasySync Client: Config: Pull: Get Segment'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ IsEmpty (  Get ( ScriptResult ) ) ]
      Calculation: IsEmpty (  Get ( ScriptResult ) )
      DisplayCalculation:
        Chunk:
        - IsEmpty
        - ' (  '
        - Get
        - ' ( '
        - ScriptResult
        - ' ) )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: |-
        # TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
      Text: |2-
         TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription
        = \"Pull Error\" ;\n\ttheErrorInfo = \"Server did not return payload segment\"
        ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType = \"
        & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode &
        \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) & \"
        ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Pull
        Error\" ;\n\ttheErrorInfo = \"Server did not return payload segment\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Pull Error\" ;\n\ttheErrorInfo
          = \"Server did not return payload segment\" ;\n\ttheErrorType = $~script.errorType
          ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Segment Received (\" & $i & \")\"\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$segment
        = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Segment Received (\"
        & $i & \")\"\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$segment
        = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Segment Received (\" & $i & \")\"\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$segment = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - |2-
           ) ) & " ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $payload; Value:$payload & Get ( ScriptResult ) ]
      Value:
        Calculation: $payload & Get ( ScriptResult )
        DisplayCalculation:
          Chunk:
          - '$payload & '
          - Get
          - ' ( '
          - ScriptResult
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $payload
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ Right ( $payload ; 10 ) = "</payload>" ]
      Calculation: Right ( $payload ; 10 ) = "</payload>"
      DisplayCalculation:
        Chunk:
        - Right
        - ' ( $payload ; 10 ) = "</payload>"'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:$i + 1 ]
      Value:
        Calculation: $i + 1
        DisplayCalculation:
          Chunk: $i + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /**\n * An error occurred in the above loop\n *\n
        * assign error info to local variables\n * then evaluate the errorCode as
        a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t&
        \"! = \\\"\\\" ] ; $errorCode )\"\n) ) ]"
      Calculation: "/**\n * An error occurred in the above loop\n *\n * assign error
        info to local variables\n * then evaluate the errorCode as a Boolean\n * \n
        */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\"
        ] ; $errorCode )\"\n) )"
      DisplayCalculation:
        Chunk:
        - "/**\n * An error occurred in the above loop\n *\n * assign error info to
          local variables\n * then evaluate the errorCode as a Boolean\n * \n */\n\n"
        - GetAsBoolean
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n)
          )"
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Received\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$payload = \" & Quote ( $payload ) & \"
        ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Received\"\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$payload
        = \" & Quote ( $payload ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Received\"\n] ;\n\t\"$LogLevel
          = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$payload = \" & "
        - Quote
        - |2-
           ( $payload ) & " ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Close the connection to the hosted database. (We don''t need to
        hold the connection while processing.)'
      Text: Close the connection to the hosted database. (We don't need to hold the
        connection while processing.)
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: Private: Close Server File” ]'
      Script:
        id: '89'
        name: 'EasySync Client: Private: Close Server File'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"VALIDATE PAYLOAD" ]
      Value:
        Calculation: '"VALIDATE PAYLOAD"'
        DisplayCalculation:
          Chunk: '"VALIDATE PAYLOAD"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: Config: Show Message”; Parameter:
        "Examining payload received from server..." ]'
      Calculation: '"Examining payload received from server..."'
      DisplayCalculation:
        Chunk: '"Examining payload received from server..."'
      Script:
        id: '67'
        name: 'EasySync Client: Config: Show Message'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Is the payload well-formed?'
      Text: Is the payload well-formed?
    - enable: 'True'
      id: '68'
      name: If
      StepText: |-
        If [ PatternCount ( $payload ; "<payload>" ) ≠ 1
        or PatternCount ( $payload ; "</payload>" ) ≠ 1
        or PatternCount ( $payload ; "<settings>" ) ≠ 1
        or PatternCount ( $payload ; "</settings>" ) ≠ 1
        or PatternCount ( $payload ; "<tables>" ) ≠ 1
        or PatternCount ( $payload ; "</tables>" ) ≠ 1
        or PatternCount ( $payload ; "<records>" ) ≠ 1
        or PatternCount ( $payload ; "</records>" ) ≠ 1 ]
      Calculation: |-
        PatternCount ( $payload ; "<payload>" ) ≠ 1
        or PatternCount ( $payload ; "</payload>" ) ≠ 1
        or PatternCount ( $payload ; "<settings>" ) ≠ 1
        or PatternCount ( $payload ; "</settings>" ) ≠ 1
        or PatternCount ( $payload ; "<tables>" ) ≠ 1
        or PatternCount ( $payload ; "</tables>" ) ≠ 1
        or PatternCount ( $payload ; "<records>" ) ≠ 1
        or PatternCount ( $payload ; "</records>" ) ≠ 1
      DisplayCalculation:
        Chunk:
        - PatternCount
        - |2
           ( $payload ; "<payload>" ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; "</payload>" ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; "<settings>" ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; "</settings>" ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; "<tables>" ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; "</tables>" ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; "<records>" ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - ' ( $payload ; "</records>" ) ≠ 1'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 2 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 2
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 2
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 2 ;\n\t~message = \"Pull Error: payload received from
        the server was malformed.\"\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
        \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \"
        & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote
        ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp (
        \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 )
        ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 2 ;\n\t~message = \"Pull Error: payload
        received from the server was malformed.\"\n] ;\n\t\"$LogLevel = \" & ~logLevel
        & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 2 ;\n\t~message = \"Pull Error: payload received from
          the server was malformed.\"\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
          \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: |-
        # TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
      Text: |2-
         TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription
        = \"Pull Error\" ;\n\ttheErrorInfo = \"The payload received from the server
        was malformed.\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Pull
        Error\" ;\n\ttheErrorInfo = \"The payload received from the server was malformed.\"
        ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType = \"
        & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode &
        \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) & \"
        ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Pull Error\" ;\n\ttheErrorInfo
          = \"The payload received from the server was malformed.\" ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"EXTRACT HEADER FROM PAYLOAD"
        ]
      Value:
        Calculation: '"EXTRACT HEADER FROM PAYLOAD"'
        DisplayCalculation:
          Chunk: '"EXTRACT HEADER FROM PAYLOAD"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the payload settings.'
      Text: Get the payload settings.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $settings; Value:Let ( \n[\nbeginning = Position (
        $payload ; \"<settings>¶\" ; 1 ; 1 ) + 11;\nend = Position ( $payload ; \"¶</settings>\"
        ; 1 ; 1 );\nsettings = Middle ( $payload ; beginning ; end - beginning );\nsettings
        = Trim ( settings )\n];\nsettings\n) ]"
      Value:
        Calculation: "Let ( \n[\nbeginning = Position ( $payload ; \"<settings>¶\"
          ; 1 ; 1 ) + 11;\nend = Position ( $payload ; \"¶</settings>\" ; 1 ; 1 );\nsettings
          = Middle ( $payload ; beginning ; end - beginning );\nsettings = Trim (
          settings )\n];\nsettings\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( \n[\nbeginning = "
          - Position
          - " ( $payload ; \"<settings>¶\" ; 1 ; 1 ) + 11;\nend = "
          - Position
          - " ( $payload ; \"¶</settings>\" ; 1 ; 1 );\nsettings = "
          - Middle
          - " ( $payload ; beginning ; end - beginning );\nsettings = "
          - Trim
          - |2-
             ( settings )
            ];
            settings
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $settings
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $field_delimiter; Value:GetValue ( Substitute ( $settings
        ; "</setting>" ; ¶ ) ; 1 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 1 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; "</setting>" ; ¶ ) ; 1 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_delimiter
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $record_delimiter; Value:GetValue ( Substitute ( $settings
        ; "</setting>" ; ¶ ) ; 2 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 2 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; "</setting>" ; ¶ ) ; 2 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $record_delimiter
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $sync_method; Value:GetValue ( Substitute ( $settings
        ; "</setting>" ; ¶ ) ; 3 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 3 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; "</setting>" ; ¶ ) ; 3 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $sync_method
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Settings: \" & $settings\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Settings: \"
        & $settings\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Settings: \" & $settings\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: 'Set Variable [ $~script.section; Value:"METHOD: REPLACE" ]'
      Value:
        Calculation: '"METHOD: REPLACE"'
        DisplayCalculation:
          Chunk: '"METHOD: REPLACE"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If the sync method is "Replace"...'
      Text: If the sync method is "Replace"...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $sync_method = "Replace" ]
      Calculation: $sync_method = "Replace"
      DisplayCalculation:
        Chunk: $sync_method = "Replace"
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: Config: Show Message”; Parameter:
        "Wiping local data..." ]'
      Calculation: '"Wiping local data..."'
      DisplayCalculation:
        Chunk: '"Wiping local data..."'
      Script:
        id: '67'
        name: 'EasySync Client: Config: Show Message'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: API: Wipe” ]'
      Script:
        id: '80'
        name: 'EasySync Client: API: Wipe'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( LastError ) ]
      Calculation: Get ( LastError )
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - LastError
        - ' )'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\ttheErrorDescription = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section:
          \" & $~script.section & \". Make sure the perform script step calls the
          correct script and the user has permission to run it.\" ;\n\ttheErrorType
          = \"Fmp\" ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) ) ]"
      Calculation: "/* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign script result to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& "
        - Get
        - ' ( '
        - ScriptResult
        - " )\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n) )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType = \"
        & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode &
        \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) & \"
        ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" &
        Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$~script.section = \" & Quote
        ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) ) ]"
      Calculation: "/* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign subscript error info to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n)
          )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing
        script: '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)
        ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \".
        $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing script:
        '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \". $error could
          not be evaluated.\";\n\ttheErrorInfo = \"after performing script: '\" &
          $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $errorCode ]
      Calculation: $errorCode
      DisplayCalculation:
        Chunk: $errorCode
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /* subscript error has been saved to local variable(s)
        */\n\nLet ( [\n\t/* add the current script's name to a list of scripts that
        triggered this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf
        ( IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "/* subscript error has been saved to local variable(s) */\n\nLet
        ( [\n\t/* add the current script's name to a list of scripts that triggered
        this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf (
        IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - |+
          /* subscript error has been saved to local variable(s) */

        - Let
        - " ( [\n\t/* add the current script's name to a list of scripts that triggered
          this error */\n\t~scriptStack = "
        - List
        - " (\n\t\t"
        - Get
        - ' ( '
        - ScriptName
        - " ) ;\n\t\t"
        - If
        - ' ( '
        - IsEmpty
        - " ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's name
          that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
          ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
          \"$scriptStack = \" & "
        - Quote
        - " ( ~scriptStack ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: API: Reset” ]'
      Script:
        id: '73'
        name: 'EasySync Client: API: Reset'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( LastError ) ]
      Calculation: Get ( LastError )
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - LastError
        - ' )'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\ttheErrorDescription = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section:
          \" & $~script.section & \". Make sure the perform script step calls the
          correct script and the user has permission to run it.\" ;\n\ttheErrorType
          = \"Fmp\" ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) ) ]"
      Calculation: "/* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign script result to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& "
        - Get
        - ' ( '
        - ScriptResult
        - " )\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n) )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType = \"
        & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode &
        \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) & \"
        ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" &
        Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$~script.section = \" & Quote
        ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) ) ]"
      Calculation: "/* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign subscript error info to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n)
          )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing
        script: '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)
        ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \".
        $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing script:
        '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \". $error could
          not be evaluated.\";\n\ttheErrorInfo = \"after performing script: '\" &
          $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $errorCode ]
      Calculation: $errorCode
      DisplayCalculation:
        Chunk: $errorCode
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /* subscript error has been saved to local variable(s)
        */\n\nLet ( [\n\t/* add the current script's name to a list of scripts that
        triggered this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf
        ( IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "/* subscript error has been saved to local variable(s) */\n\nLet
        ( [\n\t/* add the current script's name to a list of scripts that triggered
        this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf (
        IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - |+
          /* subscript error has been saved to local variable(s) */

        - Let
        - " ( [\n\t/* add the current script's name to a list of scripts that triggered
          this error */\n\t~scriptStack = "
        - List
        - " (\n\t\t"
        - Get
        - ' ( '
        - ScriptName
        - " ) ;\n\t\t"
        - If
        - ' ( '
        - IsEmpty
        - " ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's name
          that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
          ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
          \"$scriptStack = \" & "
        - Quote
        - " ( ~scriptStack ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"SAVE PAYLOAD" ]
      Value:
        Calculation: '"SAVE PAYLOAD"'
        DisplayCalculation:
          Chunk: '"SAVE PAYLOAD"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: Config: Show Message”; Parameter:
        "Saving payload..." ]'
      Calculation: '"Saving payload..."'
      DisplayCalculation:
        Chunk: '"Saving payload..."'
      Script:
        id: '67'
        name: 'EasySync Client: Config: Show Message'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Save the payload.'
      Text: Save the payload.
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Note: We wait to save the payload until this point. Otherwise, a
        "wipe" would have deleted the saved payload.'
      Text: 'Note: We wait to save the payload until this point. Otherwise, a "wipe"
        would have deleted the saved payload.'
    - enable: 'True'
      id: '79'
      name: Freeze Window
      StepText: Freeze Window
    - enable: 'True'
      id: '7'
      name: New Record/Request
      StepText: New Record/Request
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ "EasySync_Payloads::Payload"; $payload ]
      Result:
        Calculation: $payload
        DisplayCalculation:
          Chunk: $payload
      TargetName:
        Calculation: '"EasySync_Payloads::Payload"'
        DisplayCalculation:
          Chunk: '"EasySync_Payloads::Payload"'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload\"\n] ;\n\t\"$LogLevel =
        \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \"
        ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$payload = \" & Quote ( $payload ) & \"
        ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$payload = \" & Quote ( $payload ) & \"
        ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload\"\n] ;\n\t\"$LogLevel =
          \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$payload = \" & "
        - Quote
        - |2-
           ( $payload ) & " ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ "EasySync_Payloads::Payload_Type"; "Pull Payload"
        ]
      Result:
        Calculation: '"Pull Payload"'
        DisplayCalculation:
          Chunk: '"Pull Payload"'
      TargetName:
        Calculation: '"EasySync_Payloads::Payload_Type"'
        DisplayCalculation:
          Chunk: '"EasySync_Payloads::Payload_Type"'
    - enable: 'True'
      id: '75'
      name: Commit Records/Requests
      StepText: |-
        Commit Records/Requests
        [ No dialog ]
      NoInteract:
        state: 'True'
      Option:
        state: 'False'
      ESSForceCommit:
        state: 'False'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"EXTRACT TABLE AND FIELD INFO
        FROM PAYLOAD" ]
      Value:
        Calculation: '"EXTRACT TABLE AND FIELD INFO FROM PAYLOAD"'
        DisplayCalculation:
          Chunk: '"EXTRACT TABLE AND FIELD INFO FROM PAYLOAD"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: Config: Show Message”; Parameter:
        "Processing payload..." ]'
      Calculation: '"Processing payload..."'
      DisplayCalculation:
        Chunk: '"Processing payload..."'
      Script:
        id: '67'
        name: 'EasySync Client: Config: Show Message'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the table info.'
      Text: Get the table info.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $tables; Value:Let ( \n[\nbeginning = Position ( $payload
        ; \"<tables>¶\" ; 1 ; 1 ) + 9;\nend = Position ( $payload ; \"¶</tables>\"
        ; 1 ; 1 );\ntables = Middle ( $payload ; beginning ; end - beginning );\ntables
        = Trim ( tables );\ntables = Substitute ( tables ; \"<table>\" ; \"\" );\ntables
        = Substitute ( tables ; \"</table>\" ; \"\" )\n];\ntables\n) ]"
      Value:
        Calculation: "Let ( \n[\nbeginning = Position ( $payload ; \"<tables>¶\" ;
          1 ; 1 ) + 9;\nend = Position ( $payload ; \"¶</tables>\" ; 1 ; 1 );\ntables
          = Middle ( $payload ; beginning ; end - beginning );\ntables = Trim ( tables
          );\ntables = Substitute ( tables ; \"<table>\" ; \"\" );\ntables = Substitute
          ( tables ; \"</table>\" ; \"\" )\n];\ntables\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( \n[\nbeginning = "
          - Position
          - " ( $payload ; \"<tables>¶\" ; 1 ; 1 ) + 9;\nend = "
          - Position
          - " ( $payload ; \"¶</tables>\" ; 1 ; 1 );\ntables = "
          - Middle
          - " ( $payload ; beginning ; end - beginning );\ntables = "
          - Trim
          - " ( tables );\ntables = "
          - Substitute
          - " ( tables ; \"<table>\" ; \"\" );\ntables = "
          - Substitute
          - |2-
             ( tables ; "</table>" ; "" )
            ];
            tables
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $tables
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Tables: \" & $tables\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Tables: \"
        & $tables\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Tables: \" & $tables\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Create field name value lists for each table.'
      Text: Create field name value lists for each table.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $table; Value:Substitute ( GetValue ( $tables ; $i
        ); "</field>"; ¶ ) ]
      Value:
        Calculation: Substitute ( GetValue ( $tables ; $i ); "</field>"; ¶ )
        DisplayCalculation:
          Chunk:
          - Substitute
          - ' ( '
          - GetValue
          - ' ( $tables ; $i ); "</field>"; ¶ )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $table
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $table_name; Value:GetValue ( $table; 1 ) ]
      Value:
        Calculation: GetValue ( $table; 1 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( $table; 1 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $table_name
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $dyn_code; Value:"Let ( [ $" & $table_name & " = $table
        ]; 1 )" ]
      Value:
        Calculation: '"Let ( [ $" & $table_name & " = $table ]; 1 )"'
        DisplayCalculation:
          Chunk: '"Let ( [ $" & $table_name & " = $table ]; 1 )"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $dyn_code
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $dyn_code; Value:Evaluate ( $dyn_code ) ]
      Value:
        Calculation: Evaluate ( $dyn_code )
        DisplayCalculation:
          Chunk:
          - Evaluate
          - ' ( $dyn_code )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $dyn_code
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Created Field Value List for Table:
        \" & $table_name\n\t\t& ¶ & Evaluate ( \"$\" & $table_name )\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Created Field Value
        List for Table: \" & $table_name\n\t\t& ¶ & Evaluate ( \"$\" & $table_name
        )\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" &
        Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Created Field Value List for Table:
          \" & $table_name\n\t\t& ¶ & "
        - Evaluate
        - " ( \"$\" & $table_name )\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
          \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:$i + 1 ]
      Value:
        Calculation: $i + 1
        DisplayCalculation:
          Chunk: $i + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $i > ValueCount ( $tables ) ]
      Calculation: $i > ValueCount ( $tables )
      DisplayCalculation:
        Chunk:
        - '$i > '
        - ValueCount
        - ' ( $tables )'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the # of records in the payload.'
      Text: 'Get the # of records in the payload.'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $record_count; Value:PatternCount ( $payload; $record_delimiter
        ) - 1 ]
      Value:
        Calculation: PatternCount ( $payload; $record_delimiter ) - 1
        DisplayCalculation:
          Chunk:
          - PatternCount
          - ' ( $payload; $record_delimiter ) - 1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $record_count
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"PROCESS PAYLOAD" ]
      Value:
        Calculation: '"PROCESS PAYLOAD"'
        DisplayCalculation:
          Chunk: '"PROCESS PAYLOAD"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If there are no records to sync...'
      Text: If there are no records to sync...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $record_count = 0 ]
      Calculation: $record_count = 0
      DisplayCalculation:
        Chunk: $record_count = 0
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $nothingToPull; Value:True ]
      Value:
        Calculation: 'True'
        DisplayCalculation:
          Chunk: 'True'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $nothingToPull
    - enable: 'True'
      id: '69'
      name: Else
      StepText: Else
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: Config: Show Message”; Parameter:
        "Processing " & $record_count & " records received from server..." ]'
      Calculation: '"Processing " & $record_count & " records received from server..."'
      DisplayCalculation:
        Chunk: '"Processing " & $record_count & " records received from server..."'
      Script:
        id: '67'
        name: 'EasySync Client: Config: Show Message'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Loop over the records.'
      Text: Loop over the records.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:1  /* initialize variable */ ]
      Value:
        Calculation: 1  /* initialize variable */
        DisplayCalculation:
          Chunk: 1  /* initialize variable */
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $previous_start; Value:0  /* initialize variable */
        ]
      Value:
        Calculation: 0  /* initialize variable */
        DisplayCalculation:
          Chunk: 0  /* initialize variable */
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $previous_start
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Refresh sync status occasionally...'
      Text: Refresh sync status occasionally...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Evaluate ( $$pull_progress_indicator_logic ) ]
      Calculation: Evaluate ( $$pull_progress_indicator_logic )
      DisplayCalculation:
        Chunk:
        - Evaluate
        - ' ( $$pull_progress_indicator_logic )'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: Config: Show Message”; Parameter:
        "Processing record " & $i & " of " & $record_count & "..." ]'
      Calculation: '"Processing record " & $i & " of " & $record_count & "..."'
      DisplayCalculation:
        Chunk: '"Processing record " & $i & " of " & $record_count & "..."'
      Script:
        id: '67'
        name: 'EasySync Client: Config: Show Message'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the record, formatted as a return-delimited value list.'
      Text: Get the record, formatted as a return-delimited value list.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $record; Value:Let ( [\n\t// Note: The \"+1\" in the
        \"beginning calc\" is to account for the default carriage return imposed by
        ExectueSQL.\n\tbeginning = If ( $previous_start > 0 ;\n\t\tPosition ( $payload
        ; $record_delimiter ; $previous_start ; 1 ) + Length ( $record_delimiter )
        + 1 ;\n\t\tPosition ( $payload; \"<records>¶\"; 1; 1 ) + 10\n\t) ;\n\tend
        = Position ( $payload ; $record_delimiter ; 1 ; $i + 1 ) ;\n\t$previous_start
        = end ;\n\trecord = Middle ( $payload ; beginning ; end - beginning ) ;\n\t//
        Encode CRLFs that might be found in Base64-encoded container data.\n\t// This
        makes it easier to treat the fields as a return-delimited value list.\n\trecord
        = Substitute ( record ; Char ( 13 ) & Char ( 10 ) ; \"[[CRLF]]\" ) ;\n\t//
        Encode any remaining newline characters.\n\trecord = Substitute ( record ;
        ¶ ; \"[[BR]]\" ) ;\n\trecord = Substitute ( record ; $field_delimiter ; ¶
        )\n] ;\n\trecord\n) ]"
      Value:
        Calculation: "Let ( [\n\t// Note: The \"+1\" in the \"beginning calc\" is
          to account for the default carriage return imposed by ExectueSQL.\n\tbeginning
          = If ( $previous_start > 0 ;\n\t\tPosition ( $payload ; $record_delimiter
          ; $previous_start ; 1 ) + Length ( $record_delimiter ) + 1 ;\n\t\tPosition
          ( $payload; \"<records>¶\"; 1; 1 ) + 10\n\t) ;\n\tend = Position ( $payload
          ; $record_delimiter ; 1 ; $i + 1 ) ;\n\t$previous_start = end ;\n\trecord
          = Middle ( $payload ; beginning ; end - beginning ) ;\n\t// Encode CRLFs
          that might be found in Base64-encoded container data.\n\t// This makes it
          easier to treat the fields as a return-delimited value list.\n\trecord =
          Substitute ( record ; Char ( 13 ) & Char ( 10 ) ; \"[[CRLF]]\" ) ;\n\t//
          Encode any remaining newline characters.\n\trecord = Substitute ( record
          ; ¶ ; \"[[BR]]\" ) ;\n\trecord = Substitute ( record ; $field_delimiter
          ; ¶ )\n] ;\n\trecord\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( [\n\t"
          - |
            // Note: The "+1" in the "beginning calc" is to account for the default carriage return imposed by ExectueSQL.
          - "\tbeginning = "
          - If
          - " ( $previous_start > 0 ;\n\t\t"
          - Position
          - ' ( $payload ; $record_delimiter ; $previous_start ; 1 ) + '
          - Length
          - " ( $record_delimiter ) + 1 ;\n\t\t"
          - Position
          - " ( $payload; \"<records>¶\"; 1; 1 ) + 10\n\t) ;\n\tend = "
          - Position
          - " ( $payload ; $record_delimiter ; 1 ; $i + 1 ) ;\n\t$previous_start =
            end ;\n\trecord = "
          - Middle
          - " ( $payload ; beginning ; end - beginning ) ;\n\t"
          - |
            // Encode CRLFs that might be found in Base64-encoded container data.
          - type: NoRef
            __content__: "\t"
          - |
            // This makes it easier to treat the fields as a return-delimited value list.
          - "\trecord = "
          - Substitute
          - ' ( record ; '
          - Char
          - ' ( 13 ) & '
          - Char
          - " ( 10 ) ; \"[[CRLF]]\" ) ;\n\t"
          - |
            // Encode any remaining newline characters.
          - "\trecord = "
          - Substitute
          - " ( record ; ¶ ; \"[[BR]]\" ) ;\n\trecord = "
          - Substitute
          - " ( record ; $field_delimiter ; ¶ )\n] ;\n\trecord\n)"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $record
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Record \" & $i\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$record = \" & Quote ( $record ) & \" ;¶\"\n)
        ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Record \" &
        $i\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \"
        & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$record
        = \" & Quote ( $record ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Record \" & $i\n] ;\n\t\"$LogLevel
          = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$record = \" & "
        - Quote
        - |2-
           ( $record ) & " ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the name of the table that is associated with this record.'
      Text: Get the name of the table that is associated with this record.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $table_name; Value:GetValue ( $record ; 1 ) ]
      Value:
        Calculation: GetValue ( $record ; 1 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( $record ; 1 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $table_name
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Table Name for Payload Record \"
        & $i & \": \" & $table_name\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
        \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \"
        & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote
        ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp (
        \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 )
        ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Table Name for Payload
        Record \" & $i & \": \" & $table_name\n] ;\n\t\"$LogLevel = \" & ~logLevel
        & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Table Name for Payload Record \"
          & $i & \": \" & $table_name\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
          \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the names of the fields that are associated with this record.'
      Text: Get the names of the fields that are associated with this record.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $field_names; Value:Evaluate ( "$" & $table_name )
        ]
      Value:
        Calculation: Evaluate ( "$" & $table_name )
        DisplayCalculation:
          Chunk:
          - Evaluate
          - ' ( "$" & $table_name )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_names
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Field Names for Payload Record
        \" & $i & \": \" & $field_names\n] ;\n\t\"$LogLevel = \" & ~logLevel & \"
        ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Field Names for Payload
        Record \" & $i & \": \" & $field_names\n] ;\n\t\"$LogLevel = \" & ~logLevel
        & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Field Names for Payload Record
          \" & $i & \": \" & $field_names\n] ;\n\t\"$LogLevel = \" & ~logLevel & \"
          ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the ES_Record_UUID value of this record.'
      Text: Get the ES_Record_UUID value of this record.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $ES_Record_UUID; Value:// Note: This is based in VERY large part on Kevin Frank's "ValuePosition ( theList ; theValue )" function.
        // See: http://filemakerhacks.com/2011/06/12/valueposition-the-function-filemaker-forgot/
        // Thanks Kevin!

        Let( [
        theList = $field_names;
        theValue = "ES_Record_UUID[1]";
        pLp = ¶ & theList & ¶ ;
        pVp = ¶ & theValue & ¶ ;
        thePos = Position ( pLp ; pVp ; 1 ; 1 ) ;
        theSegment = Left ( pLp ; thePos ) ;
        theValPos = PatternCount ( theSegment ; ¶ )
        ] ;

        GetValue ( $record ; theValPos )

        ) ]
      Value:
        Calculation: |-
          // Note: This is based in VERY large part on Kevin Frank's "ValuePosition ( theList ; theValue )" function.
          // See: http://filemakerhacks.com/2011/06/12/valueposition-the-function-filemaker-forgot/
          // Thanks Kevin!

          Let( [
          theList = $field_names;
          theValue = "ES_Record_UUID[1]";
          pLp = ¶ & theList & ¶ ;
          pVp = ¶ & theValue & ¶ ;
          thePos = Position ( pLp ; pVp ; 1 ; 1 ) ;
          theSegment = Left ( pLp ; thePos ) ;
          theValPos = PatternCount ( theSegment ; ¶ )
          ] ;

          GetValue ( $record ; theValPos )

          )
        DisplayCalculation:
          Chunk:
          - |
            // Note: This is based in VERY large part on Kevin Frank's "ValuePosition ( theList ; theValue )" function.
          - |
            // See: http://filemakerhacks.com/2011/06/12/valueposition-the-function-filemaker-forgot/
          - |
            // Thanks Kevin!
          - type: NoRef
            __content__: |2+

          - Let
          - "( [\ntheList = $field_names;\ntheValue = \"ES_Record_UUID[1]\";\npLp
            = ¶ & theList & ¶ ;\npVp = ¶ & theValue & ¶ ;\nthePos = "
          - Position
          - " ( pLp ; pVp ; 1 ; 1 ) ;\ntheSegment = "
          - Left
          - " ( pLp ; thePos ) ;\ntheValPos = "
          - PatternCount
          - |2+
             ( theSegment ; ¶ )
            ] ;

          - GetValue
          - |2-
             ( $record ; theValPos )

            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $ES_Record_UUID
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE  ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"ES_Record_UUID for Payload Record
        \" & $i & \": \" & $ES_Record_UUID\n] ;\n\t\"$LogLevel = \" & ~logLevel &
        \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"ES_Record_UUID for
        Payload Record \" & $i & \": \" & $ES_Record_UUID\n] ;\n\t\"$LogLevel = \"
        & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"ES_Record_UUID for Payload Record
          \" & $i & \": \" & $ES_Record_UUID\n] ;\n\t\"$LogLevel = \" & ~logLevel
          & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Go to the correct row in the Payload Details portal.'
      Text: Go to the correct row in the Payload Details portal.
    - enable: 'True'
      id: '99'
      name: Go to Portal Row
      StepText: |-
        Go to Portal Row [ $i ]
        [ Select; No dialog ]
      NoInteract:
        state: 'True'
      SelectAll:
        state: 'True'
      RowPageLocation:
        value: ByCalculation
      Calculation: $i
      DisplayCalculation:
        Chunk: $i
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Set the Record UUID for the Payload Details record.'
      Text: Set the Record UUID for the Payload Details record.
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ "EasySync_Payload_Details::ES_Child_Record_UUID";
        $ES_Record_UUID ]
      Result:
        Calculation: $ES_Record_UUID
        DisplayCalculation:
          Chunk: $ES_Record_UUID
      TargetName:
        Calculation: '"EasySync_Payload_Details::ES_Child_Record_UUID"'
        DisplayCalculation:
          Chunk: '"EasySync_Payload_Details::ES_Child_Record_UUID"'
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ "EasySync_Payload_Details::Payload_Type"; "Payload
        Detail" ]
      Result:
        Calculation: '"Payload Detail"'
        DisplayCalculation:
          Chunk: '"Payload Detail"'
      TargetName:
        Calculation: '"EasySync_Payload_Details::Payload_Type"'
        DisplayCalculation:
          Chunk: '"EasySync_Payload_Details::Payload_Type"'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Loop over the field names.'
      Text: Loop over the field names.
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#We skip the first value because it is really the table name that
        the record is from.'
      Text: We skip the first value because it is really the table name that the record
        is from.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $f; Value:2 ]
      Value:
        Calculation: '2'
        DisplayCalculation:
          Chunk: '2'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $f
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the name of the field.'
      Text: Get the name of the field.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $field_name; Value:GetValue ( $field_names; $f ) ]
      Value:
        Calculation: GetValue ( $field_names; $f )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( $field_names; $f )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_name
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If this is not a container...'
      Text: If this is not a container...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Left ( $field_name ; 4 ) ≠ "B64_" ]
      Calculation: Left ( $field_name ; 4 ) ≠ "B64_"
      DisplayCalculation:
        Chunk:
        - Left
        - ' ( $field_name ; 4 ) ≠ "B64_"'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $field_value; Value:Let (
        [
        value = GetValue ( $record ; $f );
        value = Substitute ( value ; "[[BR]]" ; ¶ )
        ];
        value
        ) ]
      Value:
        Calculation: |-
          Let (
          [
          value = GetValue ( $record ; $f );
          value = Substitute ( value ; "[[BR]]" ; ¶ )
          ];
          value
          )
        DisplayCalculation:
          Chunk:
          - Let
          - " (\n[\nvalue = "
          - GetValue
          - " ( $record ; $f );\nvalue = "
          - Substitute
          - |2-
             ( value ; "[[BR]]" ; ¶ )
            ];
            value
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_value
    - enable: 'True'
      id: '69'
      name: Else
      StepText: Else
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $field_name; Value:Right ( $field_name; Length ( $field_name
        ) - 4 ) ]
      Value:
        Calculation: Right ( $field_name; Length ( $field_name ) - 4 )
        DisplayCalculation:
          Chunk:
          - Right
          - ' ( $field_name; '
          - Length
          - ' ( $field_name ) - 4 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_name
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $field_value; Value:GetValue ( $record ; $f ) ]
      Value:
        Calculation: GetValue ( $record ; $f )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( $record ; $f )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_value
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ not IsEmpty ( $field_value ) ]
      Calculation: not IsEmpty ( $field_value )
      DisplayCalculation:
        Chunk:
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( $field_value )'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $field_value; Value:Let (
        [
        value = $field_value;
        value = Substitute ( value ; "</b64>"; "" );
        fileNameWithExtension = GetValue ( Substitute ( value ; "<b64>"; "¶" ); 1 );
        encoded = Substitute ( value; fileNameWithExtension & "<b64>"; "" );
        encoded = Substitute ( encoded ; "[[CRLF]]" ; Char ( 13 ) & Char ( 10 ) );
        decoded = Base64Decode ( encoded; fileNameWithExtension )
        ];
        decoded
        ) ]
      Value:
        Calculation: |-
          Let (
          [
          value = $field_value;
          value = Substitute ( value ; "</b64>"; "" );
          fileNameWithExtension = GetValue ( Substitute ( value ; "<b64>"; "¶" ); 1 );
          encoded = Substitute ( value; fileNameWithExtension & "<b64>"; "" );
          encoded = Substitute ( encoded ; "[[CRLF]]" ; Char ( 13 ) & Char ( 10 ) );
          decoded = Base64Decode ( encoded; fileNameWithExtension )
          ];
          decoded
          )
        DisplayCalculation:
          Chunk:
          - Let
          - " (\n[\nvalue = $field_value;\nvalue = "
          - Substitute
          - " ( value ; \"</b64>\"; \"\" );\nfileNameWithExtension = "
          - GetValue
          - ' ( '
          - Substitute
          - " ( value ; \"<b64>\"; \"¶\" ); 1 );\nencoded = "
          - Substitute
          - " ( value; fileNameWithExtension & \"<b64>\"; \"\" );\nencoded = "
          - Substitute
          - ' ( encoded ; "[[CRLF]]" ; '
          - Char
          - ' ( 13 ) & '
          - Char
          - " ( 10 ) );\ndecoded = "
          - Base64Decode
          - |2-
             ( encoded; fileNameWithExtension )
            ];
            decoded
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_value
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If the value of this field has changed...'
      Text: If the value of this field has changed...
    - enable: 'True'
      id: '68'
      name: If
      StepText: |-
        If [ not Exact ( $field_value ; Evaluate ( $table_name & "::" & $field_name ) )

        // v1.2: $field_value ≠ Evaluate ( $table_name & "::" & $field_name ) ]
      Calculation: |-
        not Exact ( $field_value ; Evaluate ( $table_name & "::" & $field_name ) )

        // v1.2: $field_value ≠ Evaluate ( $table_name & "::" & $field_name )
      DisplayCalculation:
        Chunk:
        - not
        - type: NoRef
          __content__: ' '
        - Exact
        - ' ( $field_value ; '
        - Evaluate
        - |2+
           ( $table_name & "::" & $field_name ) )

        - '// v1.2: $field_value ≠ Evaluate ( $table_name & "::" & $field_name )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Update the field.'
      Text: Update the field.
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ $table_name & "::" & $field_name; $field_value
        ]
      Result:
        Calculation: $field_value
        DisplayCalculation:
          Chunk: $field_value
      TargetName:
        Calculation: $table_name & "::" & $field_name
        DisplayCalculation:
          Chunk: $table_name & "::" & $field_name
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If an error has occurred...'
      Text: If an error has occurred...
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#And if it is not a 102 ("Field is missing") error...'
      Text: And if it is not a 102 ("Field is missing") error...
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Note: We ignore 102s because they are indicative of a field in the
        hosted DB that is simply not mirrored in the remote DB.'
      Text: 'Note: We ignore 102s because they are indicative of a field in the hosted
        DB that is simply not mirrored in the remote DB.'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $LastError; Value:Get ( LastError ) ]
      Value:
        Calculation: Get ( LastError )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - LastError
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $LastError
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $LastError ≠ 0 and $LastError ≠ 102 ]
      Calculation: $LastError ≠ 0 and $LastError ≠ 102
      DisplayCalculation:
        Chunk:
        - '$LastError ≠ 0 '
        - and
        - ' $LastError ≠ 102'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = $LastError ;\n\ttheErrorDescription
        = \"(see FileMaker documentation for the description of this error code)\"
        ;\n\ttheErrorInfo = \"Pull Error: an error occurred when attempting to process
        the pulled payload, on \" & $table_name & \"::\" & $field_name ;\n\ttheErrorType
        = \"Fmp\" ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType ) & \"
        ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = $LastError ;\n\ttheErrorDescription
        = \"(see FileMaker documentation for the description of this error code)\"
        ;\n\ttheErrorInfo = \"Pull Error: an error occurred when attempting to process
        the pulled payload, on \" & $table_name & \"::\" & $field_name ;\n\ttheErrorType
        = \"Fmp\" ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType ) & \"
        ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = $LastError ;\n\ttheErrorDescription = \"(see FileMaker
          documentation for the description of this error code)\" ;\n\ttheErrorInfo
          = \"Pull Error: an error occurred when attempting to process the pulled
          payload, on \" & $table_name & \"::\" & $field_name ;\n\ttheErrorType =
          \"Fmp\" ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $f; Value:$f + 1 ]
      Value:
        Calculation: $f + 1
        DisplayCalculation:
          Chunk: $f + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $f
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $f > ValueCount ( $field_names ) ]
      Calculation: $f > ValueCount ( $field_names )
      DisplayCalculation:
        Chunk:
        - '$f > '
        - ValueCount
        - ' ( $field_names )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#End loop that sets the fields.'
      Text: End loop that sets the fields.
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /**\n * An error occurred in the above loop\n *\n
        * assign error info to local variables\n * then evaluate the errorCode as
        a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t&
        \"! = \\\"\\\" ] ; $errorCode )\"\n) ) ]"
      Calculation: "/**\n * An error occurred in the above loop\n *\n * assign error
        info to local variables\n * then evaluate the errorCode as a Boolean\n * \n
        */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\"
        ] ; $errorCode )\"\n) )"
      DisplayCalculation:
        Chunk:
        - "/**\n * An error occurred in the above loop\n *\n * assign error info to
          local variables\n * then evaluate the errorCode as a Boolean\n * \n */\n\n"
        - GetAsBoolean
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n)
          )"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:$i + 1 ]
      Value:
        Calculation: $i + 1
        DisplayCalculation:
          Chunk: $i + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $i > $record_count ]
      Calculation: $i > $record_count
      DisplayCalculation:
        Chunk: $i > $record_count
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#End loop over the records.'
      Text: End loop over the records.
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /**\n * An error occurred in the above loop\n *\n
        * assign error info to local variables\n * then evaluate the errorCode as
        a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t&
        \"! = \\\"\\\" ] ; $errorCode )\"\n) ) ]"
      Calculation: "/**\n * An error occurred in the above loop\n *\n * assign error
        info to local variables\n * then evaluate the errorCode as a Boolean\n * \n
        */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\"
        ] ; $errorCode )\"\n) )"
      DisplayCalculation:
        Chunk:
        - "/**\n * An error occurred in the above loop\n *\n * assign error info to
          local variables\n * then evaluate the errorCode as a Boolean\n * \n */\n\n"
        - GetAsBoolean
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n)
          )"
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"UPDATE LAST PULL TIME" ]
      Value:
        Calculation: '"UPDATE LAST PULL TIME"'
        DisplayCalculation:
          Chunk: '"UPDATE LAST PULL TIME"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ "EasySync_Payloads::ES_Last_Pull_UTC_Time"; $~script.start
        ]
      Result:
        Calculation: $~script.start
        DisplayCalculation:
          Chunk: $~script.start
      TargetName:
        Calculation: '"EasySync_Payloads::ES_Last_Pull_UTC_Time"'
        DisplayCalculation:
          Chunk: '"EasySync_Payloads::ES_Last_Pull_UTC_Time"'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode
        = Get ( LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation
        for the description of this error code)\" ;\n\t\ttheErrorInfo = \"\" ;\n\t\ttheErrorType
        = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType = \" & Quote ( theErrorType )
        & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & Quote ( Get ( ScriptName )
        ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & Quote ( $~script.section )
        & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n) ]"
      Calculation: "If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode = Get (
        LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for
        the description of this error code)\" ;\n\t\ttheErrorInfo = \"\" ;\n\t\ttheErrorType
        = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType = \" & Quote ( theErrorType )
        & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & Quote ( Get ( ScriptName )
        ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & Quote ( $~script.section )
        & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n)"
      DisplayCalculation:
        Chunk:
        - If
        - ' ( '
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t"
        - Let
        - " ( [\n\t\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for the
          description of this error code)\" ;\n\t\ttheErrorInfo = \"\" ;\n\t\ttheErrorType
          = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\t"
        - 'True'
        - "\n\t)\n)"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = $~script.section & \" end\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime = \" & GetAsNumber ( $~script.runtime
        ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = $~script.section & \"
        end\"\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage =
        \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get (
        ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime
        = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = $~script.section & \" end\"\n] ;\n\t\"$LogLevel
          = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime = \" & "
        - GetAsNumber
        - |2-
           ( $~script.runtime ) & " ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"COMMIT RECORD" ]
      Value:
        Calculation: '"COMMIT RECORD"'
        DisplayCalculation:
          Chunk: '"COMMIT RECORD"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Try to commit the transaction.'
      Text: Try to commit the transaction.
    - enable: 'True'
      id: '75'
      name: Commit Records/Requests
      StepText: |-
        Commit Records/Requests
        [ No dialog ]
      NoInteract:
        state: 'True'
      Option:
        state: 'False'
      ESSForceCommit:
        state: 'False'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If an error has occurred...'
      Text: If an error has occurred...
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $LastError; Value:Get ( LastError ) ]
      Value:
        Calculation: Get ( LastError )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - LastError
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $LastError
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $LastError ≠ 0 ]
      Calculation: $LastError ≠ 0
      DisplayCalculation:
        Chunk: $LastError ≠ 0
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Rollback the changes.'
      Text: Rollback the changes.
    - enable: 'True'
      id: '51'
      name: Revert Record/Request
      StepText: |-
        Revert Record/Request
        [ No dialog ]
      NoInteract:
        state: 'True'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $Delete_Payloads = "All" ]
      Calculation: $Delete_Payloads = "All"
      DisplayCalculation:
        Chunk: $Delete_Payloads = "All"
    - enable: 'True'
      id: '9'
      name: Delete Record/Request
      StepText: |-
        Delete Record/Request
        [ No dialog ]
      NoInteract:
        state: 'True'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = $LastError ;\n\ttheErrorDescription
        = \"(see FileMaker documentation for the description of this error code)\"
        ;\n\ttheErrorInfo = \"Pull Error: when attempting to commit the data in the
        pulled payload.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error = \"$errorType
        = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) &
        \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = $LastError ;\n\ttheErrorDescription
        = \"(see FileMaker documentation for the description of this error code)\"
        ;\n\ttheErrorInfo = \"Pull Error: when attempting to commit the data in the
        pulled payload.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error = \"$errorType
        = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) &
        \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = $LastError ;\n\ttheErrorDescription = \"(see FileMaker
          documentation for the description of this error code)\" ;\n\ttheErrorInfo
          = \"Pull Error: when attempting to commit the data in the pulled payload.\"
          ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"DELETE PAYLOAD" ]
      Value:
        Calculation: '"DELETE PAYLOAD"'
        DisplayCalculation:
          Chunk: '"DELETE PAYLOAD"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Delete the payload.'
      Text: Delete the payload.
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$delete_pull_payloads = "All" or $$delete_pull_payloads = "Successful"
        ]
      Calculation: $$delete_pull_payloads = "All" or $$delete_pull_payloads = "Successful"
      DisplayCalculation:
        Chunk:
        - '$$delete_pull_payloads = "All" '
        - or
        - ' $$delete_pull_payloads = "Successful"'
    - enable: 'True'
      id: '9'
      name: Delete Record/Request
      StepText: |-
        Delete Record/Request
        [ No dialog ]
      NoInteract:
        state: 'True'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'
      Text: ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# end single-pass loop for error trapping'
      Text: ' end single-pass loop for error trapping'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ True ]
      Calculation: 'True'
      DisplayCalculation:
        Chunk: 'True'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"HANDLE ERROR" ]
      Value:
        Calculation: '"HANDLE ERROR"'
        DisplayCalculation:
          Chunk: '"HANDLE ERROR"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.runtime; Value:( Get ( CurrentTimeUTCMilliseconds
        ) - $~script.start ) / 1000 ]
      Value:
        Calculation: ( Get ( CurrentTimeUTCMilliseconds ) - $~script.start ) / 1000
        DisplayCalculation:
          Chunk:
          - '( '
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $~script.start ) / 1000'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.runtime
    - enable: 'True'
      id: '68'
      name: If
      StepText: "If [ /**\n * assign error info to local variables\n * then evaluate
        the errorCode as a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let
        ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n) ) ]"
      Calculation: "/**\n * assign error info to local variables\n * then evaluate
        the errorCode as a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let
        ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n) )"
      DisplayCalculation:
        Chunk:
        - "/**\n * assign error info to local variables\n * then evaluate the errorCode
          as a Boolean\n * \n */\n\n"
        - GetAsBoolean
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n)
          )"
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error = \" & Quote ( $error ) & \" ;¶\"\n\t&
        \"$runtime = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error
        = \" & Quote ( $error ) & \" ;¶\"\n\t& \"$runtime = \" & GetAsNumber ( $~script.runtime
        ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n] ;\n\t\"$LogLevel
          = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error = \" & "
        - Quote
        - " ( $error ) & \" ;¶\"\n\t& \"$runtime = \" & "
        - GetAsNumber
        - |2-
           ( $~script.runtime ) & " ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '69'
      name: Else
      StepText: Else
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"exit script without error\"\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime
        = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"exit script without
        error\"\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime
        = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"exit script without error\"\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime = \" & "
        - GetAsNumber
        - |2-
           ( $~script.runtime ) & " ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$show_successful_pulls ]
      Calculation: $$show_successful_pulls
      DisplayCalculation:
        Chunk: $$show_successful_pulls
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: "Pull Success"; Message: "Remote data
        has been successfully pulled from the server. (Elapsed Time: " & GetAsTime
        ( $~script.runtime ) & ")"; Default Button: “OK”, Commit: “Yes” ]'
      Title:
        Calculation: '"Pull Success"'
        DisplayCalculation:
          Chunk: '"Pull Success"'
      Message:
        Calculation: '"Remote data has been successfully pulled from the server. (Elapsed
          Time: " & GetAsTime ( $~script.runtime ) & ")"'
        DisplayCalculation:
          Chunk:
          - '"Remote data has been successfully pulled from the server. (Elapsed Time:
            " & '
          - GetAsTime
          - ' ( $~script.runtime ) & ")"'
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"OK"'
          DisplayCalculation:
            Chunk: '"OK"'
        - CommitState: 'False'
        - CommitState: 'False'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $!; Value:""
        /**
         * This is a step that will not return an error.
         *
         * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
         * Get ( LastError ) to test if an error occurred with the Perform Script step.
         *
         */ ]
      Value:
        Calculation: |-
          ""
          /**
           * This is a step that will not return an error.
           *
           * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
           * Get ( LastError ) to test if an error occurred with the Perform Script step.
           *
           */
        DisplayCalculation:
          Chunk: |-
            ""
            /**
             * This is a step that will not return an error.
             *
             * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
             * Get ( LastError ) to test if an error occurred with the Perform Script step.
             *
             */
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $!
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: |-
        Exit Script [ Result: "$error = " & Quote ( $error ) & " ;¶"
        & "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶"
        & "$nothingToPull = " & GetAsBoolean( $nothingToPull ) & " ;¶" ]
      Calculation: |-
        "$error = " & Quote ( $error ) & " ;¶"
        & "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶"
        & "$nothingToPull = " & GetAsBoolean( $nothingToPull ) & " ;¶"
      DisplayCalculation:
        Chunk:
        - '"$error = " & '
        - Quote
        - " ( $error ) & \" ;¶\"\n& \"$runtime = \" & "
        - GetAsNumber
        - " ( $~script.runtime ) & \" ;¶\"\n& \"$nothingToPull = \" & "
        - GetAsBoolean
        - ( $nothingToPull ) & " ;¶"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
