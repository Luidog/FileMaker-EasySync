#################################################################################
# PURPOSE:
#    Handles the deletion of records in synced tables. Logs the UUID of the record that is to be deleted, and then deletes the record. The UUIDs of deleted records are stored in the EasySync_Payloads table, and then passed to the server during the next sync (at which point they are deleted from the server as well).
#
# CONTEXT:
#
# PARAMETERS: (return-delimited list)
#    Position 1: The type of record to be deleted. "Record" or "Portal Row" are supported. This determines how the record itself is deleted (using either "Delete Record" or "Delete Portal Row"). This param is required.
#    Position 2: The "ES_Record_UUID" of the record to be deleted. This param is required.
#
# RETURNS: none
#
# VARIABLES:
#
# DEPENDENCIES:
#
# NOTES:
#    Example Parameters:example 1:"Record¶" & Surveys::ES_Record_UUID & "¶survey"example 2:"Portal Row¶" & Survey_Hobbies::ES_Record_UUID & "¶hobby"
#
# REVISIONS:
#	2015-AUG-28 Daniel Smith dansmith65@gmail.com	- Created
#################################################################################
Set Variable [ $~script.start; Value:Get ( CurrentTimeUTCMilliseconds ) ]
Set Variable [ $~script.errorType; Value:"Module: EasySync Client" ]
#
#
#
Loop
# single-pass loop for error trapping
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"SET VARIABLES" ]
#================================================================================
Set Variable [ $ErrorCaptureState; Value:Get ( ErrorCaptureState ) ]
Set Variable [ $AllowAbortState; Value:Get ( AllowAbortState ) ]
Set Variable [ $windowCount; Value:ValueCount ( WindowNames ) ]
#Get the params individually.
Set Variable [ $record_type; Value:GetValue ( Get ( ScriptParameter ) ; 1 ) ]
Set Variable [ $ES_Record_UUID; Value:GetValue ( Get ( ScriptParameter ) ; 2 ) ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"MODIFY ENVIRONMENT" ]
#================================================================================
Set Error Capture [ On ]
Allow User Abort [ Off ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"VALIDATE PARAMETERS" ]
#================================================================================
If [ IsEmpty ( $record_type )orIsEmpty ( $ES_Record_UUID ) ]
Exit Loop If [ Let ( [	theErrorCode = 2 ;	theErrorDescription = "Invalid Parameter" ;	theErrorInfo = "A required parameter was empty" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"MODIFY CONTEXT" ]
#================================================================================
#Go to the EasySync layout.
#Note that we do this in a new window so as not to lose the portal position, etc. that we were in.
New Window [ Style: Document; Close: “Yes”; Minimize: “Yes”; Maximize: “Yes”; Zoom Control Area: “Yes”; Resize: “Yes” ]
Go to Layout [ "EasySync_Payloads" ]
If [ Get ( LastError ) ]
Set Variable [ $error; Value:Let ( [	theErrorCode = Get ( LastError ) ;	theErrorDescription = "(see FileMaker documentation for the description of this error code)" ;	theErrorInfo = "after going to EasySync Payloads layout" ;	theErrorType = "Fmp"] ;	"$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶") ]
Close Window [ Current Window ]
Exit Loop If [ True ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"LOG THE DELETION" ]
#================================================================================
New Record/Request
Exit Loop If [ If ( Get ( LastError ) ;	Let ( [		theErrorCode = Get ( LastError ) ;		theErrorDescription = "(see FileMaker documentation for the description of this error code)" ;		theErrorInfo = "after New Record step" ;		theErrorType = "Fmp" ;				$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"		& "$errorCode = " & theErrorCode & " ;¶"		& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"		& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;			"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"		)		& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"		& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	] ;		True	)) ]
#
Set Field [ EasySync_Payloads::ES_Deleted_Record_UUID; $ES_Record_UUID ]
Exit Loop If [ If ( Get ( LastError ) ;	Let ( [		theErrorCode = Get ( LastError ) ;		theErrorDescription = "(see FileMaker documentation for the description of this error code)" ;		theErrorInfo = "after Set Field step" ;		theErrorType = "Fmp" ;				$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"		& "$errorCode = " & theErrorCode & " ;¶"		& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"		& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;			"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"		)		& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"		& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	] ;		True	)) ]
#
Commit Records/Requests[ Skip data entry validation; No dialog ]
Exit Loop If [ If ( Get ( LastError ) ;	Let ( [		theErrorCode = Get ( LastError ) ;		theErrorDescription = "(see FileMaker documentation for the description of this error code)" ;		theErrorInfo = "after Commit Record step" ;		theErrorType = "Fmp" ;				$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"		& "$errorCode = " & theErrorCode & " ;¶"		& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"		& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;			"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"		)		& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"		& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	] ;		True	)) ]
#
Close Window [ Current Window ]
#
#
#
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# end single-pass loop for error trapping
Exit Loop If [ True ]
End Loop
#
#
#
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"RESTORE CONTEXT" ]
#================================================================================
If [ /* if more windows are open now, than at the start of this script */ValueCount ( WindowNames ) > $windowCount ]
Close Window [ Current Window ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"RESTORE ENVIRONMENT" ]
#================================================================================
If [ not $ErrorCaptureState ]
Set Error Capture [ Off ]
End If
If [ $AllowAbortState ]
Allow User Abort [ On ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"HANDLE ERROR" ]
#================================================================================
Set Variable [ $~script.runtime; Value:( Get ( CurrentTimeUTCMilliseconds ) - $~script.start ) / 1000 ]
If [ /** * assign error info to local variables * then evaluate the errorCode as a Boolean *  */GetAsBoolean ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; $errorCode )") ) ]
If [ $errorCode = 1 ]
#User canceled action
Else If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 2 ;	~message = "exit script with error"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$error = " & Quote ( $error ) & " ;¶"	& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶") ]
End If
Else If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "exit script without error"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶") ]
End If
#
#
#
Set Variable [ $!; Value:""/** * This is a step that will not return an error. * * It's used to clear any errors reported by Get ( LastError ), so a calling script can use * Get ( LastError ) to test if an error occurred with the Perform Script step. * */ ]
Exit Script [  ]
#


---
Script:
  includeInMenu: 'False'
  runFullAccess: 'False'
  id: '88'
  name: 'EasySync Client: API: Delete Record'
  StepList:
    Step:
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#################################################################################'
      Text: '################################################################################'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PURPOSE:'
      Text: ' PURPOSE:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    Handles the deletion of records in synced tables. Logs the UUID
        of the record that is to be deleted, and then deletes the record. The UUIDs
        of deleted records are stored in the EasySync_Payloads table, and then passed
        to the server during the next sync (at which point they are deleted from the
        server as well).'
      Text: '    Handles the deletion of records in synced tables. Logs the UUID of
        the record that is to be deleted, and then deletes the record. The UUIDs of
        deleted records are stored in the EasySync_Payloads table, and then passed
        to the server during the next sync (at which point they are deleted from the
        server as well).'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# CONTEXT:'
      Text: ' CONTEXT:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PARAMETERS: (return-delimited list)'
      Text: ' PARAMETERS: (return-delimited list)'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    Position 1: The type of record to be deleted. "Record" or "Portal
        Row" are supported. This determines how the record itself is deleted (using
        either "Delete Record" or "Delete Portal Row"). This param is required.'
      Text: '    Position 1: The type of record to be deleted. "Record" or "Portal
        Row" are supported. This determines how the record itself is deleted (using
        either "Delete Record" or "Delete Portal Row"). This param is required.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    Position 2: The "ES_Record_UUID" of the record to be deleted.
        This param is required.'
      Text: '    Position 2: The "ES_Record_UUID" of the record to be deleted. This
        param is required.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# RETURNS: none'
      Text: ' RETURNS: none'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# VARIABLES:'
      Text: ' VARIABLES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# DEPENDENCIES:'
      Text: ' DEPENDENCIES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# NOTES:'
      Text: ' NOTES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: |-
        #    Example Parameters:

        example 1:
        "Record¶" & Surveys::ES_Record_UUID & "¶survey"

        example 2:
        "Portal Row¶" & Survey_Hobbies::ES_Record_UUID & "¶hobby"
      Text: |2-
            Example Parameters:

        example 1:
        "Record¶" & Surveys::ES_Record_UUID & "¶survey"

        example 2:
        "Portal Row¶" & Survey_Hobbies::ES_Record_UUID & "¶hobby"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# REVISIONS:'
      Text: ' REVISIONS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: "#\t\n2015-AUG-28 Daniel Smith dansmith65@gmail.com\n\t- Created"
      Text: "\t\n2015-AUG-28 Daniel Smith dansmith65@gmail.com\n\t- Created"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#################################################################################'
      Text: '################################################################################'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.start; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.start
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: 'Set Variable [ $~script.errorType; Value:"Module: EasySync Client"
        ]'
      Value:
        Calculation: '"Module: EasySync Client"'
        DisplayCalculation:
          Chunk: '"Module: EasySync Client"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.errorType
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# single-pass loop for error trapping'
      Text: ' single-pass loop for error trapping'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
      Text: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"SET VARIABLES" ]
      Value:
        Calculation: '"SET VARIABLES"'
        DisplayCalculation:
          Chunk: '"SET VARIABLES"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $ErrorCaptureState; Value:Get ( ErrorCaptureState )
        ]
      Value:
        Calculation: Get ( ErrorCaptureState )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - ErrorCaptureState
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $ErrorCaptureState
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $AllowAbortState; Value:Get ( AllowAbortState ) ]
      Value:
        Calculation: Get ( AllowAbortState )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - AllowAbortState
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $AllowAbortState
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $windowCount; Value:ValueCount ( WindowNames ) ]
      Value:
        Calculation: ValueCount ( WindowNames )
        DisplayCalculation:
          Chunk:
          - ValueCount
          - ' ( '
          - WindowNames
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $windowCount
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the params individually.'
      Text: Get the params individually.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $record_type; Value:GetValue ( Get ( ScriptParameter
        ) ; 1 ) ]
      Value:
        Calculation: GetValue ( Get ( ScriptParameter ) ; 1 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Get
          - ' ( '
          - ScriptParameter
          - ' ) ; 1 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $record_type
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $ES_Record_UUID; Value:GetValue ( Get ( ScriptParameter
        ) ; 2 ) ]
      Value:
        Calculation: GetValue ( Get ( ScriptParameter ) ; 2 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Get
          - ' ( '
          - ScriptParameter
          - ' ) ; 2 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $ES_Record_UUID
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"MODIFY ENVIRONMENT" ]
      Value:
        Calculation: '"MODIFY ENVIRONMENT"'
        DisplayCalculation:
          Chunk: '"MODIFY ENVIRONMENT"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '86'
      name: Set Error Capture
      StepText: Set Error Capture [ On ]
      Set:
        state: 'True'
    - enable: 'True'
      id: '85'
      name: Allow User Abort
      StepText: Allow User Abort [ Off ]
      Set:
        state: 'False'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"VALIDATE PARAMETERS" ]
      Value:
        Calculation: '"VALIDATE PARAMETERS"'
        DisplayCalculation:
          Chunk: '"VALIDATE PARAMETERS"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: |-
        If [ IsEmpty ( $record_type )
        or
        IsEmpty ( $ES_Record_UUID ) ]
      Calculation: |-
        IsEmpty ( $record_type )
        or
        IsEmpty ( $ES_Record_UUID )
      DisplayCalculation:
        Chunk:
        - IsEmpty
        - |2
           ( $record_type )
        - or
        - type: NoRef
          __content__: |2+

        - IsEmpty
        - ' ( $ES_Record_UUID )'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription
        = \"Invalid Parameter\" ;\n\ttheErrorInfo = \"A required parameter was empty\"
        ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType = \"
        & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode &
        \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) & \"
        ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription = \"Invalid
        Parameter\" ;\n\ttheErrorInfo = \"A required parameter was empty\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription = \"Invalid Parameter\"
          ;\n\ttheErrorInfo = \"A required parameter was empty\" ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"MODIFY CONTEXT" ]
      Value:
        Calculation: '"MODIFY CONTEXT"'
        DisplayCalculation:
          Chunk: '"MODIFY CONTEXT"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Go to the EasySync layout.'
      Text: Go to the EasySync layout.
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Note that we do this in a new window so as not to lose the portal
        position, etc. that we were in.'
      Text: Note that we do this in a new window so as not to lose the portal position,
        etc. that we were in.
    - enable: 'True'
      id: '122'
      name: New Window
      StepText: 'New Window [ Style: Document; Close: “Yes”; Minimize: “Yes”; Maximize:
        “Yes”; Zoom Control Area: “Yes”; Resize: “Yes” ]'
    - enable: 'True'
      id: '6'
      name: Go to Layout
      StepText: Go to Layout [ "EasySync_Payloads" ]
      LayoutDestination:
        value: LayoutNameByCalc
      Layout:
        Calculation: '"EasySync_Payloads"'
        DisplayCalculation:
          Chunk: '"EasySync_Payloads"'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( LastError ) ]
      Calculation: Get ( LastError )
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - LastError
        - ' )'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $error; Value:Let ( [\n\ttheErrorCode = Get ( LastError
        ) ;\n\ttheErrorDescription = \"(see FileMaker documentation for the description
        of this error code)\" ;\n\ttheErrorInfo = \"after going to EasySync Payloads
        layout\" ;\n\ttheErrorType = \"Fmp\"\n] ;\n\t\"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n)
        ]"
      Value:
        Calculation: "Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
          = \"(see FileMaker documentation for the description of this error code)\"
          ;\n\ttheErrorInfo = \"after going to EasySync Payloads layout\" ;\n\ttheErrorType
          = \"Fmp\"\n] ;\n\t\"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t&
          \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \"
          & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
          ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
          ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) )
          & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter )
          ) & \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) &
          \" ;¶\"\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( [\n\ttheErrorCode = "
          - Get
          - ' ( '
          - LastError
          - " ) ;\n\ttheErrorDescription = \"(see FileMaker documentation for the
            description of this error code)\" ;\n\ttheErrorInfo = \"after going to
            EasySync Payloads layout\" ;\n\ttheErrorType = \"Fmp\"\n] ;\n\t\"$errorType
            = \" & "
          - Quote
          - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
            ;¶\"\n\t& \"$errorDescription = \" & "
          - Quote
          - " ( theErrorDescription ) & \" ;¶\"\n\t& "
          - If
          - ' ( '
          - not
          - type: NoRef
            __content__: ' '
          - IsEmpty
          - ' ( theErrorInfo ) '
          - and
          - type: NoRef
            __content__: ' '
          - GetAsBoolean
          - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
          - Quote
          - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
          - Quote
          - ' ( '
          - Get
          - ' ( '
          - ScriptName
          - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
          - Quote
          - ' ( '
          - Get
          - ' ( '
          - ScriptParameter
          - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
          - Quote
          - |2-
             ( $~script.section ) & " ;¶"
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $error
    - enable: 'True'
      id: '121'
      name: Close Window
      StepText: Close Window [ Current Window ]
      LimitToWindowsOfCurrentFile:
        state: 'True'
      Window:
        value: Current
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ True ]
      Calculation: 'True'
      DisplayCalculation:
        Chunk: 'True'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"LOG THE DELETION" ]
      Value:
        Calculation: '"LOG THE DELETION"'
        DisplayCalculation:
          Chunk: '"LOG THE DELETION"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '7'
      name: New Record/Request
      StepText: New Record/Request
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode
        = Get ( LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation
        for the description of this error code)\" ;\n\t\ttheErrorInfo = \"after New
        Record step\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType
        = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription )
        & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n) ]"
      Calculation: "If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode = Get (
        LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for
        the description of this error code)\" ;\n\t\ttheErrorInfo = \"after New Record
        step\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType =
        \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription )
        & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n)"
      DisplayCalculation:
        Chunk:
        - If
        - ' ( '
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t"
        - Let
        - " ( [\n\t\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for the
          description of this error code)\" ;\n\t\ttheErrorInfo = \"after New Record
          step\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType
          = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\t"
        - 'True'
        - "\n\t)\n)"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '76'
      name: Set Field
      StepText: Set Field [ EasySync_Payloads::ES_Deleted_Record_UUID; $ES_Record_UUID
        ]
      Calculation: $ES_Record_UUID
      DisplayCalculation:
        Chunk: $ES_Record_UUID
      Field:
        table: EasySync_Payloads
        id: '17'
        name: ES_Deleted_Record_UUID
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode
        = Get ( LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation
        for the description of this error code)\" ;\n\t\ttheErrorInfo = \"after Set
        Field step\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType
        = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription )
        & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n) ]"
      Calculation: "If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode = Get (
        LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for
        the description of this error code)\" ;\n\t\ttheErrorInfo = \"after Set Field
        step\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType =
        \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription )
        & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n)"
      DisplayCalculation:
        Chunk:
        - If
        - ' ( '
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t"
        - Let
        - " ( [\n\t\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for the
          description of this error code)\" ;\n\t\ttheErrorInfo = \"after Set Field
          step\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType
          = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\t"
        - 'True'
        - "\n\t)\n)"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '75'
      name: Commit Records/Requests
      StepText: |-
        Commit Records/Requests
        [ Skip data entry validation; No dialog ]
      NoInteract:
        state: 'True'
      Option:
        state: 'True'
      ESSForceCommit:
        state: 'False'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode
        = Get ( LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation
        for the description of this error code)\" ;\n\t\ttheErrorInfo = \"after Commit
        Record step\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType
        = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription )
        & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n) ]"
      Calculation: "If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode = Get (
        LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for
        the description of this error code)\" ;\n\t\ttheErrorInfo = \"after Commit
        Record step\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType
        = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription )
        & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n)"
      DisplayCalculation:
        Chunk:
        - If
        - ' ( '
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t"
        - Let
        - " ( [\n\t\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for the
          description of this error code)\" ;\n\t\ttheErrorInfo = \"after Commit Record
          step\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType
          = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\t"
        - 'True'
        - "\n\t)\n)"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '121'
      name: Close Window
      StepText: Close Window [ Current Window ]
      LimitToWindowsOfCurrentFile:
        state: 'True'
      Window:
        value: Current
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'
      Text: ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# end single-pass loop for error trapping'
      Text: ' end single-pass loop for error trapping'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ True ]
      Calculation: 'True'
      DisplayCalculation:
        Chunk: 'True'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"RESTORE CONTEXT" ]
      Value:
        Calculation: '"RESTORE CONTEXT"'
        DisplayCalculation:
          Chunk: '"RESTORE CONTEXT"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: |-
        If [ /* if more windows are open now, than at the start of this script */

        ValueCount ( WindowNames ) > $windowCount ]
      Calculation: |-
        /* if more windows are open now, than at the start of this script */

        ValueCount ( WindowNames ) > $windowCount
      DisplayCalculation:
        Chunk:
        - |+
          /* if more windows are open now, than at the start of this script */

        - ValueCount
        - ' ( '
        - WindowNames
        - ' ) > $windowCount'
    - enable: 'True'
      id: '121'
      name: Close Window
      StepText: Close Window [ Current Window ]
      LimitToWindowsOfCurrentFile:
        state: 'True'
      Window:
        value: Current
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"RESTORE ENVIRONMENT" ]
      Value:
        Calculation: '"RESTORE ENVIRONMENT"'
        DisplayCalculation:
          Chunk: '"RESTORE ENVIRONMENT"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ not $ErrorCaptureState ]
      Calculation: not $ErrorCaptureState
      DisplayCalculation:
        Chunk:
        - not
        - ' $ErrorCaptureState'
    - enable: 'True'
      id: '86'
      name: Set Error Capture
      StepText: Set Error Capture [ Off ]
      Set:
        state: 'False'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $AllowAbortState ]
      Calculation: $AllowAbortState
      DisplayCalculation:
        Chunk: $AllowAbortState
    - enable: 'True'
      id: '85'
      name: Allow User Abort
      StepText: Allow User Abort [ On ]
      Set:
        state: 'True'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"HANDLE ERROR" ]
      Value:
        Calculation: '"HANDLE ERROR"'
        DisplayCalculation:
          Chunk: '"HANDLE ERROR"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.runtime; Value:( Get ( CurrentTimeUTCMilliseconds
        ) - $~script.start ) / 1000 ]
      Value:
        Calculation: ( Get ( CurrentTimeUTCMilliseconds ) - $~script.start ) / 1000
        DisplayCalculation:
          Chunk:
          - '( '
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $~script.start ) / 1000'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.runtime
    - enable: 'True'
      id: '68'
      name: If
      StepText: "If [ /**\n * assign error info to local variables\n * then evaluate
        the errorCode as a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let
        ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n) ) ]"
      Calculation: "/**\n * assign error info to local variables\n * then evaluate
        the errorCode as a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let
        ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n) )"
      DisplayCalculation:
        Chunk:
        - "/**\n * assign error info to local variables\n * then evaluate the errorCode
          as a Boolean\n * \n */\n\n"
        - GetAsBoolean
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n)
          )"
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $errorCode = 1 ]
      Calculation: $errorCode = 1
      DisplayCalculation:
        Chunk: $errorCode = 1
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#User canceled action'
      Text: User canceled action
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error = \" & Quote ( $error ) & \" ;¶\"\n\t&
        \"$runtime = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error
        = \" & Quote ( $error ) & \" ;¶\"\n\t& \"$runtime = \" & GetAsNumber ( $~script.runtime
        ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n] ;\n\t\"$LogLevel
          = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error = \" & "
        - Quote
        - " ( $error ) & \" ;¶\"\n\t& \"$runtime = \" & "
        - GetAsNumber
        - |2-
           ( $~script.runtime ) & " ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"exit script without error\"\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime
        = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"exit script without
        error\"\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime
        = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"exit script without error\"\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime = \" & "
        - GetAsNumber
        - |2-
           ( $~script.runtime ) & " ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $!; Value:""
        /**
         * This is a step that will not return an error.
         *
         * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
         * Get ( LastError ) to test if an error occurred with the Perform Script step.
         *
         */ ]
      Value:
        Calculation: |-
          ""
          /**
           * This is a step that will not return an error.
           *
           * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
           * Get ( LastError ) to test if an error occurred with the Perform Script step.
           *
           */
        DisplayCalculation:
          Chunk: |-
            ""
            /**
             * This is a step that will not return an error.
             *
             * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
             * Get ( LastError ) to test if an error occurred with the Perform Script step.
             *
             */
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $!
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: Exit Script [  ]
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
