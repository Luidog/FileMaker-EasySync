#################################################################################
# PURPOSE:
#    Handles the deletion of records in synced tables. Logs the UUID of the record that is to be deleted, and then deletes the record. The UUIDs of deleted records are stored in the EasySync_Payloads table, and then passed to the server during the next sync (at which point they are deleted from the server as well).
#
# CONTEXT:
#
# PARAMETERS: (return-delimited list)
#    Position 1: The type of record to be deleted. "Record" or "Portal Row" are supported. This determines how the record itself is deleted (using either "Delete Record" or "Delete Portal Row"). This param is required.
#    Position 2: The "ES_Record_UUID" of the record to be deleted. This param is required.
#    Position 3: The word to use to describe the object to be deleted. ex: "Survey Document." This is an optional param.
#
# RETURNS: none
#
# VARIABLES:
#
# DEPENDENCIES:
#
# NOTES:
#    Example Parameters:example 1:"Record¶" & Surveys::ES_Record_UUID & "¶survey"example 2:"Portal Row¶" & Survey_Hobbies::ES_Record_UUID & "¶hobby"
#
# REVISIONS:
#    2014-04-30	Tim Dietrich (timdietrich@me.com)	Initial version. I tried to avoid having to require params for this, but haven't found a way 	to determine in what context the script has been called. In other words, I can't tell whether the 	script has been called in such a way that a record is to be deleted, or if a portal row is to be 	deleted. Additionally, in the case of a portal row, I can't determine what the the ES_Record_UUID.2014-05-05	Tim Dietrich (timdietrich@me.com)	Added step to load ES settings.
#################################################################################
Set Variable [ $~script.start; Value:Get ( CurrentTimeUTCMilliseconds ) ]
Set Variable [ $~script.errorType; Value:"Module: EasySync Client" ]
#
#
#
Loop
# single-pass loop for error trapping
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"LOAD SETTINGS" ]
#================================================================================
Perform Script [ “EasySync Client: Config: Load” ]
If [ Get ( LastError ) ]
Exit Loop If [ Let ( [	theErrorCode = Get ( LastError ) ;	theErrorDescription = "FileMaker Error" ;	theErrorInfo = "section: " & $~script.section & ". Make sure the perform script step calls the correct script and the user has permission to run it." ;	theErrorType = "Fmp" ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 5 ;	~message = "start script"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"SET VARIABLES" ]
#================================================================================
#Get the params individually.
Set Variable [ $record_type; Value:GetValue ( Get ( ScriptParameter ) ; 1 ) ]
Set Variable [ $object_name; Value:If ( ValueCount ( Get ( ScriptParameter ) ) = 3 ;	GetValue ( Get ( ScriptParameter ) ; 3 ) ;	If ( $record_type = "Portal Row"; "related record"; "record" )) ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"ASK BEFORE DELETION" ]
#================================================================================
#If we're to ask the user to confirm the deletion...
If [ $$ask_before_deleting ]
Show Custom Dialog [ Title: "Delete " & $object_name & "?"; Message: "Do you really want to delete this " & $object_name & "?"; Default Button: “No”, Commit: “Yes”; Button 2: “Yes”, Commit: “No” ]
If [ Get ( LastMessageChoice ) = 1 ]
Exit Loop If [ Let ( [	theErrorCode = 1 ;	theErrorDescription = "User canceled action" ;	theErrorInfo = "" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"CALL API SCRIPT" ]
#================================================================================
Perform Script [ “EasySync Client: API: Delete Record”; Parameter: Get ( ScriptParameter ) ]
If [ Get ( LastError ) ]
Exit Loop If [ Let ( [	theErrorCode = Get ( LastError ) ;	theErrorDescription = "FileMaker Error" ;	theErrorInfo = "section: " & $~script.section & ". Make sure the perform script step calls the correct script and the user has permission to run it." ;	theErrorType = "Fmp" ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign script result to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& Get ( ScriptResult )	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ /* assign subscript error info to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 19 ;	theErrorDescription = "Invalid script result " ;	theErrorInfo = "section: " & $~script.section & ". $error could not be evaluated.";	theErrorInfo = "after performing script: '" & $~script.subscript & "'. $error could not be evaluated." ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
Else If [ $errorCode ]
Exit Loop If [ /* subscript error has been saved to local variable(s) */Let ( [	/* add the current script's name to a list of scripts that triggered this error */	~scriptStack = List (		Get ( ScriptName ) ;		If ( IsEmpty ( $scriptStack ) ;			/* start the stack off with the script's name that triggered the error */			$ScriptName ;			$scriptStack		)	) ;	/* append this data to the error */	$error =		$error		& "$scriptStack = " & Quote ( ~scriptStack ) & " ;¶"] ;	True) ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"DELETE RECORD OR PORTAL ROW" ]
#================================================================================
If [ $record_type = "record" ]
Delete Record/Request[ No dialog ]
Else If [ $record_type = "Portal Row" ]
Delete Portal Row[ No dialog ]
Else
Exit Loop If [ Let ( [	theErrorCode = 2 ;	theErrorDescription = "Invalid Parameter" ;	theErrorInfo = "record_type was not valid (must be 'Record' or 'Portal Row'" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
#
#
#
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# end single-pass loop for error trapping
Exit Loop If [ True ]
End Loop
#
#
#
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"HANDLE ERROR" ]
#================================================================================
Set Variable [ $~script.runtime; Value:( Get ( CurrentTimeUTCMilliseconds ) - $~script.start ) / 1000 ]
If [ /** * assign error info to local variables * then evaluate the errorCode as a Boolean *  */GetAsBoolean ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; $errorCode )") ) ]
If [ $errorCode = 1 ]
#User canceled action
Else If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2 ]
Show Custom Dialog [ Title: "ERROR"; Message: List (	"type: " & $errorType ;	"code: " & $errorCode ;	"description: " & $errorDescription ;	If ( not IsEmpty ( $errorInfo ) ;		"info: " & $errorInfo	)); Default Button: “Cancel”, Commit: “Yes” ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 2 ;	~message = "exit script with error"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$error = " & Quote ( $error ) & " ;¶"	& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶") ]
End If
Else If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5 ]
Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 5 ;	~message = "exit script without error"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶") ]
End If
#
#
#
Set Variable [ $!; Value:""/** * This is a step that will not return an error. * * It's used to clear any errors reported by Get ( LastError ), so a calling script can use * Get ( LastError ) to test if an error occurred with the Perform Script step. * */ ]
Exit Script [  ]
#


---
Script:
  includeInMenu: 'False'
  runFullAccess: 'False'
  id: '44'
  name: 'EasySync Client: Button: Delete Record'
  StepList:
    Step:
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#################################################################################'
      Text: '################################################################################'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PURPOSE:'
      Text: ' PURPOSE:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    Handles the deletion of records in synced tables. Logs the UUID
        of the record that is to be deleted, and then deletes the record. The UUIDs
        of deleted records are stored in the EasySync_Payloads table, and then passed
        to the server during the next sync (at which point they are deleted from the
        server as well).'
      Text: '    Handles the deletion of records in synced tables. Logs the UUID of
        the record that is to be deleted, and then deletes the record. The UUIDs of
        deleted records are stored in the EasySync_Payloads table, and then passed
        to the server during the next sync (at which point they are deleted from the
        server as well).'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# CONTEXT:'
      Text: ' CONTEXT:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PARAMETERS: (return-delimited list)'
      Text: ' PARAMETERS: (return-delimited list)'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    Position 1: The type of record to be deleted. "Record" or "Portal
        Row" are supported. This determines how the record itself is deleted (using
        either "Delete Record" or "Delete Portal Row"). This param is required.'
      Text: '    Position 1: The type of record to be deleted. "Record" or "Portal
        Row" are supported. This determines how the record itself is deleted (using
        either "Delete Record" or "Delete Portal Row"). This param is required.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    Position 2: The "ES_Record_UUID" of the record to be deleted.
        This param is required.'
      Text: '    Position 2: The "ES_Record_UUID" of the record to be deleted. This
        param is required.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    Position 3: The word to use to describe the object to be deleted.
        ex: "Survey Document." This is an optional param.'
      Text: '    Position 3: The word to use to describe the object to be deleted.
        ex: "Survey Document." This is an optional param.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# RETURNS: none'
      Text: ' RETURNS: none'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# VARIABLES:'
      Text: ' VARIABLES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# DEPENDENCIES:'
      Text: ' DEPENDENCIES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# NOTES:'
      Text: ' NOTES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: |-
        #    Example Parameters:

        example 1:
        "Record¶" & Surveys::ES_Record_UUID & "¶survey"

        example 2:
        "Portal Row¶" & Survey_Hobbies::ES_Record_UUID & "¶hobby"
      Text: |2-
            Example Parameters:

        example 1:
        "Record¶" & Surveys::ES_Record_UUID & "¶survey"

        example 2:
        "Portal Row¶" & Survey_Hobbies::ES_Record_UUID & "¶hobby"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# REVISIONS:'
      Text: ' REVISIONS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: "#    \n2014-04-30\n\tTim Dietrich (timdietrich@me.com)\n\tInitial
        version. I tried to avoid having to require params for this, but haven't found
        a way \n\tto determine in what context the script has been called. In other
        words, I can't tell whether the \n\tscript has been called in such a way that
        a record is to be deleted, or if a portal row is to be \n\tdeleted. Additionally,
        in the case of a portal row, I can't determine what the the ES_Record_UUID.\n\n2014-05-05\n\tTim
        Dietrich (timdietrich@me.com)\n\tAdded step to load ES settings."
      Text: "    \n2014-04-30\n\tTim Dietrich (timdietrich@me.com)\n\tInitial version.
        I tried to avoid having to require params for this, but haven't found a way
        \n\tto determine in what context the script has been called. In other words,
        I can't tell whether the \n\tscript has been called in such a way that a record
        is to be deleted, or if a portal row is to be \n\tdeleted. Additionally, in
        the case of a portal row, I can't determine what the the ES_Record_UUID.\n\n2014-05-05\n\tTim
        Dietrich (timdietrich@me.com)\n\tAdded step to load ES settings."
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#################################################################################'
      Text: '################################################################################'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.start; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.start
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: 'Set Variable [ $~script.errorType; Value:"Module: EasySync Client"
        ]'
      Value:
        Calculation: '"Module: EasySync Client"'
        DisplayCalculation:
          Chunk: '"Module: EasySync Client"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.errorType
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# single-pass loop for error trapping'
      Text: ' single-pass loop for error trapping'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
      Text: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"LOAD SETTINGS" ]
      Value:
        Calculation: '"LOAD SETTINGS"'
        DisplayCalculation:
          Chunk: '"LOAD SETTINGS"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: Config: Load” ]'
      Script:
        id: '29'
        name: 'EasySync Client: Config: Load'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( LastError ) ]
      Calculation: Get ( LastError )
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - LastError
        - ' )'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\ttheErrorDescription = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section:
          \" & $~script.section & \". Make sure the perform script step calls the
          correct script and the user has permission to run it.\" ;\n\ttheErrorType
          = \"Fmp\" ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 5 ;\n\t~message = \"start script\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 5 ;\n\t~message = \"start script\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 5 ;\n\t~message = \"start script\"\n] ;\n\t\"$LogLevel
          = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"SET VARIABLES" ]
      Value:
        Calculation: '"SET VARIABLES"'
        DisplayCalculation:
          Chunk: '"SET VARIABLES"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the params individually.'
      Text: Get the params individually.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $record_type; Value:GetValue ( Get ( ScriptParameter
        ) ; 1 ) ]
      Value:
        Calculation: GetValue ( Get ( ScriptParameter ) ; 1 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Get
          - ' ( '
          - ScriptParameter
          - ' ) ; 1 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $record_type
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $object_name; Value:If ( ValueCount ( Get ( ScriptParameter
        ) ) = 3 ;\n\tGetValue ( Get ( ScriptParameter ) ; 3 ) ;\n\tIf ( $record_type
        = \"Portal Row\"; \"related record\"; \"record\" )\n) ]"
      Value:
        Calculation: "If ( ValueCount ( Get ( ScriptParameter ) ) = 3 ;\n\tGetValue
          ( Get ( ScriptParameter ) ; 3 ) ;\n\tIf ( $record_type = \"Portal Row\";
          \"related record\"; \"record\" )\n)"
        DisplayCalculation:
          Chunk:
          - If
          - ' ( '
          - ValueCount
          - ' ( '
          - Get
          - ' ( '
          - ScriptParameter
          - " ) ) = 3 ;\n\t"
          - GetValue
          - ' ( '
          - Get
          - ' ( '
          - ScriptParameter
          - " ) ; 3 ) ;\n\t"
          - If
          - |2-
             ( $record_type = "Portal Row"; "related record"; "record" )
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $object_name
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"ASK BEFORE DELETION" ]
      Value:
        Calculation: '"ASK BEFORE DELETION"'
        DisplayCalculation:
          Chunk: '"ASK BEFORE DELETION"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If we''re to ask the user to confirm the deletion...'
      Text: If we're to ask the user to confirm the deletion...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$ask_before_deleting ]
      Calculation: $$ask_before_deleting
      DisplayCalculation:
        Chunk: $$ask_before_deleting
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: "Delete " & $object_name & "?"; Message:
        "Do you really want to delete this " & $object_name & "?"; Default Button:
        “No”, Commit: “Yes”; Button 2: “Yes”, Commit: “No” ]'
      Title:
        Calculation: '"Delete " & $object_name & "?"'
        DisplayCalculation:
          Chunk: '"Delete " & $object_name & "?"'
      Message:
        Calculation: '"Do you really want to delete this " & $object_name & "?"'
        DisplayCalculation:
          Chunk: '"Do you really want to delete this " & $object_name & "?"'
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"No"'
          DisplayCalculation:
            Chunk: '"No"'
        - CommitState: 'False'
          Calculation: '"Yes"'
          DisplayCalculation:
            Chunk: '"Yes"'
        - CommitState: 'False'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( LastMessageChoice ) = 1 ]
      Calculation: Get ( LastMessageChoice ) = 1
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - LastMessageChoice
        - ' ) = 1'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 1 ;\n\ttheErrorDescription
        = \"User canceled action\" ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType = $~script.errorType
        ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" &
        Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = 1 ;\n\ttheErrorDescription = \"User
        canceled action\" ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType = $~script.errorType
        ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" &
        Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 1 ;\n\ttheErrorDescription = \"User canceled action\"
          ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error
          = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"CALL API SCRIPT" ]
      Value:
        Calculation: '"CALL API SCRIPT"'
        DisplayCalculation:
          Chunk: '"CALL API SCRIPT"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Client: API: Delete Record”; Parameter:
        Get ( ScriptParameter ) ]'
      Calculation: Get ( ScriptParameter )
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - ScriptParameter
        - ' )'
      Script:
        id: '88'
        name: 'EasySync Client: API: Delete Record'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( LastError ) ]
      Calculation: Get ( LastError )
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - LastError
        - ' )'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = Get ( LastError ) ;\n\ttheErrorDescription
        = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". Make sure the perform script step calls the correct script and the user
        has permission to run it.\" ;\n\ttheErrorType = \"Fmp\" ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\ttheErrorDescription = \"FileMaker Error\" ;\n\ttheErrorInfo = \"section:
          \" & $~script.section & \". Make sure the perform script step calls the
          correct script and the user has permission to run it.\" ;\n\ttheErrorType
          = \"Fmp\" ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) ) ]"
      Calculation: "/* assign script result to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptResult )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign script result to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& "
        - Get
        - ' ( '
        - ScriptResult
        - " )\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n) )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType = \"
        & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode &
        \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) & \"
        ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" &
        Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t& \"$~script.section = \" & Quote
        ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: "Else If [ /* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) ) ]"
      Calculation: "/* assign subscript error info to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\"
        )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign subscript error info to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n)
          )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription
        = \"Invalid script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section
        & \". $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing
        script: '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)
        ]"
      Calculation: "Let ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid
        script result \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \".
        $error could not be evaluated.\";\n\ttheErrorInfo = \"after performing script:
        '\" & $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$ScriptResult = \" & Quote ( Get ( ScriptResult ) ) & \" ;¶\"\n\t&
        \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 19 ;\n\ttheErrorDescription = \"Invalid script result
          \" ;\n\ttheErrorInfo = \"section: \" & $~script.section & \". $error could
          not be evaluated.\";\n\ttheErrorInfo = \"after performing script: '\" &
          $~script.subscript & \"'. $error could not be evaluated.\" ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$ScriptResult = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $errorCode ]
      Calculation: $errorCode
      DisplayCalculation:
        Chunk: $errorCode
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /* subscript error has been saved to local variable(s)
        */\n\nLet ( [\n\t/* add the current script's name to a list of scripts that
        triggered this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf
        ( IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "/* subscript error has been saved to local variable(s) */\n\nLet
        ( [\n\t/* add the current script's name to a list of scripts that triggered
        this error */\n\t~scriptStack = List (\n\t\tGet ( ScriptName ) ;\n\t\tIf (
        IsEmpty ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's
        name that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
        ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
        \"$scriptStack = \" & Quote ( ~scriptStack ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - |+
          /* subscript error has been saved to local variable(s) */

        - Let
        - " ( [\n\t/* add the current script's name to a list of scripts that triggered
          this error */\n\t~scriptStack = "
        - List
        - " (\n\t\t"
        - Get
        - ' ( '
        - ScriptName
        - " ) ;\n\t\t"
        - If
        - ' ( '
        - IsEmpty
        - " ( $scriptStack ) ;\n\t\t\t/* start the stack off with the script's name
          that triggered the error */\n\t\t\t$ScriptName ;\n\t\t\t$scriptStack\n\t\t)\n\t)
          ;\n\n\t/* append this data to the error */\n\t$error =\n\t\t$error\n\t\t&
          \"$scriptStack = \" & "
        - Quote
        - " ( ~scriptStack ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"DELETE RECORD OR PORTAL ROW"
        ]
      Value:
        Calculation: '"DELETE RECORD OR PORTAL ROW"'
        DisplayCalculation:
          Chunk: '"DELETE RECORD OR PORTAL ROW"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $record_type = "record" ]
      Calculation: $record_type = "record"
      DisplayCalculation:
        Chunk: $record_type = "record"
    - enable: 'True'
      id: '9'
      name: Delete Record/Request
      StepText: |-
        Delete Record/Request
        [ No dialog ]
      NoInteract:
        state: 'True'
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $record_type = "Portal Row" ]
      Calculation: $record_type = "Portal Row"
      DisplayCalculation:
        Chunk: $record_type = "Portal Row"
    - enable: 'True'
      id: '104'
      name: Delete Portal Row
      StepText: |-
        Delete Portal Row
        [ No dialog ]
      NoInteract:
        state: 'True'
    - enable: 'True'
      id: '69'
      name: Else
      StepText: Else
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription
        = \"Invalid Parameter\" ;\n\ttheErrorInfo = \"record_type was not valid (must
        be 'Record' or 'Portal Row'\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error
        = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode =
        \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription = \"Invalid
        Parameter\" ;\n\ttheErrorInfo = \"record_type was not valid (must be 'Record'
        or 'Portal Row'\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error =
        \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \"
        & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription = \"Invalid Parameter\"
          ;\n\ttheErrorInfo = \"record_type was not valid (must be 'Record' or 'Portal
          Row'\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType
          = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'
      Text: ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# end single-pass loop for error trapping'
      Text: ' end single-pass loop for error trapping'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ True ]
      Calculation: 'True'
      DisplayCalculation:
        Chunk: 'True'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"HANDLE ERROR" ]
      Value:
        Calculation: '"HANDLE ERROR"'
        DisplayCalculation:
          Chunk: '"HANDLE ERROR"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.runtime; Value:( Get ( CurrentTimeUTCMilliseconds
        ) - $~script.start ) / 1000 ]
      Value:
        Calculation: ( Get ( CurrentTimeUTCMilliseconds ) - $~script.start ) / 1000
        DisplayCalculation:
          Chunk:
          - '( '
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $~script.start ) / 1000'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.runtime
    - enable: 'True'
      id: '68'
      name: If
      StepText: "If [ /**\n * assign error info to local variables\n * then evaluate
        the errorCode as a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let
        ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n) ) ]"
      Calculation: "/**\n * assign error info to local variables\n * then evaluate
        the errorCode as a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let
        ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n) )"
      DisplayCalculation:
        Chunk:
        - "/**\n * assign error info to local variables\n * then evaluate the errorCode
          as a Boolean\n * \n */\n\n"
        - GetAsBoolean
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n)
          )"
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $errorCode = 1 ]
      Calculation: $errorCode = 1
      DisplayCalculation:
        Chunk: $errorCode = 1
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#User canceled action'
      Text: User canceled action
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 2
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: "Show Custom Dialog [ Title: \"ERROR\"; Message: List (\n\t\"type:
        \" & $errorType ;\n\t\"code: \" & $errorCode ;\n\t\"description: \" & $errorDescription
        ;\n\tIf ( not IsEmpty ( $errorInfo ) ;\n\t\t\"info: \" & $errorInfo\n\t)\n);
        Default Button: “Cancel”, Commit: “Yes” ]"
      Title:
        Calculation: '"ERROR"'
        DisplayCalculation:
          Chunk: '"ERROR"'
      Message:
        Calculation: "List (\n\t\"type: \" & $errorType ;\n\t\"code: \" & $errorCode
          ;\n\t\"description: \" & $errorDescription ;\n\tIf ( not IsEmpty ( $errorInfo
          ) ;\n\t\t\"info: \" & $errorInfo\n\t)\n)"
        DisplayCalculation:
          Chunk:
          - List
          - " (\n\t\"type: \" & $errorType ;\n\t\"code: \" & $errorCode ;\n\t\"description:
            \" & $errorDescription ;\n\t"
          - If
          - ' ( '
          - not
          - type: NoRef
            __content__: ' '
          - IsEmpty
          - " ( $errorInfo ) ;\n\t\t\"info: \" & $errorInfo\n\t)\n)"
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"Cancel"'
          DisplayCalculation:
            Chunk: '"Cancel"'
        - CommitState: 'False'
        - CommitState: 'False'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error = \" & Quote ( $error ) & \" ;¶\"\n\t&
        \"$runtime = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error
        = \" & Quote ( $error ) & \" ;¶\"\n\t& \"$runtime = \" & GetAsNumber ( $~script.runtime
        ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n] ;\n\t\"$LogLevel
          = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error = \" & "
        - Quote
        - " ( $error ) & \" ;¶\"\n\t& \"$runtime = \" & "
        - GetAsNumber
        - |2-
           ( $~script.runtime ) & " ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5 ]
      Calculation: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5
      DisplayCalculation:
        Chunk: $$EASYSYNC.CLIENT.LOGLEVELTOWRITE ≥ 5
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Client: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 5 ;\n\t~message = \"exit script without error\"\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime
        = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 5 ;\n\t~message = \"exit script without
        error\"\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime
        = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 5 ;\n\t~message = \"exit script without error\"\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime = \" & "
        - GetAsNumber
        - |2-
           ( $~script.runtime ) & " ;¶"
          )
      Script:
        id: '66'
        name: 'EasySync Client: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $!; Value:""
        /**
         * This is a step that will not return an error.
         *
         * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
         * Get ( LastError ) to test if an error occurred with the Perform Script step.
         *
         */ ]
      Value:
        Calculation: |-
          ""
          /**
           * This is a step that will not return an error.
           *
           * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
           * Get ( LastError ) to test if an error occurred with the Perform Script step.
           *
           */
        DisplayCalculation:
          Chunk: |-
            ""
            /**
             * This is a step that will not return an error.
             *
             * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
             * Get ( LastError ) to test if an error occurred with the Perform Script step.
             *
             */
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $!
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: Exit Script [  ]
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
