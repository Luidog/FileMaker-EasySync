#Pull Payload:Handles the pull phase of the sync process.History:2014-04-16			Tim Dietrich (timdietrich@me.com)	Initial version.2014-04-17			Tim Dietrich (timdietrich@me.com)	Now pushing the last push / pull timestamps in a SQL-friendly format.	Were doing this client-side to avoid problems that occur when the servers	timestamp format differs from that of the client.2014-04-18	Tim Dietrich (timdietrich@me.com)	Adjusting ES_Timestamp values based on the timezone offset.	Other minor changes to improve performance.2014-04-19	Tim Dietrich (timdietrich@me.com)	Reflects shift to UTC timestamps.2014-04-21     Tim Dietrich (timdietrich@me.com)     Were now only setting fields that have actually changed.2014-04-22	Tim Dietrich (timdietrich@me.com)	Now searching for the closing /records tag using -1 as the start position	so that were searching for the tag from the end of the payload.	Thanks to Daniel Smith (@FMweetbicks) for the suggestion.2014-04-23	Tim Dietrich (timdietrich@me.com)	Get ( SystemIPAddress ) is now comma-delimited when passed as a param.	This resolves an issue that comes up if the client has multiple IPs.2014-04-24	Tim Dietrich (timdietrich@me.com)	Added support for repeating fields.2014-04-28	Tim Dietrich (timdietrich@me.com)	Added a variable that allows auto-enter calcs for ES_UTC_Time and ES_Device_ID to be	overwritten during the sync process.2014-05-08	Tim Dietrich (timdietrich@me.com)	Optimized code that gets the next record.2014-05-15	Tim Dietrich (timdietrich@me.com)	Eliminated the need to copy the records portion of the payload to a distinct $records variable.	This should help to reduce the memory needed to process the payload, and should also slightly	increase performance.	Also, were now only saving the actual payload to the record if debugging of the pull process	is enabled. Otherwise, there is no need to write the payload to disk.
#
#Log the start time.
Set Variable [ $start; Value:Get ( CurrentTimeStamp ) ]
#
#Allow auto-enter calcs for ES_UTC_Time and ES_Device_ID to be overwritten during the sync process.
Set Variable [ $script_override; Value:1 // Used to override auto-enter calculations. ]
#
#Refresh sync status.
Set Variable [ $$EasySync_Status; Value:Requesting payload from server... ]
Refresh Object [ Object Name: easysync_status ]
#
#Setup the params to pass to the server.
Set Variable [ $pull_params; Value:Evaluate ( EasySync_Payloads::ES_Last_Pull_UTC_Time )  ¶  Evaluate ( EasySync_Payloads::ES_Last_Push_UTC_Time )  ¶  Get ( PersistentID )  ¶  $$client_version  ¶  Substitute ( Get ( SystemIPAddress ); ¶; ,  )  ¶  Substitute ( Get ( SystemNICAddress ); ¶; ,  )  ¶  Get ( SystemPlatform )  ¶  Get ( SystemVersion )  ¶  Get ( Device )  ¶  Get ( NetworkProtocol )  ¶  Get ( NetworkType )  ¶  $$additional_pull_info ]
If [ $$debug_pull ]
Show Custom Dialog [ Title: Pull Parameters; Message: $pull_params; Default Button: “OK”, Commit: “Yes” ]
End If
#
#Ask the server for a pull payload.
If [ $$use_psos_during_pull ]
#*** Remote Script: Prepare Payload for Client
Perform Script on Server [ “Prepare Payload for Client” from file: “Hosted_Database”; Parameter: $pull_params ][ Wait for completion ]
Else
#*** Remote Script: Prepare Payload for Client
Perform Script [ “Prepare Payload for Client” from file: “Hosted_Database”; Parameter: $pull_params ]
End If
If [ IsEmpty ( Get ( ScriptResult ) ) ]
Exit Script [ Result: 0  ¶  Pull Error  ¶  The pull request has failed. No payload was received from the server. ]
End If
#
#If the payload needs to be pulled in segments...
If [ Left ( Get ( ScriptResult ); 14 ) = Payload_UUID:  ]
Set Variable [ $payload_uuid; Value:Substitute ( Get ( ScriptResult ) ; Payload_UUID:  ;  ) ]
Set Variable [ $payload; Value: ]
Set Variable [ $i; Value:1 ]
Loop
Set Variable [ $pull_params; Value:$payload_uuid  ¶  ( ( ( $i - 1 ) * $$max_pull_segment_size ) + 1 )  ¶  $$max_pull_segment_size ]
If [ $$use_psos_during_pull ]
#*** Remote Script: Send Payload Segment to Client
Perform Script on Server [ “Send Payload Segment to Client” from file: “Hosted_Database”; Parameter: $pull_params ][ Wait for completion ]
Else
#*** Remote Script: Send Payload Segment to Client
Perform Script [ “Send Payload Segment to Client” from file: “Hosted_Database”; Parameter: $pull_params ]
End If
If [ IsEmpty (  Get ( ScriptResult ) ) ]
Exit Script [ Result: 0  ¶  Pull Error  ¶  Server did not send payload segment   $i  . ]
End If
If [ $$debug_pull ]
Show Custom Dialog [ Title: Segment Received (  $i  ); Message: Get ( ScriptResult ); Default Button: “OK”, Commit: “Yes” ]
End If
Set Variable [ $payload; Value:$payload  Get ( ScriptResult ) ]
Exit Loop If [ PatternCount ( $payload ; /payload ) ]
Set Variable [ $i; Value:$i + 1 ]
End Loop
Else
Set Variable [ $payload; Value:Get ( ScriptResult ) ]
End If
If [ $$debug_pull ]
Show Custom Dialog [ Title: Payload Received; Message: $payload; Default Button: “OK”, Commit: “Yes” ]
End If
#
#Close the connection to the hosted database. (We dont need to hold the connection while processing.)
Close File [ “Hosted_Database” ]
#
#Refresh sync status.
Set Variable [ $$EasySync_Status; Value:Examining payload received from server... ]
Refresh Object [ Object Name: easysync_status ]
#
#Is the payload well-formed?
If [ PatternCount ( $payload ; payload ) ≠ 1or PatternCount ( $payload ; /payload ) ≠ 1or PatternCount ( $payload ; settings ) ≠ 1or PatternCount ( $payload ; /settings ) ≠ 1or PatternCount ( $payload ; tables ) ≠ 1or PatternCount ( $payload ; /tables ) ≠ 1or PatternCount ( $payload ; records ) ≠ 1or PatternCount ( $payload ; /records ) ≠ 1 ]
If [ $$debug_pull ]
Show Custom Dialog [ Title: Sync Error; Message: The payload is malformed.; Default Button: “OK”, Commit: “Yes” ]
End If
Exit Script [ Result: 0  ¶  Pull Error  ¶  The payload received from the server was malformed. ]
End If
#
#Get the payload settings.
Set Variable [ $settings; Value:Let ( [beginning = Position ( $payload ; settings¶ ; 1 ; 1 ) + 11;end = Position ( $payload ; ¶/settings ; 1 ; 1 );settings = Middle ( $payload ; beginning ; end - beginning );settings = Trim ( settings )];settings) ]
Set Variable [ $field_delimiter; Value:GetValue ( Substitute ( $settings ; /setting ; ¶ ) ; 1 ) ]
Set Variable [ $record_delimiter; Value:GetValue ( Substitute ( $settings ; /setting ; ¶ ) ; 2 ) ]
Set Variable [ $sync_method; Value:GetValue ( Substitute ( $settings ; /setting ; ¶ ) ; 3 ) ]
If [ $$debug_pull ]
Show Custom Dialog [ Title: Payload Settings; Message: $settings; Default Button: “OK”, Commit: “Yes” ]
End If
#
#If the sync method is Replace...
If [ $sync_method = Replace ]
#
#Refresh sync status.
Set Variable [ $$EasySync_Status; Value:Wiping local data... ]
Refresh Object [ Object Name: easysync_status ]
#
Perform Script [ “Sync Utilities”; Parameter: wipe ]
End If
#
#Refresh sync status.
Set Variable [ $$EasySync_Status; Value:Saving payload... ]
Refresh Object [ Object Name: easysync_status ]
#
#Save the payload.
#Note: We wait to save the payload until this point. Otherwise, a wipe would have deleted the saved payload.
Freeze Window
New Record/Request
If [ $$debug_pull ]
Set Field By Name [ EasySync_Payloads::Payload; $payload ]
End If
Set Field By Name [ EasySync_Payloads::Payload_Type; Pull Payload ]
Commit Records/Requests[ No dialog ]
#
#Refresh sync status.
Set Variable [ $$EasySync_Status; Value:Processing payload... ]
Refresh Object [ Object Name: easysync_status ]
#
#Get the table info.
Set Variable [ $tables; Value:Let ( [beginning = Position ( $payload ; tables¶ ; 1 ; 1 ) + 9;end = Position ( $payload ; ¶/tables ; 1 ; 1 );tables = Middle ( $payload ; beginning ; end - beginning );tables = Trim ( tables );tables = Substitute ( tables ; table ;  );tables = Substitute ( tables ; /table ;  )];tables) ]
If [ $$debug_pull ]
Show Custom Dialog [ Title: Payload Tables; Message: $tables; Default Button: “OK”, Commit: “Yes” ]
End If
#
#Create field name value lists for each table.
Set Variable [ $i; Value:1 ]
Loop
Set Variable [ $table; Value:Substitute ( GetValue ( $tables ; $i ); /field; ¶ ) ]
Set Variable [ $table_name; Value:GetValue ( $table; 1 ) ]
Set Variable [ $dyn_code; Value:Let ( [ $  $table_name   = $table ]; 1 ) ]
Set Variable [ $dyn_code; Value:Evaluate ( $dyn_code ) ]
If [ $$debug_pull ]
Show Custom Dialog [ Title: Created Field Value List for Table   $table_name; Message: Evaluate ( $  $table_name ); Default Button: “OK”, Commit: “Yes” ]
End If
Set Variable [ $i; Value:$i + 1 ]
Exit Loop If [ $i  ValueCount ( $tables ) ]
End Loop
#
#Get the # of records in the payload.
Set Variable [ $record_count; Value:PatternCount ( $payload; $record_delimiter ) - 1 ]
#
#If there are no records to sync...
If [ $record_count = 0 ]
If [ $$delete_pull_payloads ≠ None ]
Delete Record/Request[ No dialog ]
End If
Exit Script [ Result: 1  ¶  Pull Completed  ¶  There was no data that needed to be pulled from the server. ]
End If
#
#Refresh sync status.
Set Variable [ $$EasySync_Status; Value:Processing   $record_count   records received from server... ]
Refresh Window
#
#Loop over the records.
Set Variable [ $i; Value:1 ]
Set Variable [ $previous_start; Value:0 ]
Loop
#
#Refresh sync status occasionally...
If [ Evaluate ( $$pull_progress_indicator_logic ) ]
Set Variable [ $$EasySync_Status; Value:Processing record   $i   of   $record_count  ... ]
Refresh Window
#Note: refresh object doesnt seem to work here.
Refresh Object [ Object Name: easysync_status ]
End If
#
#Get the record, formatted as a return-delimited value list.
Set Variable [ $record; Value:Let ( [ // Note: The +1 in the beginning calc is to account for the default carriage return imposed by ExectueSQL.beginning = If ( $previous_start  0; Position ( $payload ; $record_delimiter ; $previous_start ; 1 ) + Length ( $record_delimiter ) + 1; Position ( $payload; records¶; 1; 1 ) + 10 );end = Position ( $payload ; $record_delimiter ; 1 ; $i + 1 );$previous_start = end;record = Middle ( $payload ; beginning ; end - beginning );// Encode CRLFs that might be found in Base64-encoded container data.// This makes it easier to treat the fields as a return-delimited value list.record = Substitute ( record ; Char ( 13 )  Char ( 10 ) ; [[CRLF]] );// Encode any remaining newline characters.record = Substitute ( record ; ¶ ; [[BR]] );record = Substitute ( record ; $field_delimiter ; ¶ )];record) ]
If [ $$debug_pull ]
Show Custom Dialog [ Title: Payload Record   $i; Message: $record; Default Button: “OK”, Commit: “Yes” ]
End If
#
#Get the name of the table that is associated with this record.
Set Variable [ $table_name; Value:GetValue ( $record ; 1 ) ]
If [ $$debug_pull ]
Show Custom Dialog [ Title: Table Name for Payload Record   $i; Message: $table_name; Default Button: “OK”, Commit: “Yes” ]
End If
#
#Get the names of the fields that are associated with this record.
Set Variable [ $field_names; Value:Evaluate ( $  $table_name ) ]
If [ $$debug_pull ]
Show Custom Dialog [ Title: Field Names for Payload Record   $i; Message: $field_names; Default Button: “OK”, Commit: “Yes” ]
End If
#
#Get the ES_Record_UUID value of this record.
Set Variable [ $ES_Record_UUID; Value:// Note: This is based in VERY large part on Kevin Franks ValuePosition ( theList ; theValue ) function.// See: http://filemakerhacks.com/2011/06/12/valueposition-the-function-filemaker-forgot/// Thanks Kevin!Let( [theList = $field_names;theValue = ES_Record_UUID[1];pLp = ¶  theList  ¶ ;pVp = ¶  theValue  ¶ ;thePos = Position ( pLp ; pVp ; 1 ; 1 ) ;theSegment = Left ( pLp ; thePos ) ;theValPos = PatternCount ( theSegment ; ¶ )] ;GetValue ( $record ; theValPos )) ]
If [ $$debug_pull ]
Show Custom Dialog [ Title: ES_Record_UUID for Payload Record   $i; Message: $ES_Record_UUID; Default Button: “OK”, Commit: “Yes” ]
End If
#
#Go to the correct row in the Payload Details portal.
Go to Portal Row [ $i ][ Select; No dialog ]
#
#Set the Record UUID for the Payload Details record.
Set Field By Name [ EasySync_Payload_Details::ES_Child_Record_UUID; $ES_Record_UUID ]
Set Field By Name [ EasySync_Payload_Details::Payload_Type; Payload Detail ]
#
#Loop over the field names.
#We skip the first value because it is really the table name that the record is from.
Set Variable [ $f; Value:2 ]
Loop
#
#Get the name of the field.
Set Variable [ $field_name; Value:GetValue ( $field_names; $f ) ]
#
#If this is not a container...
If [ Left ( $field_name ; 4 ) ≠ B64_ ]
Set Variable [ $field_value; Value:Let ([value = GetValue ( $record ; $f );value = Substitute ( value ; [[BR]] ; ¶ )];value) ]
Else
Set Variable [ $field_name; Value:Right ( $field_name; Length ( $field_name ) - 4 ) ]
Set Variable [ $field_value; Value:GetValue ( $record ; $f ) ]
If [ not IsEmpty ( $field_value ) ]
Set Variable [ $field_value; Value:Let ([value = $field_value;value = Substitute ( value ; /b64;  );fileNameWithExtension = GetValue ( Substitute ( value ; b64; ¶ ); 1 );encoded = Substitute ( value; fileNameWithExtension  b64;  );encoded = Substitute ( encoded ; [[CRLF]] ; Char ( 13 )  Char ( 10 ) );decoded = Base64Decode ( encoded; fileNameWithExtension )];decoded) ]
End If
End If
#
#If the value of this field has changed...
If [ not Exact ( $field_value ; Evaluate ( $table_name  ::  $field_name ) )// v1.2: $field_value ≠ Evaluate ( $table_name  ::  $field_name ) ]
#
#Update the field.
Set Field By Name [ $table_name  ::  $field_name; $field_value ]
#
#If an error has occurred...
#And if it is not a 102 (Field is missing) error...
#Note: We ignore 102s because they are indicative of a field in the hosted DB that is simply not mirrored in the remote DB.
Set Variable [ $LastError; Value:Get ( LastError ) ]
If [ $LastError ≠ 0 and $LastError ≠ 102 ]
#Rollback the changes.
Revert Record/Request[ No dialog ]
If [ $$delete_pull_payloads = All ]
Delete Record/Request[ No dialog ]
End If
Exit Script [ Result: 0  ¶  Pull Error  ¶  An error occurred when attempting to process the pulled payload. (Error code:   $LastError  ) ]
End If
#
End If
#
Set Variable [ $f; Value:$f + 1 ]
Exit Loop If [ $f  ValueCount ( $field_names ) ]
#
End Loop
#End loop that sets the fields.
#
Set Variable [ $i; Value:$i + 1 ]
Exit Loop If [ $i  $record_count ]
#
#End loop over the records.
End Loop
#
#Try to commit the transaction.
Commit Records/Requests[ No dialog ]
#
#If an error has occurred...
Set Variable [ $LastError; Value:Get ( LastError ) ]
If [ $LastError ≠ 0 ]
#Rollback the changes.
Revert Record/Request[ No dialog ]
If [ $Delete_Payloads = All ]
Delete Record/Request[ No dialog ]
End If
Exit Script [ Result: 0  ¶  Pull Error  ¶  An error occurred when attempting to commit the data in the pulled payload. (Error code:   $LastError  ) ]
End If
#
#Delete the payload.
If [ $$delete_pull_payloads = All or $$delete_pull_payloads = Successful ]
Delete Record/Request[ No dialog ]
End If
#
#Return the success code to the caller.
Exit Script [ Result: 1  ¶  Pull Success  ¶  Remote data has been successfully pulled from the server. (Elapsed Time:   GetAsTime ( Get ( CurrentTimeStamp ) - $start )  ) ]
#


---
Script:
  includeInMenu: 'False'
  runFullAccess: 'False'
  id: '18'
  name: Pull Payload
  StepList:
    Step:
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: "#Pull Payload:\nHandles the pull phase of the sync process.\n\nHistory:\n\n2014-04-16\t\t\n\tTim
        Dietrich (timdietrich@me.com)\n\tInitial version.\n\n2014-04-17\t\t\n\tTim
        Dietrich (timdietrich@me.com)\n\tNow pushing the last push / pull timestamps
        in a SQL-friendly format.\n\tWere doing this client-side to avoid problems
        that occur when the servers\n\ttimestamp format differs from that of the client.\n\n2014-04-18\n\tTim
        Dietrich (timdietrich@me.com)\n\tAdjusting ES_Timestamp values based on the
        timezone offset.\n\tOther minor changes to improve performance.\n\n2014-04-19\n\tTim
        Dietrich (timdietrich@me.com)\n\tReflects shift to UTC timestamps.\n\n2014-04-21\n
        \    Tim Dietrich (timdietrich@me.com)\n     Were now only setting fields
        that have actually changed.\n\n2014-04-22\n\tTim Dietrich (timdietrich@me.com)\n\tNow
        searching for the closing /records tag using -1 as the start position\n\tso
        that were searching for the tag from the end of the payload.\n\tThanks to
        Daniel Smith (@FMweetbicks) for the suggestion.\n\n2014-04-23\n\tTim Dietrich
        (timdietrich@me.com)\n\tGet ( SystemIPAddress ) is now comma-delimited when
        passed as a param.\n\tThis resolves an issue that comes up if the client has
        multiple IPs.\n\n2014-04-24\n\tTim Dietrich (timdietrich@me.com)\n\tAdded
        support for repeating fields.\n\n2014-04-28\n\tTim Dietrich (timdietrich@me.com)\n\tAdded
        a variable that allows auto-enter calcs for ES_UTC_Time and ES_Device_ID to
        be\n\toverwritten during the sync process.\n\n2014-05-08\n\tTim Dietrich (timdietrich@me.com)\n\tOptimized
        code that gets the next record.\n\n2014-05-15\n\tTim Dietrich (timdietrich@me.com)\n\tEliminated
        the need to copy the records portion of the payload to a distinct $records
        variable.\n\tThis should help to reduce the memory needed to process the payload,
        and should also slightly\n\tincrease performance.\n\tAlso, were now only saving
        the actual payload to the record if debugging of the pull process\n\tis enabled.
        Otherwise, there is no need to write the payload to disk.\n"
      Text: "Pull Payload:\nHandles the pull phase of the sync process.\n\nHistory:\n\n2014-04-16\t\t\n\tTim
        Dietrich (timdietrich@me.com)\n\tInitial version.\n\n2014-04-17\t\t\n\tTim
        Dietrich (timdietrich@me.com)\n\tNow pushing the last push / pull timestamps
        in a SQL-friendly format.\n\tWere doing this client-side to avoid problems
        that occur when the servers\n\ttimestamp format differs from that of the client.\n\n2014-04-18\n\tTim
        Dietrich (timdietrich@me.com)\n\tAdjusting ES_Timestamp values based on the
        timezone offset.\n\tOther minor changes to improve performance.\n\n2014-04-19\n\tTim
        Dietrich (timdietrich@me.com)\n\tReflects shift to UTC timestamps.\n\n2014-04-21\n
        \    Tim Dietrich (timdietrich@me.com)\n     Were now only setting fields
        that have actually changed.\n\n2014-04-22\n\tTim Dietrich (timdietrich@me.com)\n\tNow
        searching for the closing /records tag using -1 as the start position\n\tso
        that were searching for the tag from the end of the payload.\n\tThanks to
        Daniel Smith (@FMweetbicks) for the suggestion.\n\n2014-04-23\n\tTim Dietrich
        (timdietrich@me.com)\n\tGet ( SystemIPAddress ) is now comma-delimited when
        passed as a param.\n\tThis resolves an issue that comes up if the client has
        multiple IPs.\n\n2014-04-24\n\tTim Dietrich (timdietrich@me.com)\n\tAdded
        support for repeating fields.\n\n2014-04-28\n\tTim Dietrich (timdietrich@me.com)\n\tAdded
        a variable that allows auto-enter calcs for ES_UTC_Time and ES_Device_ID to
        be\n\toverwritten during the sync process.\n\n2014-05-08\n\tTim Dietrich (timdietrich@me.com)\n\tOptimized
        code that gets the next record.\n\n2014-05-15\n\tTim Dietrich (timdietrich@me.com)\n\tEliminated
        the need to copy the records portion of the payload to a distinct $records
        variable.\n\tThis should help to reduce the memory needed to process the payload,
        and should also slightly\n\tincrease performance.\n\tAlso, were now only saving
        the actual payload to the record if debugging of the pull process\n\tis enabled.
        Otherwise, there is no need to write the payload to disk.\n"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Log the start time.'
      Text: Log the start time.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $start; Value:Get ( CurrentTimeStamp ) ]
      Value:
        Calculation: Get ( CurrentTimeStamp )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeStamp
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $start
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Allow auto-enter calcs for ES_UTC_Time and ES_Device_ID to be overwritten
        during the sync process.'
      Text: Allow auto-enter calcs for ES_UTC_Time and ES_Device_ID to be overwritten
        during the sync process.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $script_override; Value:1 // Used to override auto-enter
        calculations. ]
      Value:
        Calculation: 1 // Used to override auto-enter calculations.
        DisplayCalculation:
          Chunk:
          - '1 '
          - // Used to override auto-enter calculations.
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $script_override
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Refresh sync status.'
      Text: Refresh sync status.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $$EasySync_Status; Value:Requesting payload from server...
        ]
      Value:
        Calculation: '"Requesting payload from server..."'
        DisplayCalculation:
          Chunk: Requesting payload from server...
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $$EasySync_Status
    - enable: 'True'
      id: '167'
      name: Refresh Object
      StepText: 'Refresh Object [ Object Name: easysync_status ]'
      ObjectName:
        Calculation: '"easysync_status"'
        DisplayCalculation:
          Chunk: easysync_status
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Setup the params to pass to the server.'
      Text: Setup the params to pass to the server.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $pull_params; Value:Evaluate ( EasySync_Payloads::ES_Last_Pull_UTC_Time
        )  ¶  \nEvaluate ( EasySync_Payloads::ES_Last_Push_UTC_Time )  ¶  \nGet (
        PersistentID )  ¶  \n$$client_version  ¶  \nSubstitute ( Get ( SystemIPAddress
        ); ¶; ,  )  ¶  \nSubstitute ( Get ( SystemNICAddress ); ¶; ,  )  ¶  \nGet
        ( SystemPlatform )  ¶  \nGet ( SystemVersion )  ¶  \nGet ( Device )  ¶  \nGet
        ( NetworkProtocol )  ¶  \nGet ( NetworkType )  ¶  \n$$additional_pull_info
        ]"
      Value:
        Calculation: "Evaluate ( \"EasySync_Payloads::ES_Last_Pull_UTC_Time\" ) &
          ¶ & \nEvaluate ( \"EasySync_Payloads::ES_Last_Push_UTC_Time\" ) & ¶ & \nGet
          ( PersistentID ) & ¶ & \n$$client_version & ¶ & \nSubstitute ( Get ( SystemIPAddress
          ); ¶; \", \" ) & ¶ & \nSubstitute ( Get ( SystemNICAddress ); ¶; \", \"
          ) & ¶ & \nGet ( SystemPlatform ) & ¶ & \nGet ( SystemVersion ) & ¶ & \nGet
          ( Device ) & ¶ & \nGet ( NetworkProtocol ) & ¶ & \nGet ( NetworkType ) &
          ¶ & \n$$additional_pull_info"
        DisplayCalculation:
          Chunk:
          - Evaluate
          - " ( EasySync_Payloads::ES_Last_Pull_UTC_Time )  ¶  \n"
          - Evaluate
          - " ( EasySync_Payloads::ES_Last_Push_UTC_Time )  ¶  \n"
          - Get
          - ' ( '
          - PersistentID
          - " )  ¶  \n$$client_version  ¶  \n"
          - Substitute
          - ' ( '
          - Get
          - ' ( '
          - SystemIPAddress
          - " ); ¶; ,  )  ¶  \n"
          - Substitute
          - ' ( '
          - Get
          - ' ( '
          - SystemNICAddress
          - " ); ¶; ,  )  ¶  \n"
          - Get
          - ' ( '
          - SystemPlatform
          - " )  ¶  \n"
          - Get
          - ' ( '
          - SystemVersion
          - " )  ¶  \n"
          - Get
          - ' ( '
          - Device
          - " )  ¶  \n"
          - Get
          - ' ( '
          - NetworkProtocol
          - " )  ¶  \n"
          - Get
          - ' ( '
          - NetworkType
          - " )  ¶  \n$$additional_pull_info"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $pull_params
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$debug_pull ]
      Calculation: $$debug_pull
      DisplayCalculation:
        Chunk: $$debug_pull
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: Pull Parameters; Message: $pull_params;
        Default Button: “OK”, Commit: “Yes” ]'
      Title:
        Calculation: '"Pull Parameters"'
        DisplayCalculation:
          Chunk: Pull Parameters
      Message:
        Calculation: $pull_params
        DisplayCalculation:
          Chunk: $pull_params
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"OK"'
          DisplayCalculation:
            Chunk: OK
        - CommitState: 'False'
        - CommitState: 'False'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Ask the server for a pull payload.'
      Text: Ask the server for a pull payload.
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$use_psos_during_pull ]
      Calculation: $$use_psos_during_pull
      DisplayCalculation:
        Chunk: $$use_psos_during_pull
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#*** Remote Script: Prepare Payload for Client'
      Text: '*** Remote Script: Prepare Payload for Client'
    - enable: 'True'
      id: '164'
      name: Perform Script on Server
      StepText: |-
        Perform Script on Server [ “Prepare Payload for Client” from file: “Hosted_Database”; Parameter: $pull_params ]
        [ Wait for completion ]
      WaitForCompletion:
        state: 'True'
      FileReference:
        id: '1'
        name: Hosted_Database
        UniversalPathList: fmnet:/your-server-address/FM_Surveys_Hosted_v1r3
      Calculation: $pull_params
      DisplayCalculation:
        Chunk: $pull_params
      Script:
        id: '11'
        name: Prepare Payload for Client
    - enable: 'True'
      id: '69'
      name: Else
      StepText: Else
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#*** Remote Script: Prepare Payload for Client'
      Text: '*** Remote Script: Prepare Payload for Client'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “Prepare Payload for Client” from file: “Hosted_Database”;
        Parameter: $pull_params ]'
      FileReference:
        id: '1'
        name: Hosted_Database
        UniversalPathList: fmnet:/your-server-address/FM_Surveys_Hosted_v1r3
      Calculation: $pull_params
      DisplayCalculation:
        Chunk: $pull_params
      Script:
        id: '11'
        name: Prepare Payload for Client
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ IsEmpty ( Get ( ScriptResult ) ) ]
      Calculation: IsEmpty ( Get ( ScriptResult ) )
      DisplayCalculation:
        Chunk:
        - IsEmpty
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - ' ) )'
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: "Exit Script [ Result: 0  ¶  \nPull Error  ¶  \nThe pull request has
        failed. No payload was received from the server. ]"
      Calculation: "0 & ¶ & \n\"Pull Error\" & ¶ & \n\"The pull request has failed.
        No payload was received from the server.\""
      DisplayCalculation:
        Chunk: "0  ¶  \nPull Error  ¶  \nThe pull request has failed. No payload was
          received from the server."
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If the payload needs to be pulled in segments...'
      Text: If the payload needs to be pulled in segments...
    - enable: 'True'
      id: '68'
      name: If
      StepText: 'If [ Left ( Get ( ScriptResult ); 14 ) = Payload_UUID:  ]'
      Calculation: 'Left ( Get ( ScriptResult ); 14 ) = "Payload_UUID: "'
      DisplayCalculation:
        Chunk:
        - Left
        - ' ( '
        - Get
        - ' ( '
        - ScriptResult
        - ' ); 14 ) = Payload_UUID: '
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: 'Set Variable [ $payload_uuid; Value:Substitute ( Get ( ScriptResult
        ) ; Payload_UUID:  ;  ) ]'
      Value:
        Calculation: 'Substitute ( Get ( ScriptResult ) ; "Payload_UUID: " ; "" )'
        DisplayCalculation:
          Chunk:
          - Substitute
          - ' ( '
          - Get
          - ' ( '
          - ScriptResult
          - ' ) ; Payload_UUID:  ;  )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $payload_uuid
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: 'Set Variable [ $payload; Value: ]'
      Value:
        Calculation: '""'
        DisplayCalculation:
          Chunk: 
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $payload
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $pull_params; Value:$payload_uuid  ¶  \n( ( ( $i -
        1 ) * $$max_pull_segment_size ) + 1 )  ¶  \n$$max_pull_segment_size ]"
      Value:
        Calculation: "$payload_uuid & ¶ & \n( ( ( $i - 1 ) * $$max_pull_segment_size
          ) + 1 ) & ¶ & \n$$max_pull_segment_size"
        DisplayCalculation:
          Chunk: "$payload_uuid  ¶  \n( ( ( $i - 1 ) * $$max_pull_segment_size ) +
            1 )  ¶  \n$$max_pull_segment_size"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $pull_params
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$use_psos_during_pull ]
      Calculation: $$use_psos_during_pull
      DisplayCalculation:
        Chunk: $$use_psos_during_pull
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#*** Remote Script: Send Payload Segment to Client'
      Text: '*** Remote Script: Send Payload Segment to Client'
    - enable: 'True'
      id: '164'
      name: Perform Script on Server
      StepText: |-
        Perform Script on Server [ “Send Payload Segment to Client” from file: “Hosted_Database”; Parameter: $pull_params ]
        [ Wait for completion ]
      WaitForCompletion:
        state: 'True'
      FileReference:
        id: '1'
        name: Hosted_Database
        UniversalPathList: fmnet:/your-server-address/FM_Surveys_Hosted_v1r3
      Calculation: $pull_params
      DisplayCalculation:
        Chunk: $pull_params
      Script:
        id: '17'
        name: Send Payload Segment to Client
    - enable: 'True'
      id: '69'
      name: Else
      StepText: Else
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#*** Remote Script: Send Payload Segment to Client'
      Text: '*** Remote Script: Send Payload Segment to Client'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “Send Payload Segment to Client” from file: “Hosted_Database”;
        Parameter: $pull_params ]'
      FileReference:
        id: '1'
        name: Hosted_Database
        UniversalPathList: fmnet:/your-server-address/FM_Surveys_Hosted_v1r3
      Calculation: $pull_params
      DisplayCalculation:
        Chunk: $pull_params
      Script:
        id: '17'
        name: Send Payload Segment to Client
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ IsEmpty (  Get ( ScriptResult ) ) ]
      Calculation: IsEmpty (  Get ( ScriptResult ) )
      DisplayCalculation:
        Chunk:
        - IsEmpty
        - ' (  '
        - Get
        - ' ( '
        - ScriptResult
        - ' ) )'
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: "Exit Script [ Result: 0  ¶  \nPull Error  ¶  \nServer did not send
        payload segment   $i  . ]"
      Calculation: "0 & ¶ & \n\"Pull Error\" & ¶ & \n\"Server did not send payload
        segment \" & $i & \".\""
      DisplayCalculation:
        Chunk: "0  ¶  \nPull Error  ¶  \nServer did not send payload segment   $i
          \ ."
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$debug_pull ]
      Calculation: $$debug_pull
      DisplayCalculation:
        Chunk: $$debug_pull
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: Segment Received (  $i  ); Message: Get
        ( ScriptResult ); Default Button: “OK”, Commit: “Yes” ]'
      Title:
        Calculation: '"Segment Received (" & $i & ")"'
        DisplayCalculation:
          Chunk: Segment Received (  $i  )
      Message:
        Calculation: Get ( ScriptResult )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - ScriptResult
          - ' )'
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"OK"'
          DisplayCalculation:
            Chunk: OK
        - CommitState: 'False'
        - CommitState: 'False'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $payload; Value:$payload  Get ( ScriptResult ) ]
      Value:
        Calculation: $payload & Get ( ScriptResult )
        DisplayCalculation:
          Chunk:
          - '$payload  '
          - Get
          - ' ( '
          - ScriptResult
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $payload
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ PatternCount ( $payload ; /payload ) ]
      Calculation: PatternCount ( $payload ; "</payload>" )
      DisplayCalculation:
        Chunk:
        - PatternCount
        - ' ( $payload ; /payload )'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:$i + 1 ]
      Value:
        Calculation: $i + 1
        DisplayCalculation:
          Chunk: $i + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '69'
      name: Else
      StepText: Else
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $payload; Value:Get ( ScriptResult ) ]
      Value:
        Calculation: Get ( ScriptResult )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - ScriptResult
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $payload
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$debug_pull ]
      Calculation: $$debug_pull
      DisplayCalculation:
        Chunk: $$debug_pull
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: Payload Received; Message: $payload;
        Default Button: “OK”, Commit: “Yes” ]'
      Title:
        Calculation: '"Payload Received"'
        DisplayCalculation:
          Chunk: Payload Received
      Message:
        Calculation: $payload
        DisplayCalculation:
          Chunk: $payload
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"OK"'
          DisplayCalculation:
            Chunk: OK
        - CommitState: 'False'
        - CommitState: 'False'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Close the connection to the hosted database. (We dont need to hold
        the connection while processing.)'
      Text: Close the connection to the hosted database. (We dont need to hold the
        connection while processing.)
    - enable: 'True'
      id: '34'
      name: Close File
      StepText: Close File [ “Hosted_Database” ]
      FileReference:
        id: '1'
        name: Hosted_Database
        UniversalPathList: fmnet:/your-server-address/FM_Surveys_Hosted_v1r3
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Refresh sync status.'
      Text: Refresh sync status.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $$EasySync_Status; Value:Examining payload received
        from server... ]
      Value:
        Calculation: '"Examining payload received from server..."'
        DisplayCalculation:
          Chunk: Examining payload received from server...
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $$EasySync_Status
    - enable: 'True'
      id: '167'
      name: Refresh Object
      StepText: 'Refresh Object [ Object Name: easysync_status ]'
      ObjectName:
        Calculation: '"easysync_status"'
        DisplayCalculation:
          Chunk: easysync_status
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Is the payload well-formed?'
      Text: Is the payload well-formed?
    - enable: 'True'
      id: '68'
      name: If
      StepText: |-
        If [ PatternCount ( $payload ; payload ) ≠ 1
        or PatternCount ( $payload ; /payload ) ≠ 1
        or PatternCount ( $payload ; settings ) ≠ 1
        or PatternCount ( $payload ; /settings ) ≠ 1
        or PatternCount ( $payload ; tables ) ≠ 1
        or PatternCount ( $payload ; /tables ) ≠ 1
        or PatternCount ( $payload ; records ) ≠ 1
        or PatternCount ( $payload ; /records ) ≠ 1 ]
      Calculation: |-
        PatternCount ( $payload ; "<payload>" ) ≠ 1
        or PatternCount ( $payload ; "</payload>" ) ≠ 1
        or PatternCount ( $payload ; "<settings>" ) ≠ 1
        or PatternCount ( $payload ; "</settings>" ) ≠ 1
        or PatternCount ( $payload ; "<tables>" ) ≠ 1
        or PatternCount ( $payload ; "</tables>" ) ≠ 1
        or PatternCount ( $payload ; "<records>" ) ≠ 1
        or PatternCount ( $payload ; "</records>" ) ≠ 1
      DisplayCalculation:
        Chunk:
        - PatternCount
        - |2
           ( $payload ; payload ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; /payload ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; settings ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; /settings ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; tables ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; /tables ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; records ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - ' ( $payload ; /records ) ≠ 1'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$debug_pull ]
      Calculation: $$debug_pull
      DisplayCalculation:
        Chunk: $$debug_pull
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: Sync Error; Message: The payload is malformed.;
        Default Button: “OK”, Commit: “Yes” ]'
      Title:
        Calculation: '"Sync Error"'
        DisplayCalculation:
          Chunk: Sync Error
      Message:
        Calculation: '"The payload is malformed."'
        DisplayCalculation:
          Chunk: The payload is malformed.
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"OK"'
          DisplayCalculation:
            Chunk: OK
        - CommitState: 'False'
        - CommitState: 'False'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: "Exit Script [ Result: 0  ¶  \nPull Error  ¶  \nThe payload received
        from the server was malformed. ]"
      Calculation: "0 & ¶ & \n\"Pull Error\" & ¶ & \n\"The payload received from the
        server was malformed.\""
      DisplayCalculation:
        Chunk: "0  ¶  \nPull Error  ¶  \nThe payload received from the server was
          malformed."
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the payload settings.'
      Text: Get the payload settings.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $settings; Value:Let ( \n[\nbeginning = Position (
        $payload ; settings¶ ; 1 ; 1 ) + 11;\nend = Position ( $payload ; ¶/settings
        ; 1 ; 1 );\nsettings = Middle ( $payload ; beginning ; end - beginning );\nsettings
        = Trim ( settings )\n];\nsettings\n) ]"
      Value:
        Calculation: "Let ( \n[\nbeginning = Position ( $payload ; \"<settings>¶\"
          ; 1 ; 1 ) + 11;\nend = Position ( $payload ; \"¶</settings>\" ; 1 ; 1 );\nsettings
          = Middle ( $payload ; beginning ; end - beginning );\nsettings = Trim (
          settings )\n];\nsettings\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( \n[\nbeginning = "
          - Position
          - " ( $payload ; settings¶ ; 1 ; 1 ) + 11;\nend = "
          - Position
          - " ( $payload ; ¶/settings ; 1 ; 1 );\nsettings = "
          - Middle
          - " ( $payload ; beginning ; end - beginning );\nsettings = "
          - Trim
          - |2-
             ( settings )
            ];
            settings
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $settings
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $field_delimiter; Value:GetValue ( Substitute ( $settings
        ; /setting ; ¶ ) ; 1 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 1 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; /setting ; ¶ ) ; 1 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_delimiter
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $record_delimiter; Value:GetValue ( Substitute ( $settings
        ; /setting ; ¶ ) ; 2 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 2 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; /setting ; ¶ ) ; 2 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $record_delimiter
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $sync_method; Value:GetValue ( Substitute ( $settings
        ; /setting ; ¶ ) ; 3 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 3 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; /setting ; ¶ ) ; 3 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $sync_method
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$debug_pull ]
      Calculation: $$debug_pull
      DisplayCalculation:
        Chunk: $$debug_pull
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: Payload Settings; Message: $settings;
        Default Button: “OK”, Commit: “Yes” ]'
      Title:
        Calculation: '"Payload Settings"'
        DisplayCalculation:
          Chunk: Payload Settings
      Message:
        Calculation: $settings
        DisplayCalculation:
          Chunk: $settings
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"OK"'
          DisplayCalculation:
            Chunk: OK
        - CommitState: 'False'
        - CommitState: 'False'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If the sync method is Replace...'
      Text: If the sync method is Replace...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $sync_method = Replace ]
      Calculation: $sync_method = "Replace"
      DisplayCalculation:
        Chunk: $sync_method = Replace
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Refresh sync status.'
      Text: Refresh sync status.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $$EasySync_Status; Value:Wiping local data... ]
      Value:
        Calculation: '"Wiping local data..."'
        DisplayCalculation:
          Chunk: Wiping local data...
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $$EasySync_Status
    - enable: 'True'
      id: '167'
      name: Refresh Object
      StepText: 'Refresh Object [ Object Name: easysync_status ]'
      ObjectName:
        Calculation: '"easysync_status"'
        DisplayCalculation:
          Chunk: easysync_status
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “Sync Utilities”; Parameter: wipe ]'
      Calculation: '"wipe"'
      DisplayCalculation:
        Chunk: wipe
      Script:
        id: '26'
        name: Sync Utilities
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Refresh sync status.'
      Text: Refresh sync status.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $$EasySync_Status; Value:Saving payload... ]
      Value:
        Calculation: '"Saving payload..."'
        DisplayCalculation:
          Chunk: Saving payload...
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $$EasySync_Status
    - enable: 'True'
      id: '167'
      name: Refresh Object
      StepText: 'Refresh Object [ Object Name: easysync_status ]'
      ObjectName:
        Calculation: '"easysync_status"'
        DisplayCalculation:
          Chunk: easysync_status
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Save the payload.'
      Text: Save the payload.
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Note: We wait to save the payload until this point. Otherwise, a
        wipe would have deleted the saved payload.'
      Text: 'Note: We wait to save the payload until this point. Otherwise, a wipe
        would have deleted the saved payload.'
    - enable: 'True'
      id: '79'
      name: Freeze Window
      StepText: Freeze Window
    - enable: 'True'
      id: '7'
      name: New Record/Request
      StepText: New Record/Request
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$debug_pull ]
      Calculation: $$debug_pull
      DisplayCalculation:
        Chunk: $$debug_pull
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ EasySync_Payloads::Payload; $payload ]
      Result:
        Calculation: $payload
        DisplayCalculation:
          Chunk: $payload
      TargetName:
        Calculation: '"EasySync_Payloads::Payload"'
        DisplayCalculation:
          Chunk: EasySync_Payloads::Payload
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ EasySync_Payloads::Payload_Type; Pull Payload
        ]
      Result:
        Calculation: '"Pull Payload"'
        DisplayCalculation:
          Chunk: Pull Payload
      TargetName:
        Calculation: '"EasySync_Payloads::Payload_Type"'
        DisplayCalculation:
          Chunk: EasySync_Payloads::Payload_Type
    - enable: 'True'
      id: '75'
      name: Commit Records/Requests
      StepText: |-
        Commit Records/Requests
        [ No dialog ]
      NoInteract:
        state: 'True'
      Option:
        state: 'False'
      ESSForceCommit:
        state: 'False'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Refresh sync status.'
      Text: Refresh sync status.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $$EasySync_Status; Value:Processing payload... ]
      Value:
        Calculation: '"Processing payload..."'
        DisplayCalculation:
          Chunk: Processing payload...
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $$EasySync_Status
    - enable: 'True'
      id: '167'
      name: Refresh Object
      StepText: 'Refresh Object [ Object Name: easysync_status ]'
      ObjectName:
        Calculation: '"easysync_status"'
        DisplayCalculation:
          Chunk: easysync_status
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the table info.'
      Text: Get the table info.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $tables; Value:Let ( \n[\nbeginning = Position ( $payload
        ; tables¶ ; 1 ; 1 ) + 9;\nend = Position ( $payload ; ¶/tables ; 1 ; 1 );\ntables
        = Middle ( $payload ; beginning ; end - beginning );\ntables = Trim ( tables
        );\ntables = Substitute ( tables ; table ;  );\ntables = Substitute ( tables
        ; /table ;  )\n];\ntables\n) ]"
      Value:
        Calculation: "Let ( \n[\nbeginning = Position ( $payload ; \"<tables>¶\" ;
          1 ; 1 ) + 9;\nend = Position ( $payload ; \"¶</tables>\" ; 1 ; 1 );\ntables
          = Middle ( $payload ; beginning ; end - beginning );\ntables = Trim ( tables
          );\ntables = Substitute ( tables ; \"<table>\" ; \"\" );\ntables = Substitute
          ( tables ; \"</table>\" ; \"\" )\n];\ntables\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( \n[\nbeginning = "
          - Position
          - " ( $payload ; tables¶ ; 1 ; 1 ) + 9;\nend = "
          - Position
          - " ( $payload ; ¶/tables ; 1 ; 1 );\ntables = "
          - Middle
          - " ( $payload ; beginning ; end - beginning );\ntables = "
          - Trim
          - " ( tables );\ntables = "
          - Substitute
          - " ( tables ; table ;  );\ntables = "
          - Substitute
          - |2-
             ( tables ; /table ;  )
            ];
            tables
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $tables
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$debug_pull ]
      Calculation: $$debug_pull
      DisplayCalculation:
        Chunk: $$debug_pull
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: Payload Tables; Message: $tables; Default
        Button: “OK”, Commit: “Yes” ]'
      Title:
        Calculation: '"Payload Tables"'
        DisplayCalculation:
          Chunk: Payload Tables
      Message:
        Calculation: $tables
        DisplayCalculation:
          Chunk: $tables
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"OK"'
          DisplayCalculation:
            Chunk: OK
        - CommitState: 'False'
        - CommitState: 'False'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Create field name value lists for each table.'
      Text: Create field name value lists for each table.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $table; Value:Substitute ( GetValue ( $tables ; $i
        ); /field; ¶ ) ]
      Value:
        Calculation: Substitute ( GetValue ( $tables ; $i ); "</field>"; ¶ )
        DisplayCalculation:
          Chunk:
          - Substitute
          - ' ( '
          - GetValue
          - ' ( $tables ; $i ); /field; ¶ )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $table
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $table_name; Value:GetValue ( $table; 1 ) ]
      Value:
        Calculation: GetValue ( $table; 1 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( $table; 1 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $table_name
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $dyn_code; Value:Let ( [ $  $table_name   = $table
        ]; 1 ) ]
      Value:
        Calculation: '"Let ( [ $" & $table_name & " = $table ]; 1 )"'
        DisplayCalculation:
          Chunk: Let ( [ $  $table_name   = $table ]; 1 )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $dyn_code
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $dyn_code; Value:Evaluate ( $dyn_code ) ]
      Value:
        Calculation: Evaluate ( $dyn_code )
        DisplayCalculation:
          Chunk:
          - Evaluate
          - ' ( $dyn_code )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $dyn_code
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$debug_pull ]
      Calculation: $$debug_pull
      DisplayCalculation:
        Chunk: $$debug_pull
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: Created Field Value List for Table   $table_name;
        Message: Evaluate ( $  $table_name ); Default Button: “OK”, Commit: “Yes”
        ]'
      Title:
        Calculation: '"Created Field Value List for Table " & $table_name'
        DisplayCalculation:
          Chunk: Created Field Value List for Table   $table_name
      Message:
        Calculation: Evaluate ( "$" & $table_name )
        DisplayCalculation:
          Chunk:
          - Evaluate
          - ' ( $  $table_name )'
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"OK"'
          DisplayCalculation:
            Chunk: OK
        - CommitState: 'False'
        - CommitState: 'False'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:$i + 1 ]
      Value:
        Calculation: $i + 1
        DisplayCalculation:
          Chunk: $i + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $i  ValueCount ( $tables ) ]
      Calculation: $i > ValueCount ( $tables )
      DisplayCalculation:
        Chunk:
        - '$i  '
        - ValueCount
        - ' ( $tables )'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the # of records in the payload.'
      Text: 'Get the # of records in the payload.'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $record_count; Value:PatternCount ( $payload; $record_delimiter
        ) - 1 ]
      Value:
        Calculation: PatternCount ( $payload; $record_delimiter ) - 1
        DisplayCalculation:
          Chunk:
          - PatternCount
          - ' ( $payload; $record_delimiter ) - 1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $record_count
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If there are no records to sync...'
      Text: If there are no records to sync...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $record_count = 0 ]
      Calculation: $record_count = 0
      DisplayCalculation:
        Chunk: $record_count = 0
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$delete_pull_payloads ≠ None ]
      Calculation: $$delete_pull_payloads ≠ "None"
      DisplayCalculation:
        Chunk: $$delete_pull_payloads ≠ None
    - enable: 'True'
      id: '9'
      name: Delete Record/Request
      StepText: |-
        Delete Record/Request
        [ No dialog ]
      NoInteract:
        state: 'True'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: "Exit Script [ Result: 1  ¶  \nPull Completed  ¶  \nThere was no data
        that needed to be pulled from the server. ]"
      Calculation: "1 & ¶ & \n\"Pull Completed\" & ¶ & \n\"There was no data that
        needed to be pulled from the server.\""
      DisplayCalculation:
        Chunk: "1  ¶  \nPull Completed  ¶  \nThere was no data that needed to be pulled
          from the server."
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Refresh sync status.'
      Text: Refresh sync status.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $$EasySync_Status; Value:Processing   $record_count   records
        received from server... ]
      Value:
        Calculation: '"Processing " & $record_count & " records received from server..."'
        DisplayCalculation:
          Chunk: Processing   $record_count   records received from server...
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $$EasySync_Status
    - enable: 'True'
      id: '80'
      name: Refresh Window
      StepText: Refresh Window
      Option:
        state: 'False'
      FlushSQLData:
        state: 'False'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Loop over the records.'
      Text: Loop over the records.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $previous_start; Value:0 ]
      Value:
        Calculation: '0'
        DisplayCalculation:
          Chunk: '0'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $previous_start
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Refresh sync status occasionally...'
      Text: Refresh sync status occasionally...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Evaluate ( $$pull_progress_indicator_logic ) ]
      Calculation: Evaluate ( $$pull_progress_indicator_logic )
      DisplayCalculation:
        Chunk:
        - Evaluate
        - ' ( $$pull_progress_indicator_logic )'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $$EasySync_Status; Value:Processing record   $i   of   $record_count  ...
        ]
      Value:
        Calculation: '"Processing record " & $i & " of " & $record_count & "..."'
        DisplayCalculation:
          Chunk: Processing record   $i   of   $record_count  ...
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $$EasySync_Status
    - enable: 'True'
      id: '80'
      name: Refresh Window
      StepText: Refresh Window
      Option:
        state: 'False'
      FlushSQLData:
        state: 'False'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Note: refresh object doesnt seem to work here.'
      Text: 'Note: refresh object doesnt seem to work here.'
    - enable: 'True'
      id: '167'
      name: Refresh Object
      StepText: 'Refresh Object [ Object Name: easysync_status ]'
      ObjectName:
        Calculation: '"easysync_status"'
        DisplayCalculation:
          Chunk: easysync_status
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the record, formatted as a return-delimited value list.'
      Text: Get the record, formatted as a return-delimited value list.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $record; Value:Let ( \n[\n // Note: The +1 in the
        beginning calc is to account for the default carriage return imposed by ExectueSQL.\nbeginning
        = If ( $previous_start  0; Position ( $payload ; $record_delimiter ; $previous_start
        ; 1 ) + Length ( $record_delimiter ) + 1; Position ( $payload; records¶; 1;
        1 ) + 10 );\nend = Position ( $payload ; $record_delimiter ; 1 ; $i + 1 );\n$previous_start
        = end;\nrecord = Middle ( $payload ; beginning ; end - beginning );\n// Encode
        CRLFs that might be found in Base64-encoded container data.\n// This makes
        it easier to treat the fields as a return-delimited value list.\nrecord =
        Substitute ( record ; Char ( 13 )  Char ( 10 ) ; [[CRLF]] );\n// Encode any
        remaining newline characters.\nrecord = Substitute ( record ; ¶ ; [[BR]] );\nrecord
        = Substitute ( record ; $field_delimiter ; ¶ )\n];\nrecord\n) ]"
      Value:
        Calculation: "Let ( \n[\n // Note: The \"+1\" in the \"beginning calc\" is
          to account for the default carriage return imposed by ExectueSQL.\nbeginning
          = If ( $previous_start > 0; Position ( $payload ; $record_delimiter ; $previous_start
          ; 1 ) + Length ( $record_delimiter ) + 1; Position ( $payload; \"<records>¶\";
          1; 1 ) + 10 );\nend = Position ( $payload ; $record_delimiter ; 1 ; $i +
          1 );\n$previous_start = end;\nrecord = Middle ( $payload ; beginning ; end
          - beginning );\n// Encode CRLFs that might be found in Base64-encoded container
          data.\n// This makes it easier to treat the fields as a return-delimited
          value list.\nrecord = Substitute ( record ; Char ( 13 ) & Char ( 10 ) ;
          \"[[CRLF]]\" );\n// Encode any remaining newline characters.\nrecord = Substitute
          ( record ; ¶ ; \"[[BR]]\" );\nrecord = Substitute ( record ; $field_delimiter
          ; ¶ )\n];\nrecord\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( \n[\n "
          - |
            // Note: The +1 in the beginning calc is to account for the default carriage return imposed by ExectueSQL.
          - 'beginning = '
          - If
          - ' ( $previous_start  0; '
          - Position
          - ' ( $payload ; $record_delimiter ; $previous_start ; 1 ) + '
          - Length
          - ' ( $record_delimiter ) + 1; '
          - Position
          - " ( $payload; records¶; 1; 1 ) + 10 );\nend = "
          - Position
          - " ( $payload ; $record_delimiter ; 1 ; $i + 1 );\n$previous_start = end;\nrecord
            = "
          - Middle
          - |2
             ( $payload ; beginning ; end - beginning );
          - |
            // Encode CRLFs that might be found in Base64-encoded container data.
          - |
            // This makes it easier to treat the fields as a return-delimited value list.
          - 'record = '
          - Substitute
          - ' ( record ; '
          - Char
          - ' ( 13 )  '
          - Char
          - |2
             ( 10 ) ; [[CRLF]] );
          - |
            // Encode any remaining newline characters.
          - 'record = '
          - Substitute
          - " ( record ; ¶ ; [[BR]] );\nrecord = "
          - Substitute
          - |2-
             ( record ; $field_delimiter ; ¶ )
            ];
            record
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $record
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$debug_pull ]
      Calculation: $$debug_pull
      DisplayCalculation:
        Chunk: $$debug_pull
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: Payload Record   $i; Message: $record;
        Default Button: “OK”, Commit: “Yes” ]'
      Title:
        Calculation: '"Payload Record " & $i'
        DisplayCalculation:
          Chunk: Payload Record   $i
      Message:
        Calculation: $record
        DisplayCalculation:
          Chunk: $record
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"OK"'
          DisplayCalculation:
            Chunk: OK
        - CommitState: 'False'
        - CommitState: 'False'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the name of the table that is associated with this record.'
      Text: Get the name of the table that is associated with this record.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $table_name; Value:GetValue ( $record ; 1 ) ]
      Value:
        Calculation: GetValue ( $record ; 1 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( $record ; 1 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $table_name
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$debug_pull ]
      Calculation: $$debug_pull
      DisplayCalculation:
        Chunk: $$debug_pull
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: Table Name for Payload Record   $i; Message:
        $table_name; Default Button: “OK”, Commit: “Yes” ]'
      Title:
        Calculation: '"Table Name for Payload Record " & $i'
        DisplayCalculation:
          Chunk: Table Name for Payload Record   $i
      Message:
        Calculation: $table_name
        DisplayCalculation:
          Chunk: $table_name
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"OK"'
          DisplayCalculation:
            Chunk: OK
        - CommitState: 'False'
        - CommitState: 'False'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the names of the fields that are associated with this record.'
      Text: Get the names of the fields that are associated with this record.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $field_names; Value:Evaluate ( $  $table_name ) ]
      Value:
        Calculation: Evaluate ( "$" & $table_name )
        DisplayCalculation:
          Chunk:
          - Evaluate
          - ' ( $  $table_name )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_names
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$debug_pull ]
      Calculation: $$debug_pull
      DisplayCalculation:
        Chunk: $$debug_pull
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: Field Names for Payload Record   $i;
        Message: $field_names; Default Button: “OK”, Commit: “Yes” ]'
      Title:
        Calculation: '"Field Names for Payload Record " & $i'
        DisplayCalculation:
          Chunk: Field Names for Payload Record   $i
      Message:
        Calculation: $field_names
        DisplayCalculation:
          Chunk: $field_names
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"OK"'
          DisplayCalculation:
            Chunk: OK
        - CommitState: 'False'
        - CommitState: 'False'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the ES_Record_UUID value of this record.'
      Text: Get the ES_Record_UUID value of this record.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $ES_Record_UUID; Value:// Note: This is based in VERY large part on Kevin Franks ValuePosition ( theList ; theValue ) function.
        // See: http://filemakerhacks.com/2011/06/12/valueposition-the-function-filemaker-forgot/
        // Thanks Kevin!

        Let( [
        theList = $field_names;
        theValue = ES_Record_UUID[1];
        pLp = ¶  theList  ¶ ;
        pVp = ¶  theValue  ¶ ;
        thePos = Position ( pLp ; pVp ; 1 ; 1 ) ;
        theSegment = Left ( pLp ; thePos ) ;
        theValPos = PatternCount ( theSegment ; ¶ )
        ] ;

        GetValue ( $record ; theValPos )

        ) ]
      Value:
        Calculation: |-
          // Note: This is based in VERY large part on Kevin Frank's "ValuePosition ( theList ; theValue )" function.
          // See: http://filemakerhacks.com/2011/06/12/valueposition-the-function-filemaker-forgot/
          // Thanks Kevin!

          Let( [
          theList = $field_names;
          theValue = "ES_Record_UUID[1]";
          pLp = ¶ & theList & ¶ ;
          pVp = ¶ & theValue & ¶ ;
          thePos = Position ( pLp ; pVp ; 1 ; 1 ) ;
          theSegment = Left ( pLp ; thePos ) ;
          theValPos = PatternCount ( theSegment ; ¶ )
          ] ;

          GetValue ( $record ; theValPos )

          )
        DisplayCalculation:
          Chunk:
          - |
            // Note: This is based in VERY large part on Kevin Franks ValuePosition ( theList ; theValue ) function.
          - |
            // See: http://filemakerhacks.com/2011/06/12/valueposition-the-function-filemaker-forgot/
          - |
            // Thanks Kevin!
          - type: NoRef
            __content__: |2+

          - Let
          - "( [\ntheList = $field_names;\ntheValue = ES_Record_UUID[1];\npLp = ¶
            \ theList  ¶ ;\npVp = ¶  theValue  ¶ ;\nthePos = "
          - Position
          - " ( pLp ; pVp ; 1 ; 1 ) ;\ntheSegment = "
          - Left
          - " ( pLp ; thePos ) ;\ntheValPos = "
          - PatternCount
          - |2+
             ( theSegment ; ¶ )
            ] ;

          - GetValue
          - |2-
             ( $record ; theValPos )

            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $ES_Record_UUID
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$debug_pull ]
      Calculation: $$debug_pull
      DisplayCalculation:
        Chunk: $$debug_pull
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: ES_Record_UUID for Payload Record   $i;
        Message: $ES_Record_UUID; Default Button: “OK”, Commit: “Yes” ]'
      Title:
        Calculation: '"ES_Record_UUID for Payload Record " & $i'
        DisplayCalculation:
          Chunk: ES_Record_UUID for Payload Record   $i
      Message:
        Calculation: $ES_Record_UUID
        DisplayCalculation:
          Chunk: $ES_Record_UUID
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"OK"'
          DisplayCalculation:
            Chunk: OK
        - CommitState: 'False'
        - CommitState: 'False'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Go to the correct row in the Payload Details portal.'
      Text: Go to the correct row in the Payload Details portal.
    - enable: 'True'
      id: '99'
      name: Go to Portal Row
      StepText: |-
        Go to Portal Row [ $i ]
        [ Select; No dialog ]
      NoInteract:
        state: 'True'
      SelectAll:
        state: 'True'
      RowPageLocation:
        value: ByCalculation
      Calculation: $i
      DisplayCalculation:
        Chunk: $i
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Set the Record UUID for the Payload Details record.'
      Text: Set the Record UUID for the Payload Details record.
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ EasySync_Payload_Details::ES_Child_Record_UUID;
        $ES_Record_UUID ]
      Result:
        Calculation: $ES_Record_UUID
        DisplayCalculation:
          Chunk: $ES_Record_UUID
      TargetName:
        Calculation: '"EasySync_Payload_Details::ES_Child_Record_UUID"'
        DisplayCalculation:
          Chunk: EasySync_Payload_Details::ES_Child_Record_UUID
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ EasySync_Payload_Details::Payload_Type; Payload
        Detail ]
      Result:
        Calculation: '"Payload Detail"'
        DisplayCalculation:
          Chunk: Payload Detail
      TargetName:
        Calculation: '"EasySync_Payload_Details::Payload_Type"'
        DisplayCalculation:
          Chunk: EasySync_Payload_Details::Payload_Type
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Loop over the field names.'
      Text: Loop over the field names.
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#We skip the first value because it is really the table name that
        the record is from.'
      Text: We skip the first value because it is really the table name that the record
        is from.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $f; Value:2 ]
      Value:
        Calculation: '2'
        DisplayCalculation:
          Chunk: '2'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $f
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the name of the field.'
      Text: Get the name of the field.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $field_name; Value:GetValue ( $field_names; $f ) ]
      Value:
        Calculation: GetValue ( $field_names; $f )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( $field_names; $f )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_name
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If this is not a container...'
      Text: If this is not a container...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Left ( $field_name ; 4 ) ≠ B64_ ]
      Calculation: Left ( $field_name ; 4 ) ≠ "B64_"
      DisplayCalculation:
        Chunk:
        - Left
        - ' ( $field_name ; 4 ) ≠ B64_'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $field_value; Value:Let (
        [
        value = GetValue ( $record ; $f );
        value = Substitute ( value ; [[BR]] ; ¶ )
        ];
        value
        ) ]
      Value:
        Calculation: |-
          Let (
          [
          value = GetValue ( $record ; $f );
          value = Substitute ( value ; "[[BR]]" ; ¶ )
          ];
          value
          )
        DisplayCalculation:
          Chunk:
          - Let
          - " (\n[\nvalue = "
          - GetValue
          - " ( $record ; $f );\nvalue = "
          - Substitute
          - |2-
             ( value ; [[BR]] ; ¶ )
            ];
            value
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_value
    - enable: 'True'
      id: '69'
      name: Else
      StepText: Else
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $field_name; Value:Right ( $field_name; Length ( $field_name
        ) - 4 ) ]
      Value:
        Calculation: Right ( $field_name; Length ( $field_name ) - 4 )
        DisplayCalculation:
          Chunk:
          - Right
          - ' ( $field_name; '
          - Length
          - ' ( $field_name ) - 4 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_name
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $field_value; Value:GetValue ( $record ; $f ) ]
      Value:
        Calculation: GetValue ( $record ; $f )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( $record ; $f )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_value
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ not IsEmpty ( $field_value ) ]
      Calculation: not IsEmpty ( $field_value )
      DisplayCalculation:
        Chunk:
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( $field_value )'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $field_value; Value:Let (
        [
        value = $field_value;
        value = Substitute ( value ; /b64;  );
        fileNameWithExtension = GetValue ( Substitute ( value ; b64; ¶ ); 1 );
        encoded = Substitute ( value; fileNameWithExtension  b64;  );
        encoded = Substitute ( encoded ; [[CRLF]] ; Char ( 13 )  Char ( 10 ) );
        decoded = Base64Decode ( encoded; fileNameWithExtension )
        ];
        decoded
        ) ]
      Value:
        Calculation: |-
          Let (
          [
          value = $field_value;
          value = Substitute ( value ; "</b64>"; "" );
          fileNameWithExtension = GetValue ( Substitute ( value ; "<b64>"; "¶" ); 1 );
          encoded = Substitute ( value; fileNameWithExtension & "<b64>"; "" );
          encoded = Substitute ( encoded ; "[[CRLF]]" ; Char ( 13 ) & Char ( 10 ) );
          decoded = Base64Decode ( encoded; fileNameWithExtension )
          ];
          decoded
          )
        DisplayCalculation:
          Chunk:
          - Let
          - " (\n[\nvalue = $field_value;\nvalue = "
          - Substitute
          - " ( value ; /b64;  );\nfileNameWithExtension = "
          - GetValue
          - ' ( '
          - Substitute
          - " ( value ; b64; ¶ ); 1 );\nencoded = "
          - Substitute
          - " ( value; fileNameWithExtension  b64;  );\nencoded = "
          - Substitute
          - ' ( encoded ; [[CRLF]] ; '
          - Char
          - ' ( 13 )  '
          - Char
          - " ( 10 ) );\ndecoded = "
          - Base64Decode
          - |2-
             ( encoded; fileNameWithExtension )
            ];
            decoded
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_value
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If the value of this field has changed...'
      Text: If the value of this field has changed...
    - enable: 'True'
      id: '68'
      name: If
      StepText: |-
        If [ not Exact ( $field_value ; Evaluate ( $table_name  ::  $field_name ) )

        // v1.2: $field_value ≠ Evaluate ( $table_name  ::  $field_name ) ]
      Calculation: |-
        not Exact ( $field_value ; Evaluate ( $table_name & "::" & $field_name ) )

        // v1.2: $field_value ≠ Evaluate ( $table_name & "::" & $field_name )
      DisplayCalculation:
        Chunk:
        - not
        - type: NoRef
          __content__: ' '
        - Exact
        - ' ( $field_value ; '
        - Evaluate
        - |2+
           ( $table_name  ::  $field_name ) )

        - '// v1.2: $field_value ≠ Evaluate ( $table_name  ::  $field_name )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Update the field.'
      Text: Update the field.
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: 'Set Field By Name [ $table_name  ::  $field_name; $field_value ]'
      Result:
        Calculation: $field_value
        DisplayCalculation:
          Chunk: $field_value
      TargetName:
        Calculation: $table_name & "::" & $field_name
        DisplayCalculation:
          Chunk: '$table_name  ::  $field_name'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If an error has occurred...'
      Text: If an error has occurred...
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#And if it is not a 102 (Field is missing) error...'
      Text: And if it is not a 102 (Field is missing) error...
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Note: We ignore 102s because they are indicative of a field in the
        hosted DB that is simply not mirrored in the remote DB.'
      Text: 'Note: We ignore 102s because they are indicative of a field in the hosted
        DB that is simply not mirrored in the remote DB.'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $LastError; Value:Get ( LastError ) ]
      Value:
        Calculation: Get ( LastError )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - LastError
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $LastError
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $LastError ≠ 0 and $LastError ≠ 102 ]
      Calculation: $LastError ≠ 0 and $LastError ≠ 102
      DisplayCalculation:
        Chunk:
        - '$LastError ≠ 0 '
        - and
        - ' $LastError ≠ 102'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Rollback the changes.'
      Text: Rollback the changes.
    - enable: 'True'
      id: '51'
      name: Revert Record/Request
      StepText: |-
        Revert Record/Request
        [ No dialog ]
      NoInteract:
        state: 'True'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$delete_pull_payloads = All ]
      Calculation: $$delete_pull_payloads = "All"
      DisplayCalculation:
        Chunk: $$delete_pull_payloads = All
    - enable: 'True'
      id: '9'
      name: Delete Record/Request
      StepText: |-
        Delete Record/Request
        [ No dialog ]
      NoInteract:
        state: 'True'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: "Exit Script [ Result: 0  ¶  \nPull Error  ¶  \nAn error occurred
        when attempting to process the pulled payload. (Error code:   $LastError  )
        ]"
      Calculation: "0 & ¶ & \n\"Pull Error\" & ¶ & \n\"An error occurred when attempting
        to process the pulled payload. (Error code: \" & $LastError & \")\""
      DisplayCalculation:
        Chunk: "0  ¶  \nPull Error  ¶  \nAn error occurred when attempting to process
          the pulled payload. (Error code:   $LastError  )"
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $f; Value:$f + 1 ]
      Value:
        Calculation: $f + 1
        DisplayCalculation:
          Chunk: $f + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $f
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $f  ValueCount ( $field_names ) ]
      Calculation: $f > ValueCount ( $field_names )
      DisplayCalculation:
        Chunk:
        - '$f  '
        - ValueCount
        - ' ( $field_names )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#End loop that sets the fields.'
      Text: End loop that sets the fields.
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:$i + 1 ]
      Value:
        Calculation: $i + 1
        DisplayCalculation:
          Chunk: $i + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $i  $record_count ]
      Calculation: $i > $record_count
      DisplayCalculation:
        Chunk: $i  $record_count
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#End loop over the records.'
      Text: End loop over the records.
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Try to commit the transaction.'
      Text: Try to commit the transaction.
    - enable: 'True'
      id: '75'
      name: Commit Records/Requests
      StepText: |-
        Commit Records/Requests
        [ No dialog ]
      NoInteract:
        state: 'True'
      Option:
        state: 'False'
      ESSForceCommit:
        state: 'False'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If an error has occurred...'
      Text: If an error has occurred...
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $LastError; Value:Get ( LastError ) ]
      Value:
        Calculation: Get ( LastError )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - LastError
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $LastError
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $LastError ≠ 0 ]
      Calculation: $LastError ≠ 0
      DisplayCalculation:
        Chunk: $LastError ≠ 0
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Rollback the changes.'
      Text: Rollback the changes.
    - enable: 'True'
      id: '51'
      name: Revert Record/Request
      StepText: |-
        Revert Record/Request
        [ No dialog ]
      NoInteract:
        state: 'True'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $Delete_Payloads = All ]
      Calculation: $Delete_Payloads = "All"
      DisplayCalculation:
        Chunk: $Delete_Payloads = All
    - enable: 'True'
      id: '9'
      name: Delete Record/Request
      StepText: |-
        Delete Record/Request
        [ No dialog ]
      NoInteract:
        state: 'True'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: "Exit Script [ Result: 0  ¶  \nPull Error  ¶  \nAn error occurred
        when attempting to commit the data in the pulled payload. (Error code:   $LastError
        \ ) ]"
      Calculation: "0 & ¶ & \n\"Pull Error\" & ¶ & \n\"An error occurred when attempting
        to commit the data in the pulled payload. (Error code: \" & $LastError & \")\""
      DisplayCalculation:
        Chunk: "0  ¶  \nPull Error  ¶  \nAn error occurred when attempting to commit
          the data in the pulled payload. (Error code:   $LastError  )"
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Delete the payload.'
      Text: Delete the payload.
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$delete_pull_payloads = All or $$delete_pull_payloads = Successful
        ]
      Calculation: $$delete_pull_payloads = "All" or $$delete_pull_payloads = "Successful"
      DisplayCalculation:
        Chunk:
        - '$$delete_pull_payloads = All '
        - or
        - ' $$delete_pull_payloads = Successful'
    - enable: 'True'
      id: '9'
      name: Delete Record/Request
      StepText: |-
        Delete Record/Request
        [ No dialog ]
      NoInteract:
        state: 'True'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Return the success code to the caller.'
      Text: Return the success code to the caller.
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: "Exit Script [ Result: 1  ¶  \nPull Success  ¶  \n\nRemote data has
        been successfully pulled from the server. (Elapsed Time:   GetAsTime ( Get
        ( CurrentTimeStamp ) - $start )  ) ]"
      Calculation: "1 & ¶ & \n\"Pull Success\" & ¶ & \n\n\"Remote data has been successfully
        pulled from the server. (Elapsed Time: \" & GetAsTime ( Get ( CurrentTimeStamp
        ) - $start ) & \")\""
      DisplayCalculation:
        Chunk:
        - "1  ¶  \nPull Success  ¶  \n\nRemote data has been successfully pulled from
          the server. (Elapsed Time:   "
        - GetAsTime
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeStamp
        - ' ) - $start )  )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
