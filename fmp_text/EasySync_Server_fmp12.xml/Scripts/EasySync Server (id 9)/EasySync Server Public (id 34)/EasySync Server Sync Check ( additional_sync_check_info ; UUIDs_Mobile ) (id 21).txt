#################################################################################
# PURPOSE:
#    Receives list of UUIDs from synced table on the mobile device, compares it to those on the host, and returns the difference.
#
# CONTEXT:
#
# PARAMETERS:
#    $additional_sync_check_info
#    $UUIDs_Mobile
#
# RETURNS:
#    $error | a dictionary containing error data
#    $runtime | number of seconds this script was running (with millisecond precision)
#    $diff | 
#
# VARIABLES:
#
# DEPENDENCIES:
#
# NOTES:
#
# REVISIONS:
#    2014-05-02		Tim Dietrich (timdietrich@me.com)	Initial version.2014-05-05		Tim Dietrich (timdietrich@me.com)	Added code so that excluded records (ES_Exclude = 1) are included in the DIFF.	In other words, we are forcing the mobile device to delete records that they are holding	that have been excluded since the last sync.2014-05-15	Tim Dietrich (timdietrich@me.com)	Delimiting the underscore used in the query that gets ES_ tables.2014-06-02	Tim Dietrich (timdietrich@me.com)	Properly escapes the ES_ table names.	Supports passing additional info (via $$additional_sync_check_info). 
#################################################################################
Set Variable [ $~script.start; Value:Get ( CurrentTimeUTCMilliseconds ) ]
Set Variable [ $~script.errorType; Value:"Module: EasySync Client" ]
#
#
#
Loop
# single-pass loop for error trapping
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"ASSIGN PARAMETERS" ]
#================================================================================
If [ /* assign script parameter to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& Get ( ScriptParameter )	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 2 ;	theErrorDescription = "Invalid Parameter" ;	theErrorInfo = "An error occurred when evaluating the script parameter as let notation" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"GET LIST OF TABLES TO SYNC" ]
#================================================================================
Set Variable [ $sync_tables; Value:ExecuteSQL ( "SELECT TableName FROM FileMaker_Tables WHERE TableName LIKE 'ES\_%'"; "|"; ¶ ) ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"GET UUIDS" ]
#================================================================================
#Init the SELECT statement...
Set Variable [ $select; Value:"" ]
#
#Loop over the ES tables...
Set Variable [ $i; Value:1 ]
Loop
Set Variable [ $sync_table; Value:GetValue ( $sync_tables ; $i ) ]
Set Variable [ $select; Value:$select & If ( not IsEmpty ( $select ); " UNION ALL "; "" ) &"SELECT ES_Record_UUID FROM \\\"" & $sync_table & "\\\" WHERE COALESCE ( ES_Exclude, 0 ) = 0" ]
Set Variable [ $i; Value:$i + 1 ]
Exit Loop If [ $i > ValueCount ( $sync_tables ) ]
End Loop
#
#Create the ExecuteSQL call.
Set Variable [ $executesql; Value:"ExecuteSQL ( \"" & $select & "\"; \"\"; \"\")" ]
#
#Execute the SELECT statement.
Set Variable [ $UUIDs_Host; Value:Evaluate ( $executesql ) ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"UUID DIFF ANALYSIS" ]
#================================================================================
#Init the diff list.
Set Variable [ $diff; Value:"" ]
#
#Loop over UUIDs on mobile...
Set Variable [ $i; Value:1 ]
Loop
#
Set Variable [ $UUID_Mobile; Value:GetValue ( $UUIDs_Mobile ; $i ) ]
#
#If this UUID is not on the server...
If [ not PatternCount ( $UUIDs_Host ; $UUID_Mobile ) ]
#Add it to the diff list.
Set Variable [ $diff; Value:$diff& If ( not IsEmpty ( $diff ) ; ¶ )& $UUID_Mobile ]
End If
#
Set Variable [ $i; Value:$i + 1 ]
Exit Loop If [ $i > ValueCount ( $UUIDs_Mobile ) ]
#
End Loop
#
#
#
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# end single-pass loop for error trapping
Exit Loop If [ True ]
End Loop
#
#
#
#
Set Variable [ $~script.runtime; Value:( Get ( CurrentTimeUTCMilliseconds ) - $~script.start ) / 1000 ]
#
#
Set Variable [ $!; Value:""/** * This is a step that will not return an error. * * It's used to clear any errors reported by Get ( LastError ), so a calling script can use * Get ( LastError ) to test if an error occurred with the Perform Script step. * */ ]
Exit Script [ Result: "$error = " & Quote ( $error ) & " ;¶"& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶"& "$diff = " & Quote ( $diff ) & " ;¶" ]
#


---
Script:
  includeInMenu: 'False'
  runFullAccess: 'False'
  id: '21'
  name: 'EasySync Server: Sync Check ( additional_sync_check_info ; UUIDs_Mobile )'
  StepList:
    Step:
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#################################################################################'
      Text: '################################################################################'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PURPOSE:'
      Text: ' PURPOSE:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    Receives list of UUIDs from synced table on the mobile device,
        compares it to those on the host, and returns the difference.'
      Text: '    Receives list of UUIDs from synced table on the mobile device, compares
        it to those on the host, and returns the difference.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# CONTEXT:'
      Text: ' CONTEXT:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PARAMETERS:'
      Text: ' PARAMETERS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $additional_sync_check_info'
      Text: '    $additional_sync_check_info'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $UUIDs_Mobile'
      Text: '    $UUIDs_Mobile'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# RETURNS:'
      Text: ' RETURNS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $error | a dictionary containing error data'
      Text: '    $error | a dictionary containing error data'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $runtime | number of seconds this script was running (with millisecond
        precision)'
      Text: '    $runtime | number of seconds this script was running (with millisecond
        precision)'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $diff | '
      Text: '    $diff | '
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# VARIABLES:'
      Text: ' VARIABLES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# DEPENDENCIES:'
      Text: ' DEPENDENCIES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# NOTES:'
      Text: ' NOTES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# REVISIONS:'
      Text: ' REVISIONS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: "#    \n2014-05-02\t\n\tTim Dietrich (timdietrich@me.com)\n\tInitial
        version.\n\n2014-05-05\t\n\tTim Dietrich (timdietrich@me.com)\n\tAdded code
        so that excluded records (ES_Exclude = 1) are included in the DIFF.\n\tIn
        other words, we are forcing the mobile device to delete records that they
        are holding\n\tthat have been excluded since the last sync.\n\n2014-05-15\n\tTim
        Dietrich (timdietrich@me.com)\n\tDelimiting the underscore used in the query
        that gets ES_ tables.\n\n2014-06-02\n\tTim Dietrich (timdietrich@me.com)\n\tProperly
        escapes the ES_ table names.\n\tSupports passing additional info (via $$additional_sync_check_info). "
      Text: "    \n2014-05-02\t\n\tTim Dietrich (timdietrich@me.com)\n\tInitial version.\n\n2014-05-05\t\n\tTim
        Dietrich (timdietrich@me.com)\n\tAdded code so that excluded records (ES_Exclude
        = 1) are included in the DIFF.\n\tIn other words, we are forcing the mobile
        device to delete records that they are holding\n\tthat have been excluded
        since the last sync.\n\n2014-05-15\n\tTim Dietrich (timdietrich@me.com)\n\tDelimiting
        the underscore used in the query that gets ES_ tables.\n\n2014-06-02\n\tTim
        Dietrich (timdietrich@me.com)\n\tProperly escapes the ES_ table names.\n\tSupports
        passing additional info (via $$additional_sync_check_info). "
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#################################################################################'
      Text: '################################################################################'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.start; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.start
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: 'Set Variable [ $~script.errorType; Value:"Module: EasySync Client"
        ]'
      Value:
        Calculation: '"Module: EasySync Client"'
        DisplayCalculation:
          Chunk: '"Module: EasySync Client"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.errorType
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# single-pass loop for error trapping'
      Text: ' single-pass loop for error trapping'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
      Text: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"ASSIGN PARAMETERS" ]
      Value:
        Calculation: '"ASSIGN PARAMETERS"'
        DisplayCalculation:
          Chunk: '"ASSIGN PARAMETERS"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: "If [ /* assign script parameter to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptParameter )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) ) ]"
      Calculation: "/* assign script parameter to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptParameter )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign script parameter to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& "
        - Get
        - ' ( '
        - ScriptParameter
        - " )\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n) )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription
        = \"Invalid Parameter\" ;\n\ttheErrorInfo = \"An error occurred when evaluating
        the script parameter as let notation\" ;\n\ttheErrorType = $~script.errorType
        ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" &
        Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription = \"Invalid
        Parameter\" ;\n\ttheErrorInfo = \"An error occurred when evaluating the script
        parameter as let notation\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error
        = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode =
        \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription = \"Invalid Parameter\"
          ;\n\ttheErrorInfo = \"An error occurred when evaluating the script parameter
          as let notation\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error
          = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"GET LIST OF TABLES TO SYNC"
        ]
      Value:
        Calculation: '"GET LIST OF TABLES TO SYNC"'
        DisplayCalculation:
          Chunk: '"GET LIST OF TABLES TO SYNC"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $sync_tables; Value:ExecuteSQL ( "SELECT TableName
        FROM FileMaker_Tables WHERE TableName LIKE 'ES\_%'"; "|"; ¶ ) ]
      Value:
        Calculation: ExecuteSQL ( "SELECT TableName FROM FileMaker_Tables WHERE TableName
          LIKE 'ES\_%'"; "|"; ¶ )
        DisplayCalculation:
          Chunk:
          - ExecuteSQL
          - ' ( "SELECT TableName FROM FileMaker_Tables WHERE TableName LIKE ''ES\_%''";
            "|"; ¶ )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $sync_tables
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"GET UUIDS" ]
      Value:
        Calculation: '"GET UUIDS"'
        DisplayCalculation:
          Chunk: '"GET UUIDS"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Init the SELECT statement...'
      Text: Init the SELECT statement...
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $select; Value:"" ]
      Value:
        Calculation: '""'
        DisplayCalculation:
          Chunk: '""'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $select
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Loop over the ES tables...'
      Text: Loop over the ES tables...
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $sync_table; Value:GetValue ( $sync_tables ; $i ) ]
      Value:
        Calculation: GetValue ( $sync_tables ; $i )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( $sync_tables ; $i )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $sync_table
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $select; Value:$select & If ( not IsEmpty ( $select ); " UNION ALL "; "" ) &
        "SELECT ES_Record_UUID FROM \\\"" & $sync_table & "\\\" WHERE COALESCE ( ES_Exclude, 0 ) = 0" ]
      Value:
        Calculation: |-
          $select & If ( not IsEmpty ( $select ); " UNION ALL "; "" ) &
          "SELECT ES_Record_UUID FROM \\\"" & $sync_table & "\\\" WHERE COALESCE ( ES_Exclude, 0 ) = 0"
        DisplayCalculation:
          Chunk:
          - '$select & '
          - If
          - ' ( '
          - not
          - type: NoRef
            __content__: ' '
          - IsEmpty
          - |2-
             ( $select ); " UNION ALL "; "" ) &
            "SELECT ES_Record_UUID FROM \\\"" & $sync_table & "\\\" WHERE COALESCE ( ES_Exclude, 0 ) = 0"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $select
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:$i + 1 ]
      Value:
        Calculation: $i + 1
        DisplayCalculation:
          Chunk: $i + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $i > ValueCount ( $sync_tables ) ]
      Calculation: $i > ValueCount ( $sync_tables )
      DisplayCalculation:
        Chunk:
        - '$i > '
        - ValueCount
        - ' ( $sync_tables )'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Create the ExecuteSQL call.'
      Text: Create the ExecuteSQL call.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $executesql; Value:"ExecuteSQL ( \"" & $select & "\";
        \"\"; \"\")" ]
      Value:
        Calculation: '"ExecuteSQL ( \"" & $select & "\"; \"\"; \"\")"'
        DisplayCalculation:
          Chunk: '"ExecuteSQL ( \"" & $select & "\"; \"\"; \"\")"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $executesql
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Execute the SELECT statement.'
      Text: Execute the SELECT statement.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $UUIDs_Host; Value:Evaluate ( $executesql ) ]
      Value:
        Calculation: Evaluate ( $executesql )
        DisplayCalculation:
          Chunk:
          - Evaluate
          - ' ( $executesql )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $UUIDs_Host
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"UUID DIFF ANALYSIS" ]
      Value:
        Calculation: '"UUID DIFF ANALYSIS"'
        DisplayCalculation:
          Chunk: '"UUID DIFF ANALYSIS"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Init the diff list.'
      Text: Init the diff list.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $diff; Value:"" ]
      Value:
        Calculation: '""'
        DisplayCalculation:
          Chunk: '""'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $diff
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Loop over UUIDs on mobile...'
      Text: Loop over UUIDs on mobile...
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $UUID_Mobile; Value:GetValue ( $UUIDs_Mobile ; $i )
        ]
      Value:
        Calculation: GetValue ( $UUIDs_Mobile ; $i )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( $UUIDs_Mobile ; $i )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $UUID_Mobile
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If this UUID is not on the server...'
      Text: If this UUID is not on the server...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ not PatternCount ( $UUIDs_Host ; $UUID_Mobile ) ]
      Calculation: not PatternCount ( $UUIDs_Host ; $UUID_Mobile )
      DisplayCalculation:
        Chunk:
        - not
        - type: NoRef
          __content__: ' '
        - PatternCount
        - ' ( $UUIDs_Host ; $UUID_Mobile )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Add it to the diff list.'
      Text: Add it to the diff list.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $diff; Value:$diff
        & If ( not IsEmpty ( $diff ) ; ¶ )
        & $UUID_Mobile ]
      Value:
        Calculation: |-
          $diff
          & If ( not IsEmpty ( $diff ) ; ¶ )
          & $UUID_Mobile
        DisplayCalculation:
          Chunk:
          - "$diff\n& "
          - If
          - ' ( '
          - not
          - type: NoRef
            __content__: ' '
          - IsEmpty
          - |2-
             ( $diff ) ; ¶ )
            & $UUID_Mobile
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $diff
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:$i + 1 ]
      Value:
        Calculation: $i + 1
        DisplayCalculation:
          Chunk: $i + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $i > ValueCount ( $UUIDs_Mobile ) ]
      Calculation: $i > ValueCount ( $UUIDs_Mobile )
      DisplayCalculation:
        Chunk:
        - '$i > '
        - ValueCount
        - ' ( $UUIDs_Mobile )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'
      Text: ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# end single-pass loop for error trapping'
      Text: ' end single-pass loop for error trapping'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ True ]
      Calculation: 'True'
      DisplayCalculation:
        Chunk: 'True'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.runtime; Value:( Get ( CurrentTimeUTCMilliseconds
        ) - $~script.start ) / 1000 ]
      Value:
        Calculation: ( Get ( CurrentTimeUTCMilliseconds ) - $~script.start ) / 1000
        DisplayCalculation:
          Chunk:
          - '( '
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $~script.start ) / 1000'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.runtime
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $!; Value:""
        /**
         * This is a step that will not return an error.
         *
         * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
         * Get ( LastError ) to test if an error occurred with the Perform Script step.
         *
         */ ]
      Value:
        Calculation: |-
          ""
          /**
           * This is a step that will not return an error.
           *
           * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
           * Get ( LastError ) to test if an error occurred with the Perform Script step.
           *
           */
        DisplayCalculation:
          Chunk: |-
            ""
            /**
             * This is a step that will not return an error.
             *
             * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
             * Get ( LastError ) to test if an error occurred with the Perform Script step.
             *
             */
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $!
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: |-
        Exit Script [ Result: "$error = " & Quote ( $error ) & " ;¶"
        & "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶"
        & "$diff = " & Quote ( $diff ) & " ;¶" ]
      Calculation: |-
        "$error = " & Quote ( $error ) & " ;¶"
        & "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶"
        & "$diff = " & Quote ( $diff ) & " ;¶"
      DisplayCalculation:
        Chunk:
        - '"$error = " & '
        - Quote
        - " ( $error ) & \" ;¶\"\n& \"$runtime = \" & "
        - GetAsNumber
        - " ( $~script.runtime ) & \" ;¶\"\n& \"$diff = \" & "
        - Quote
        - ' ( $diff ) & " ;¶"'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
