#################################################################################
# PURPOSE:
#    Processes a "pull" request from the client by building a pull package.
#
# CONTEXT: EasySync_Payloads
#
# PARAMETERS: (let notation format)
#    miscellaneous client dataDaniel Smith: I'm not sure what these parameters are used for, yet
#
# RETURNS:
#    $error | a dictionary containing error data
#    $runtime | number of seconds this script was running (with millisecond precision)
#    $payload_uuid | id of payload created
#
# VARIABLES:
#
# DEPENDENCIES:
#
# NOTES:
#
# REVISIONS:
#    2015-08-21	 Daniel Smith dansmith65@gmail.com	- never return the payload; always save it	- always return let encoded result2014-04-16			Tim Dietrich (timdietrich@me.com)	Initial version.2014-04-16			Tim Dietrich (timdietrich@me.com)	The push and pull timestamps are now being pushed by the client in a	SQL-friendly format, to avoid potential differences in timestamp formats	between the client and server.	2014-04-20	Tim Dietrich (timdietrich@me.com)	Mods to resolve "simultaneous sync" issues.2014-04-21	Tim Dietrich (timdietrich@me.com)	Resolves issues with non-SQL compliant table names.2014-04-22	Tim Dietrich (timdietrich@me.com)	Modified the code that determines what records to pull. Previously we tried to	prevent "round-tripping" the data that had just been pulled. That failed miserably,	especially for users syncing from multiple devices. It also caused sync issues	in cases were record changes were rejected due to the conflict resolution being	used. See the release notes for more info.2014-04-23	Tim Dietrich (timdietrich@me.com)	Added code to support the "initial sync" function of the EasySync demo database.	See " Here's the SELECT statement that is used to select the data for the payload" 	comment / code for details.	2014-04-22	Tim Dietrich (timdietrich@me.com)	Added support for repeating fields.2014-04-28	Tim Dietrich (timdietrich@me.com)	When selecting records for inclusing, we now look at the ID of the device that last	updated the record so that we don't "round trip" the data that was just pushed.2014-04-28	Tim Dietrich (timdietrich@me.com)	Minor change to account for a user who has wiped / reset their mobile database.	Allows them to pull records that they last touched via that device.2014-05-02	Tim Dietrich (timdietrich@me.com)	Modified the SELECT statement that gets the list of tables to be synced, so that the underscore	escaped. Thanks to Paul Jansen (of APJ Computing Solutions - http://www.apjuk.com/) for	reporting this bug.2014-05-04	Tim Dietrich (timdietrich@me.com)	Addess support for Push/Pull-only tables.
#################################################################################
Set Variable [ $~script.start; Value:Get ( CurrentTimeUTCMilliseconds ) ]
Set Variable [ $~script.errorType; Value:"Module: EasySync Server" ]
#
#
#
#Load settings.
Perform Script [ “EasySync Server: Config: Load” ]
#
#
#
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 5 ;	~message = "start script"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#
#
#
#
#
Loop
# single-pass loop for error trapping
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"ASSIGN PARAMETERS" ]
#================================================================================
If [ /* assign script parameter to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& Get ( ScriptParameter )	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 2 ;	theErrorDescription = "Invalid Parameter" ;	theErrorInfo = "An error occurred when evaluating the script parameter as let notation" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"MODIFY ENVIRONMENT" ]
#================================================================================
#Prevent the user from aborting, and we'll handle errors, so suppress those...
Allow User Abort [ Off ]
Set Error Capture [ On ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"Get all of the tables that are to be synced." ]
#================================================================================
#Get all of the tables that are to be synced.
Set Variable [ $sync_tables; Value:ExecuteSQL ( "SELECT * FROM FileMaker_Tables WHERE ( TableName LIKE 'ES\_%' ) AND ( TableName NOT LIKE 'ES\_PUSH\_%' )"; "</col>"; ¶ ) ]
If [ IsEmpty ( $sync_tables ) ]
Show Custom Dialog [ Title: "Sync Error"; Message: "There are no tables configured for syncing."; Default Button: “OK”, Commit: “Yes” ]
# TODO: determine what error code to use here(may want to revise the server's ping script before I do this)
Exit Loop If [ Let ( [	theErrorCode = -1 ;	theErrorDescription = "No tables configured for syncing" ;	theErrorInfo = "" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Sync Tables: " & $sync_tables] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"Loop over the tables to be synced" ]
#================================================================================
#Initalize table info portion of the payload.
Set Variable [ $table_info; Value:"" ]
#
#Initalize records portion of the payload.
Set Variable [ $records; Value:"" ]
#
#Loop over the tables to be synced...
Set Variable [ $i; Value:1 ]
Loop
#
#Get the table's name.
Set Variable [ $sync_table; Value:Let ( [	$t = GetValue ( $sync_tables ; $i );	$t = Substitute ( $t; "</col>"; ¶ )] ;	GetValue ( $t ; 1 )) ]
#
#Get the names (and # of reps) of the fields in this table.
#Note that fields prefixed with "EXCL_" are excluded from the payload.
#Note that calculated and global fields are also excluded.
Set Variable [ $sync_fields; Value:ExecuteSQL ( "SELECT FieldName, FieldReps FROM FileMaker_Fields WHERE ( TableName = ? ) AND ( ( FieldClass = 'Normal' ) OR ( FieldName LIKE 'B64_%' ) ) AND ( FieldName NOT LIKE 'EXCL_%' ) AND ( FieldName <> 'ES_Exclude' ) AND ( FieldType NOT LIKE 'global%')"; "|"; ¶; $sync_table ) ]
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Fields in " & $sync_table & ": " & $sync_fields] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#
#
#Reformat the field names so that repetitions are considered.
Set Variable [ $fields; Value:$sync_table & "</field>" ]
Set Variable [ $f; Value:1 ]
Loop
Set Variable [ $field_name; Value:Let ( [field_combo_raw = GetValue ( $sync_fields ; $f ); // The value pulled from the query. Example: Some_Field|5field_combo_list = Substitute ( field_combo_raw; "|"; ¶ ) // Convert the value to a value list.];GetValue ( field_combo_list; 1 )) ]
Set Variable [ $field_reps; Value:Let ( [field_combo_raw = GetValue ( $sync_fields ; $f ); // The value pulled from the query. Example: Some_Field|5field_combo_list = Substitute ( field_combo_raw; "|"; ¶ ) // Convert the value to a value list.];GetValue ( field_combo_list; 2 )) ]
Set Variable [ $r; Value:1 ]
Loop
Set Variable [ $fields; Value:$fields & $field_name & "[" & $r & "]</field>" ]
Set Variable [ $r; Value:$r + 1 ]
Exit Loop If [ $r > GetAsNumber ( $field_reps )// v1.2: $r > $field_reps ]
End Loop
Set Variable [ $f; Value:$f + 1 ]
Exit Loop If [ $f > ValueCount ( $sync_fields ) ]
End Loop
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Reformatted Fields in " & $sync_table & ": " & $fields] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#Add this table's info to the running "table_info."
Set Variable [ $table_info; Value:If ( not IsEmpty ( $table_info ); $table_info & ¶; "" ) & $fields & "</table>" ]
#
#
#
#Loop over the fields in the table to create the fields portion of what will be the SELECT statement...
Set Variable [ $dyn_sql; Value:"'" & $sync_table & "'" ]
Set Variable [ $j; Value:1 ]
Loop
Set Variable [ $field_name; Value:Let ( [field_combo_raw = GetValue ( $sync_fields ; $j ); // The value pulled from the query. Example: Some_Field|5field_combo_list = Substitute ( field_combo_raw; "|"; ¶ ) // Convert the value to a value list.];GetValue ( field_combo_list; 1 )) ]
Set Variable [ $field_reps; Value:Let ( [field_combo_raw = GetValue ( $sync_fields ; $j ); // The value pulled from the query. Example: Some_Field|5field_combo_list = Substitute ( field_combo_raw; "|"; ¶ ) // Convert the value to a value list.];GetValue ( field_combo_list; 2 )) ]
#
#Loop over the reps...
Set Variable [ $r; Value:1 ]
Loop
Set Variable [ $dyn_sql; Value:$dyn_sql & ", '' || \\\"" & $field_name & "\\\"" & "[" & $r & "]" ]
Set Variable [ $r; Value:$r + 1 ]
Exit Loop If [ $r > GetAsNumber ( $field_reps )// v1.2: $r > $field_reps ]
End Loop
#
Set Variable [ $j; Value:$j + 1 ]
Exit Loop If [ $j > ValueCount ( $sync_fields ) ]
End Loop
#
#
#
#Add this table's fields to the SELECT statement.
#Note: This is the SELECT statement that is used to select the data for the payload.
#You can add your own custom business rules here to determine what data is sent to the user, by looking at things like the table name being worked on, the user / device that has requested the data, etc. Dynamically add your conditions to the WHERE clause.
Set Variable [ $dyn_sql; Value:"SELECT " & $dyn_sql & ", '" & $$record_delimiter & "'" &" FROM \\\"" & $sync_table & "\\\"" & " WHERE " &// Exclude records flagged for sync exclusion."( COALESCE ( ES_Exclude, 0 ) = 0 ) " &// If the client is merging new/updated data with data already on the device...// Only include records that have been added/updated since the last pull...// And only include data that they did not just push (i.e. no "round tripping!")...If ( ( $$sync_method = "Merge" ) and ( $last_pull_utc > 0 );  "AND ( ES_UTC_Time > " & $last_pull_utc & " ) " &  "AND ( COALESCE ( ES_Device_ID, 'X' ) <> '" & $client_persistent_id & "') "; "" ) ]
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "SELECT Statement for " & $sync_table & ": " & $dyn_sql] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#Wrap the SELECT statement in an ExecuteSQL call.
Set Variable [ $dyn_esql; Value:"ExecuteSQL ( \"" & $dyn_sql & "\"; \"" & $$field_delimiter & "\"; \"\" )" ]
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "ExecuteSQL Statement for " & $sync_table & ": " & $dyn_esql] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#Evaluate the ExecuteSQL statement to get the actual data, and append it to the records.
Set Variable [ $temp_recs; Value:Evaluate ( $dyn_esql  ) ]
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Records From " & $sync_table & ": " & $temp_recs] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#If there are records in the current table to be pushed...
If [ not IsEmpty ( $temp_recs ) ]
Set Variable [ $records; Value:If ( not IsEmpty ( $records ); $records & ¶; "" ) & $temp_recs ]
End If
#
Set Variable [ $i; Value:$i + 1 ]
Exit Loop If [ $i > ValueCount ( $sync_tables ) ]
#
End Loop
Exit Loop If [ /** * An error occurred in the above loop * * assign error info to local variables * then evaluate the errorCode as a Boolean *  */GetAsBoolean ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; $errorCode )") ) ]
#
#
#
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"SAVE PAYLOAD" ]
#================================================================================
#Put the payload together.
Set Variable [ $payload; Value:"<payload>¶" &	"<settings>¶" &		$$field_delimiter & "</setting>" &		$$record_delimiter & "</setting>" &		$$sync_method & ¶ &	"</settings>" & ¶ & 	"<tables>" & ¶ & $table_info & ¶ & "</tables>" & ¶ & 	"<records>" & ¶ & $records & ¶ & "</records>" & ¶ & "</payload>" ]
#
#Save payload.
Go to Layout [ "EasySync_Payloads" ]
New Record/Request
Set Field By Name [ "EasySync_Payloads::Payload"; $payload ]
Set Field By Name [ "EasySync_Payloads::Payload_Type"; "Pull Payload" ]
Commit Records/Requests[ No dialog ]
Set Variable [ $payload_uuid; Value:Evaluate ( "EasySync_Payloads::ES_Payload_UUID" ) ]
#
#
#
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# end single-pass loop for error trapping
Exit Loop If [ True ]
End Loop
#
#
#
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"RESTORE CONTEXT" ]
#================================================================================
Go to Layout [ original layout ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"HANDLE ERROR" ]
#================================================================================
Set Variable [ $~script.runtime; Value:( Get ( CurrentTimeUTCMilliseconds ) - $~script.start ) / 1000 ]
If [ /** * assign error info to local variables * then evaluate the errorCode as a Boolean *  */GetAsBoolean ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; $errorCode )") ) ]
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 2 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 2 ;	~message = "exit script with error"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$error = " & Quote ( $error ) & " ;¶"	& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶") ]
End If
Else
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "exit script without error"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶") ]
End If
End If
#
#
#
Set Variable [ $!; Value:""/** * This is a step that will not return an error. * * It's used to clear any errors reported by Get ( LastError ), so a calling script can use * Get ( LastError ) to test if an error occurred with the Perform Script step. * */ ]
Exit Script [ Result: "$error = " & Quote ( $error ) & " ;¶"& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶"& "$payload_uuid = " & Quote ( $payload_uuid ) & " ;¶" ]
#


---
Script:
  includeInMenu: 'False'
  runFullAccess: 'False'
  id: '11'
  name: 'EasySync Server: Pull: Prepare Payload ( ... )'
  StepList:
    Step:
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#################################################################################'
      Text: '################################################################################'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PURPOSE:'
      Text: ' PURPOSE:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    Processes a "pull" request from the client by building a pull
        package.'
      Text: '    Processes a "pull" request from the client by building a pull package.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# CONTEXT: EasySync_Payloads'
      Text: ' CONTEXT: EasySync_Payloads'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PARAMETERS: (let notation format)'
      Text: ' PARAMETERS: (let notation format)'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: |-
        #    miscellaneous client data

        Daniel Smith: I'm not sure what these parameters are used for, yet
      Text: |2-
            miscellaneous client data

        Daniel Smith: I'm not sure what these parameters are used for, yet
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# RETURNS:'
      Text: ' RETURNS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $error | a dictionary containing error data'
      Text: '    $error | a dictionary containing error data'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $runtime | number of seconds this script was running (with millisecond
        precision)'
      Text: '    $runtime | number of seconds this script was running (with millisecond
        precision)'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $payload_uuid | id of payload created'
      Text: '    $payload_uuid | id of payload created'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# VARIABLES:'
      Text: ' VARIABLES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# DEPENDENCIES:'
      Text: ' DEPENDENCIES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# NOTES:'
      Text: ' NOTES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# REVISIONS:'
      Text: ' REVISIONS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: "#    \n2015-08-21\t Daniel Smith dansmith65@gmail.com\n\t- never
        return the payload; always save it\n\t- always return let encoded result\n\n2014-04-16\t\t\n\tTim
        Dietrich (timdietrich@me.com)\n\tInitial version.\n\n2014-04-16\t\t\n\tTim
        Dietrich (timdietrich@me.com)\n\tThe push and pull timestamps are now being
        pushed by the client in a\n\tSQL-friendly format, to avoid potential differences
        in timestamp formats\n\tbetween the client and server.\n\t\n2014-04-20\n\tTim
        Dietrich (timdietrich@me.com)\n\tMods to resolve \"simultaneous sync\" issues.\n\n2014-04-21\n\tTim
        Dietrich (timdietrich@me.com)\n\tResolves issues with non-SQL compliant table
        names.\n\n2014-04-22\n\tTim Dietrich (timdietrich@me.com)\n\tModified the
        code that determines what records to pull. Previously we tried to\n\tprevent
        \"round-tripping\" the data that had just been pulled. That failed miserably,\n\tespecially
        for users syncing from multiple devices. It also caused sync issues\n\tin
        cases were record changes were rejected due to the conflict resolution being\n\tused.
        See the release notes for more info.\n\n2014-04-23\n\tTim Dietrich (timdietrich@me.com)\n\tAdded
        code to support the \"initial sync\" function of the EasySync demo database.\n\tSee
        \" Here's the SELECT statement that is used to select the data for the payload\"
        \n\tcomment / code for details.\n\t\n2014-04-22\n\tTim Dietrich (timdietrich@me.com)\n\tAdded
        support for repeating fields.\n\n2014-04-28\n\tTim Dietrich (timdietrich@me.com)\n\tWhen
        selecting records for inclusing, we now look at the ID of the device that
        last\n\tupdated the record so that we don't \"round trip\" the data that was
        just pushed.\n\n2014-04-28\n\tTim Dietrich (timdietrich@me.com)\n\tMinor change
        to account for a user who has wiped / reset their mobile database.\n\tAllows
        them to pull records that they last touched via that device.\n\n2014-05-02\n\tTim
        Dietrich (timdietrich@me.com)\n\tModified the SELECT statement that gets the
        list of tables to be synced, so that the underscore\n\tescaped. Thanks to
        Paul Jansen (of APJ Computing Solutions - http://www.apjuk.com/) for\n\treporting
        this bug.\n\n2014-05-04\n\tTim Dietrich (timdietrich@me.com)\n\tAddess support
        for Push/Pull-only tables.\n\n"
      Text: "    \n2015-08-21\t Daniel Smith dansmith65@gmail.com\n\t- never return
        the payload; always save it\n\t- always return let encoded result\n\n2014-04-16\t\t\n\tTim
        Dietrich (timdietrich@me.com)\n\tInitial version.\n\n2014-04-16\t\t\n\tTim
        Dietrich (timdietrich@me.com)\n\tThe push and pull timestamps are now being
        pushed by the client in a\n\tSQL-friendly format, to avoid potential differences
        in timestamp formats\n\tbetween the client and server.\n\t\n2014-04-20\n\tTim
        Dietrich (timdietrich@me.com)\n\tMods to resolve \"simultaneous sync\" issues.\n\n2014-04-21\n\tTim
        Dietrich (timdietrich@me.com)\n\tResolves issues with non-SQL compliant table
        names.\n\n2014-04-22\n\tTim Dietrich (timdietrich@me.com)\n\tModified the
        code that determines what records to pull. Previously we tried to\n\tprevent
        \"round-tripping\" the data that had just been pulled. That failed miserably,\n\tespecially
        for users syncing from multiple devices. It also caused sync issues\n\tin
        cases were record changes were rejected due to the conflict resolution being\n\tused.
        See the release notes for more info.\n\n2014-04-23\n\tTim Dietrich (timdietrich@me.com)\n\tAdded
        code to support the \"initial sync\" function of the EasySync demo database.\n\tSee
        \" Here's the SELECT statement that is used to select the data for the payload\"
        \n\tcomment / code for details.\n\t\n2014-04-22\n\tTim Dietrich (timdietrich@me.com)\n\tAdded
        support for repeating fields.\n\n2014-04-28\n\tTim Dietrich (timdietrich@me.com)\n\tWhen
        selecting records for inclusing, we now look at the ID of the device that
        last\n\tupdated the record so that we don't \"round trip\" the data that was
        just pushed.\n\n2014-04-28\n\tTim Dietrich (timdietrich@me.com)\n\tMinor change
        to account for a user who has wiped / reset their mobile database.\n\tAllows
        them to pull records that they last touched via that device.\n\n2014-05-02\n\tTim
        Dietrich (timdietrich@me.com)\n\tModified the SELECT statement that gets the
        list of tables to be synced, so that the underscore\n\tescaped. Thanks to
        Paul Jansen (of APJ Computing Solutions - http://www.apjuk.com/) for\n\treporting
        this bug.\n\n2014-05-04\n\tTim Dietrich (timdietrich@me.com)\n\tAddess support
        for Push/Pull-only tables.\n\n"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#################################################################################'
      Text: '################################################################################'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.start; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.start
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: 'Set Variable [ $~script.errorType; Value:"Module: EasySync Server"
        ]'
      Value:
        Calculation: '"Module: EasySync Server"'
        DisplayCalculation:
          Chunk: '"Module: EasySync Server"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.errorType
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Load settings.'
      Text: Load settings.
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Server: Config: Load” ]'
      Script:
        id: '19'
        name: 'EasySync Server: Config: Load'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 5 ;\n\t~message = \"start script\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 5 ;\n\t~message = \"start script\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 5 ;\n\t~message = \"start script\"\n] ;\n\t\"$LogLevel
          = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# single-pass loop for error trapping'
      Text: ' single-pass loop for error trapping'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
      Text: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"ASSIGN PARAMETERS" ]
      Value:
        Calculation: '"ASSIGN PARAMETERS"'
        DisplayCalculation:
          Chunk: '"ASSIGN PARAMETERS"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: "If [ /* assign script parameter to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptParameter )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) ) ]"
      Calculation: "/* assign script parameter to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptParameter )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign script parameter to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& "
        - Get
        - ' ( '
        - ScriptParameter
        - " )\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n) )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription
        = \"Invalid Parameter\" ;\n\ttheErrorInfo = \"An error occurred when evaluating
        the script parameter as let notation\" ;\n\ttheErrorType = $~script.errorType
        ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" &
        Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription = \"Invalid
        Parameter\" ;\n\ttheErrorInfo = \"An error occurred when evaluating the script
        parameter as let notation\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error
        = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode =
        \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription = \"Invalid Parameter\"
          ;\n\ttheErrorInfo = \"An error occurred when evaluating the script parameter
          as let notation\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error
          = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"MODIFY ENVIRONMENT" ]
      Value:
        Calculation: '"MODIFY ENVIRONMENT"'
        DisplayCalculation:
          Chunk: '"MODIFY ENVIRONMENT"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Prevent the user from aborting, and we''ll handle errors, so suppress
        those...'
      Text: Prevent the user from aborting, and we'll handle errors, so suppress those...
    - enable: 'True'
      id: '85'
      name: Allow User Abort
      StepText: Allow User Abort [ Off ]
      Set:
        state: 'False'
    - enable: 'True'
      id: '86'
      name: Set Error Capture
      StepText: Set Error Capture [ On ]
      Set:
        state: 'True'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"Get all of the tables that
        are to be synced." ]
      Value:
        Calculation: '"Get all of the tables that are to be synced."'
        DisplayCalculation:
          Chunk: '"Get all of the tables that are to be synced."'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get all of the tables that are to be synced.'
      Text: Get all of the tables that are to be synced.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $sync_tables; Value:ExecuteSQL ( "SELECT * FROM FileMaker_Tables
        WHERE ( TableName LIKE 'ES\_%' ) AND ( TableName NOT LIKE 'ES\_PUSH\_%' )";
        "</col>"; ¶ ) ]
      Value:
        Calculation: ExecuteSQL ( "SELECT * FROM FileMaker_Tables WHERE ( TableName
          LIKE 'ES\_%' ) AND ( TableName NOT LIKE 'ES\_PUSH\_%' )"; "</col>"; ¶ )
        DisplayCalculation:
          Chunk:
          - ExecuteSQL
          - ' ( "SELECT * FROM FileMaker_Tables WHERE ( TableName LIKE ''ES\_%'' )
            AND ( TableName NOT LIKE ''ES\_PUSH\_%'' )"; "</col>"; ¶ )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $sync_tables
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ IsEmpty ( $sync_tables ) ]
      Calculation: IsEmpty ( $sync_tables )
      DisplayCalculation:
        Chunk:
        - IsEmpty
        - ' ( $sync_tables )'
    - enable: 'True'
      id: '87'
      name: Show Custom Dialog
      StepText: 'Show Custom Dialog [ Title: "Sync Error"; Message: "There are no
        tables configured for syncing."; Default Button: “OK”, Commit: “Yes” ]'
      Title:
        Calculation: '"Sync Error"'
        DisplayCalculation:
          Chunk: '"Sync Error"'
      Message:
        Calculation: '"There are no tables configured for syncing."'
        DisplayCalculation:
          Chunk: '"There are no tables configured for syncing."'
      Buttons:
        Button:
        - CommitState: 'True'
          Calculation: '"OK"'
          DisplayCalculation:
            Chunk: '"OK"'
        - CommitState: 'False'
        - CommitState: 'False'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: |-
        # TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
      Text: |2-
         TODO: determine what error code to use here

        (may want to revise the server's ping script before I do this)
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription
        = \"No tables configured for syncing\" ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"No tables
        configured for syncing\" ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType = $~script.errorType
        ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" &
        Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"No tables configured
          for syncing\" ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType = $~script.errorType
          ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Sync Tables: \" & $sync_tables\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Sync Tables: \" & $sync_tables\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Sync Tables: \" & $sync_tables\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"Loop over the tables to be
        synced" ]
      Value:
        Calculation: '"Loop over the tables to be synced"'
        DisplayCalculation:
          Chunk: '"Loop over the tables to be synced"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Initalize table info portion of the payload.'
      Text: Initalize table info portion of the payload.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $table_info; Value:"" ]
      Value:
        Calculation: '""'
        DisplayCalculation:
          Chunk: '""'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $table_info
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Initalize records portion of the payload.'
      Text: Initalize records portion of the payload.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $records; Value:"" ]
      Value:
        Calculation: '""'
        DisplayCalculation:
          Chunk: '""'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $records
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Loop over the tables to be synced...'
      Text: Loop over the tables to be synced...
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the table''s name.'
      Text: Get the table's name.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $sync_table; Value:Let ( [\n\t$t = GetValue ( $sync_tables
        ; $i );\n\t$t = Substitute ( $t; \"</col>\"; ¶ )\n] ;\n\tGetValue ( $t ; 1
        )\n) ]"
      Value:
        Calculation: "Let ( [\n\t$t = GetValue ( $sync_tables ; $i );\n\t$t = Substitute
          ( $t; \"</col>\"; ¶ )\n] ;\n\tGetValue ( $t ; 1 )\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( [\n\t$t = "
          - GetValue
          - " ( $sync_tables ; $i );\n\t$t = "
          - Substitute
          - " ( $t; \"</col>\"; ¶ )\n] ;\n\t"
          - GetValue
          - |2-
             ( $t ; 1 )
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $sync_table
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the names (and # of reps) of the fields in this table.'
      Text: 'Get the names (and # of reps) of the fields in this table.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Note that fields prefixed with "EXCL_" are excluded from the payload.'
      Text: Note that fields prefixed with "EXCL_" are excluded from the payload.
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Note that calculated and global fields are also excluded.'
      Text: Note that calculated and global fields are also excluded.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $sync_fields; Value:ExecuteSQL ( "SELECT FieldName,
        FieldReps FROM FileMaker_Fields WHERE ( TableName = ? ) AND ( ( FieldClass
        = 'Normal' ) OR ( FieldName LIKE 'B64_%' ) ) AND ( FieldName NOT LIKE 'EXCL_%'
        ) AND ( FieldName <> 'ES_Exclude' ) AND ( FieldType NOT LIKE 'global%')";
        "|"; ¶; $sync_table ) ]
      Value:
        Calculation: ExecuteSQL ( "SELECT FieldName, FieldReps FROM FileMaker_Fields
          WHERE ( TableName = ? ) AND ( ( FieldClass = 'Normal' ) OR ( FieldName LIKE
          'B64_%' ) ) AND ( FieldName NOT LIKE 'EXCL_%' ) AND ( FieldName <> 'ES_Exclude'
          ) AND ( FieldType NOT LIKE 'global%')"; "|"; ¶; $sync_table )
        DisplayCalculation:
          Chunk:
          - ExecuteSQL
          - ' ( "SELECT FieldName, FieldReps FROM FileMaker_Fields WHERE ( TableName
            = ? ) AND ( ( FieldClass = ''Normal'' ) OR ( FieldName LIKE ''B64_%''
            ) ) AND ( FieldName NOT LIKE ''EXCL_%'' ) AND ( FieldName <> ''ES_Exclude''
            ) AND ( FieldType NOT LIKE ''global%'')"; "|"; ¶; $sync_table )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $sync_fields
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Fields in \" & $sync_table & \":
        \" & $sync_fields\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Fields in \" & $sync_table
        & \": \" & $sync_fields\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
        \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \"
        & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote
        ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp (
        \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 )
        ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Fields in \" & $sync_table & \":
          \" & $sync_fields\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
          = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Reformat the field names so that repetitions are considered.'
      Text: Reformat the field names so that repetitions are considered.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $fields; Value:$sync_table & "</field>" ]
      Value:
        Calculation: $sync_table & "</field>"
        DisplayCalculation:
          Chunk: $sync_table & "</field>"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $fields
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $f; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $f
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $field_name; Value:Let ( \n[\nfield_combo_raw = GetValue
        ( $sync_fields ; $f ); // The value pulled from the query. Example: Some_Field|5\nfield_combo_list
        = Substitute ( field_combo_raw; \"|\"; ¶ ) // Convert the value to a value
        list.\n];\nGetValue ( field_combo_list; 1 )\n) ]"
      Value:
        Calculation: "Let ( \n[\nfield_combo_raw = GetValue ( $sync_fields ; $f );
          // The value pulled from the query. Example: Some_Field|5\nfield_combo_list
          = Substitute ( field_combo_raw; \"|\"; ¶ ) // Convert the value to a value
          list.\n];\nGetValue ( field_combo_list; 1 )\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( \n[\nfield_combo_raw = "
          - GetValue
          - ' ( $sync_fields ; $f ); '
          - |
            // The value pulled from the query. Example: Some_Field|5
          - 'field_combo_list = '
          - Substitute
          - ' ( field_combo_raw; "|"; ¶ ) '
          - |
            // Convert the value to a value list.
          - |
            ];
          - GetValue
          - |2-
             ( field_combo_list; 1 )
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_name
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $field_reps; Value:Let ( \n[\nfield_combo_raw = GetValue
        ( $sync_fields ; $f ); // The value pulled from the query. Example: Some_Field|5\nfield_combo_list
        = Substitute ( field_combo_raw; \"|\"; ¶ ) // Convert the value to a value
        list.\n];\nGetValue ( field_combo_list; 2 )\n) ]"
      Value:
        Calculation: "Let ( \n[\nfield_combo_raw = GetValue ( $sync_fields ; $f );
          // The value pulled from the query. Example: Some_Field|5\nfield_combo_list
          = Substitute ( field_combo_raw; \"|\"; ¶ ) // Convert the value to a value
          list.\n];\nGetValue ( field_combo_list; 2 )\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( \n[\nfield_combo_raw = "
          - GetValue
          - ' ( $sync_fields ; $f ); '
          - |
            // The value pulled from the query. Example: Some_Field|5
          - 'field_combo_list = '
          - Substitute
          - ' ( field_combo_raw; "|"; ¶ ) '
          - |
            // Convert the value to a value list.
          - |
            ];
          - GetValue
          - |2-
             ( field_combo_list; 2 )
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_reps
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $r; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $r
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $fields; Value:$fields & $field_name & "[" & $r & "]</field>"
        ]
      Value:
        Calculation: $fields & $field_name & "[" & $r & "]</field>"
        DisplayCalculation:
          Chunk: $fields & $field_name & "[" & $r & "]</field>"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $fields
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $r; Value:$r + 1 ]
      Value:
        Calculation: $r + 1
        DisplayCalculation:
          Chunk: $r + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $r
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: |-
        Exit Loop If [ $r > GetAsNumber ( $field_reps )

        // v1.2: $r > $field_reps ]
      Calculation: |-
        $r > GetAsNumber ( $field_reps )

        // v1.2: $r > $field_reps
      DisplayCalculation:
        Chunk:
        - '$r > '
        - GetAsNumber
        - |2+
           ( $field_reps )

        - '// v1.2: $r > $field_reps'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $f; Value:$f + 1 ]
      Value:
        Calculation: $f + 1
        DisplayCalculation:
          Chunk: $f + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $f
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $f > ValueCount ( $sync_fields ) ]
      Calculation: $f > ValueCount ( $sync_fields )
      DisplayCalculation:
        Chunk:
        - '$f > '
        - ValueCount
        - ' ( $sync_fields )'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Reformatted Fields in \" & $sync_table
        & \": \" & $fields\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Reformatted Fields
        in \" & $sync_table & \": \" & $fields\n] ;\n\t\"$LogLevel = \" & ~logLevel
        & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Reformatted Fields in \" & $sync_table
          & \": \" & $fields\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
          = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Add this table''s info to the running "table_info."'
      Text: Add this table's info to the running "table_info."
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $table_info; Value:If ( not IsEmpty ( $table_info );
        $table_info & ¶; "" ) & $fields & "</table>" ]
      Value:
        Calculation: If ( not IsEmpty ( $table_info ); $table_info & ¶; "" ) & $fields
          & "</table>"
        DisplayCalculation:
          Chunk:
          - If
          - ' ( '
          - not
          - type: NoRef
            __content__: ' '
          - IsEmpty
          - ' ( $table_info ); $table_info & ¶; "" ) & $fields & "</table>"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $table_info
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Loop over the fields in the table to create the fields portion of
        what will be the SELECT statement...'
      Text: Loop over the fields in the table to create the fields portion of what
        will be the SELECT statement...
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $dyn_sql; Value:"'" & $sync_table & "'" ]
      Value:
        Calculation: '"''" & $sync_table & "''"'
        DisplayCalculation:
          Chunk: '"''" & $sync_table & "''"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $dyn_sql
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $j; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $j
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $field_name; Value:Let ( \n[\nfield_combo_raw = GetValue
        ( $sync_fields ; $j ); // The value pulled from the query. Example: Some_Field|5\nfield_combo_list
        = Substitute ( field_combo_raw; \"|\"; ¶ ) // Convert the value to a value
        list.\n];\nGetValue ( field_combo_list; 1 )\n) ]"
      Value:
        Calculation: "Let ( \n[\nfield_combo_raw = GetValue ( $sync_fields ; $j );
          // The value pulled from the query. Example: Some_Field|5\nfield_combo_list
          = Substitute ( field_combo_raw; \"|\"; ¶ ) // Convert the value to a value
          list.\n];\nGetValue ( field_combo_list; 1 )\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( \n[\nfield_combo_raw = "
          - GetValue
          - ' ( $sync_fields ; $j ); '
          - |
            // The value pulled from the query. Example: Some_Field|5
          - 'field_combo_list = '
          - Substitute
          - ' ( field_combo_raw; "|"; ¶ ) '
          - |
            // Convert the value to a value list.
          - |
            ];
          - GetValue
          - |2-
             ( field_combo_list; 1 )
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_name
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $field_reps; Value:Let ( \n[\nfield_combo_raw = GetValue
        ( $sync_fields ; $j ); // The value pulled from the query. Example: Some_Field|5\nfield_combo_list
        = Substitute ( field_combo_raw; \"|\"; ¶ ) // Convert the value to a value
        list.\n];\nGetValue ( field_combo_list; 2 )\n) ]"
      Value:
        Calculation: "Let ( \n[\nfield_combo_raw = GetValue ( $sync_fields ; $j );
          // The value pulled from the query. Example: Some_Field|5\nfield_combo_list
          = Substitute ( field_combo_raw; \"|\"; ¶ ) // Convert the value to a value
          list.\n];\nGetValue ( field_combo_list; 2 )\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( \n[\nfield_combo_raw = "
          - GetValue
          - ' ( $sync_fields ; $j ); '
          - |
            // The value pulled from the query. Example: Some_Field|5
          - 'field_combo_list = '
          - Substitute
          - ' ( field_combo_raw; "|"; ¶ ) '
          - |
            // Convert the value to a value list.
          - |
            ];
          - GetValue
          - |2-
             ( field_combo_list; 2 )
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_reps
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Loop over the reps...'
      Text: Loop over the reps...
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $r; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $r
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $dyn_sql; Value:$dyn_sql & ", '' || \\\"" & $field_name
        & "\\\"" & "[" & $r & "]" ]
      Value:
        Calculation: $dyn_sql & ", '' || \\\"" & $field_name & "\\\"" & "[" & $r &
          "]"
        DisplayCalculation:
          Chunk: $dyn_sql & ", '' || \\\"" & $field_name & "\\\"" & "[" & $r & "]"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $dyn_sql
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $r; Value:$r + 1 ]
      Value:
        Calculation: $r + 1
        DisplayCalculation:
          Chunk: $r + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $r
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: |-
        Exit Loop If [ $r > GetAsNumber ( $field_reps )

        // v1.2: $r > $field_reps ]
      Calculation: |-
        $r > GetAsNumber ( $field_reps )

        // v1.2: $r > $field_reps
      DisplayCalculation:
        Chunk:
        - '$r > '
        - GetAsNumber
        - |2+
           ( $field_reps )

        - '// v1.2: $r > $field_reps'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $j; Value:$j + 1 ]
      Value:
        Calculation: $j + 1
        DisplayCalculation:
          Chunk: $j + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $j
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $j > ValueCount ( $sync_fields ) ]
      Calculation: $j > ValueCount ( $sync_fields )
      DisplayCalculation:
        Chunk:
        - '$j > '
        - ValueCount
        - ' ( $sync_fields )'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Add this table''s fields to the SELECT statement.'
      Text: Add this table's fields to the SELECT statement.
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Note: This is the SELECT statement that is used to select the data
        for the payload.'
      Text: 'Note: This is the SELECT statement that is used to select the data for
        the payload.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#You can add your own custom business rules here to determine what
        data is sent to the user, by looking at things like the table name being worked
        on, the user / device that has requested the data, etc. Dynamically add your
        conditions to the WHERE clause.'
      Text: You can add your own custom business rules here to determine what data
        is sent to the user, by looking at things like the table name being worked
        on, the user / device that has requested the data, etc. Dynamically add your
        conditions to the WHERE clause.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $dyn_sql; Value:\"SELECT \" & \n$dyn_sql & \", '\"
        & $$record_delimiter & \"'\" &\n\" FROM \\\\\\\"\" & $sync_table & \"\\\\\\\"\"
        & \n\" WHERE \" &\n\n// Exclude records flagged for sync exclusion.\n\"( COALESCE
        ( ES_Exclude, 0 ) = 0 ) \" &\n\n// If the client is merging new/updated data
        with data already on the device...\n// Only include records that have been
        added/updated since the last pull...\n// And only include data that they did
        not just push (i.e. no \"round tripping!\")...\nIf ( ( $$sync_method = \"Merge\"
        ) and ( $last_pull_utc > 0 );  \"AND ( ES_UTC_Time > \" & $last_pull_utc &
        \" ) \" &  \"AND ( COALESCE ( ES_Device_ID, 'X' ) <> '\" & $client_persistent_id
        & \"') \"; \"\" ) ]"
      Value:
        Calculation: "\"SELECT \" & \n$dyn_sql & \", '\" & $$record_delimiter & \"'\"
          &\n\" FROM \\\\\\\"\" & $sync_table & \"\\\\\\\"\" & \n\" WHERE \" &\n\n//
          Exclude records flagged for sync exclusion.\n\"( COALESCE ( ES_Exclude,
          0 ) = 0 ) \" &\n\n// If the client is merging new/updated data with data
          already on the device...\n// Only include records that have been added/updated
          since the last pull...\n// And only include data that they did not just
          push (i.e. no \"round tripping!\")...\nIf ( ( $$sync_method = \"Merge\"
          ) and ( $last_pull_utc > 0 );  \"AND ( ES_UTC_Time > \" & $last_pull_utc
          & \" ) \" &  \"AND ( COALESCE ( ES_Device_ID, 'X' ) <> '\" & $client_persistent_id
          & \"') \"; \"\" )"
        DisplayCalculation:
          Chunk:
          - "\"SELECT \" & \n$dyn_sql & \", '\" & $$record_delimiter & \"'\" &\n\"
            FROM \\\\\\\"\" & $sync_table & \"\\\\\\\"\" & \n\" WHERE \" &\n\n"
          - |
            // Exclude records flagged for sync exclusion.
          - |+
            "( COALESCE ( ES_Exclude, 0 ) = 0 ) " &

          - |
            // If the client is merging new/updated data with data already on the device...
          - |
            // Only include records that have been added/updated since the last pull...
          - |
            // And only include data that they did not just push (i.e. no "round tripping!")...
          - If
          - ' ( ( $$sync_method = "Merge" ) '
          - and
          - ' ( $last_pull_utc > 0 );  "AND ( ES_UTC_Time > " & $last_pull_utc & "
            ) " &  "AND ( COALESCE ( ES_Device_ID, ''X'' ) <> ''" & $client_persistent_id
            & "'') "; "" )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $dyn_sql
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"SELECT Statement for \" & $sync_table
        & \": \" & $dyn_sql\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"SELECT Statement for
        \" & $sync_table & \": \" & $dyn_sql\n] ;\n\t\"$LogLevel = \" & ~logLevel
        & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"SELECT Statement for \" & $sync_table
          & \": \" & $dyn_sql\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
          \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Wrap the SELECT statement in an ExecuteSQL call.'
      Text: Wrap the SELECT statement in an ExecuteSQL call.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $dyn_esql; Value:"ExecuteSQL ( \"" & $dyn_sql & "\";
        \"" & $$field_delimiter & "\"; \"\" )" ]
      Value:
        Calculation: '"ExecuteSQL ( \"" & $dyn_sql & "\"; \"" & $$field_delimiter
          & "\"; \"\" )"'
        DisplayCalculation:
          Chunk: '"ExecuteSQL ( \"" & $dyn_sql & "\"; \"" & $$field_delimiter & "\";
            \"\" )"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $dyn_esql
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"ExecuteSQL Statement for \" & $sync_table
        & \": \" & $dyn_esql\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"ExecuteSQL Statement
        for \" & $sync_table & \": \" & $dyn_esql\n] ;\n\t\"$LogLevel = \" & ~logLevel
        & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"ExecuteSQL Statement for \" & $sync_table
          & \": \" & $dyn_esql\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
          \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Evaluate the ExecuteSQL statement to get the actual data, and append
        it to the records.'
      Text: Evaluate the ExecuteSQL statement to get the actual data, and append it
        to the records.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $temp_recs; Value:Evaluate ( $dyn_esql  ) ]
      Value:
        Calculation: Evaluate ( $dyn_esql  )
        DisplayCalculation:
          Chunk:
          - Evaluate
          - ' ( $dyn_esql  )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $temp_recs
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Records From \" & $sync_table &
        \": \" & $temp_recs\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Records From \" & $sync_table
        & \": \" & $temp_recs\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
        \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \"
        & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote
        ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp (
        \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 )
        ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Records From \" & $sync_table &
          \": \" & $temp_recs\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
          \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If there are records in the current table to be pushed...'
      Text: If there are records in the current table to be pushed...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ not IsEmpty ( $temp_recs ) ]
      Calculation: not IsEmpty ( $temp_recs )
      DisplayCalculation:
        Chunk:
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( $temp_recs )'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $records; Value:If ( not IsEmpty ( $records ); $records
        & ¶; "" ) & $temp_recs ]
      Value:
        Calculation: If ( not IsEmpty ( $records ); $records & ¶; "" ) & $temp_recs
        DisplayCalculation:
          Chunk:
          - If
          - ' ( '
          - not
          - type: NoRef
            __content__: ' '
          - IsEmpty
          - ' ( $records ); $records & ¶; "" ) & $temp_recs'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $records
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:$i + 1 ]
      Value:
        Calculation: $i + 1
        DisplayCalculation:
          Chunk: $i + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $i > ValueCount ( $sync_tables ) ]
      Calculation: $i > ValueCount ( $sync_tables )
      DisplayCalculation:
        Chunk:
        - '$i > '
        - ValueCount
        - ' ( $sync_tables )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /**\n * An error occurred in the above loop\n *\n
        * assign error info to local variables\n * then evaluate the errorCode as
        a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t&
        \"! = \\\"\\\" ] ; $errorCode )\"\n) ) ]"
      Calculation: "/**\n * An error occurred in the above loop\n *\n * assign error
        info to local variables\n * then evaluate the errorCode as a Boolean\n * \n
        */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\"
        ] ; $errorCode )\"\n) )"
      DisplayCalculation:
        Chunk:
        - "/**\n * An error occurred in the above loop\n *\n * assign error info to
          local variables\n * then evaluate the errorCode as a Boolean\n * \n */\n\n"
        - GetAsBoolean
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n)
          )"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"SAVE PAYLOAD" ]
      Value:
        Calculation: '"SAVE PAYLOAD"'
        DisplayCalculation:
          Chunk: '"SAVE PAYLOAD"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Put the payload together.'
      Text: Put the payload together.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $payload; Value:\"<payload>¶\" &\n\t\"<settings>¶\"
        &\n\t\t$$field_delimiter & \"</setting>\" &\n\t\t$$record_delimiter & \"</setting>\"
        &\n\t\t$$sync_method & ¶ &\n\t\"</settings>\" & ¶ & \n\t\"<tables>\" & ¶ &
        $table_info & ¶ & \"</tables>\" & ¶ & \n\t\"<records>\" & ¶ & $records & ¶
        & \"</records>\" & ¶ & \n\"</payload>\" ]"
      Value:
        Calculation: "\"<payload>¶\" &\n\t\"<settings>¶\" &\n\t\t$$field_delimiter
          & \"</setting>\" &\n\t\t$$record_delimiter & \"</setting>\" &\n\t\t$$sync_method
          & ¶ &\n\t\"</settings>\" & ¶ & \n\t\"<tables>\" & ¶ & $table_info & ¶ &
          \"</tables>\" & ¶ & \n\t\"<records>\" & ¶ & $records & ¶ & \"</records>\"
          & ¶ & \n\"</payload>\""
        DisplayCalculation:
          Chunk: "\"<payload>¶\" &\n\t\"<settings>¶\" &\n\t\t$$field_delimiter & \"</setting>\"
            &\n\t\t$$record_delimiter & \"</setting>\" &\n\t\t$$sync_method & ¶ &\n\t\"</settings>\"
            & ¶ & \n\t\"<tables>\" & ¶ & $table_info & ¶ & \"</tables>\" & ¶ & \n\t\"<records>\"
            & ¶ & $records & ¶ & \"</records>\" & ¶ & \n\"</payload>\""
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $payload
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Save payload.'
      Text: Save payload.
    - enable: 'True'
      id: '6'
      name: Go to Layout
      StepText: Go to Layout [ "EasySync_Payloads" ]
      LayoutDestination:
        value: LayoutNameByCalc
      Layout:
        Calculation: '"EasySync_Payloads"'
        DisplayCalculation:
          Chunk: '"EasySync_Payloads"'
    - enable: 'True'
      id: '7'
      name: New Record/Request
      StepText: New Record/Request
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ "EasySync_Payloads::Payload"; $payload ]
      Result:
        Calculation: $payload
        DisplayCalculation:
          Chunk: $payload
      TargetName:
        Calculation: '"EasySync_Payloads::Payload"'
        DisplayCalculation:
          Chunk: '"EasySync_Payloads::Payload"'
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ "EasySync_Payloads::Payload_Type"; "Pull Payload"
        ]
      Result:
        Calculation: '"Pull Payload"'
        DisplayCalculation:
          Chunk: '"Pull Payload"'
      TargetName:
        Calculation: '"EasySync_Payloads::Payload_Type"'
        DisplayCalculation:
          Chunk: '"EasySync_Payloads::Payload_Type"'
    - enable: 'True'
      id: '75'
      name: Commit Records/Requests
      StepText: |-
        Commit Records/Requests
        [ No dialog ]
      NoInteract:
        state: 'True'
      Option:
        state: 'False'
      ESSForceCommit:
        state: 'False'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $payload_uuid; Value:Evaluate ( "EasySync_Payloads::ES_Payload_UUID"
        ) ]
      Value:
        Calculation: Evaluate ( "EasySync_Payloads::ES_Payload_UUID" )
        DisplayCalculation:
          Chunk:
          - Evaluate
          - ' ( "EasySync_Payloads::ES_Payload_UUID" )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $payload_uuid
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'
      Text: ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# end single-pass loop for error trapping'
      Text: ' end single-pass loop for error trapping'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ True ]
      Calculation: 'True'
      DisplayCalculation:
        Chunk: 'True'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"RESTORE CONTEXT" ]
      Value:
        Calculation: '"RESTORE CONTEXT"'
        DisplayCalculation:
          Chunk: '"RESTORE CONTEXT"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '6'
      name: Go to Layout
      StepText: Go to Layout [ original layout ]
      LayoutDestination:
        value: OriginalLayout
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"HANDLE ERROR" ]
      Value:
        Calculation: '"HANDLE ERROR"'
        DisplayCalculation:
          Chunk: '"HANDLE ERROR"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.runtime; Value:( Get ( CurrentTimeUTCMilliseconds
        ) - $~script.start ) / 1000 ]
      Value:
        Calculation: ( Get ( CurrentTimeUTCMilliseconds ) - $~script.start ) / 1000
        DisplayCalculation:
          Chunk:
          - '( '
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $~script.start ) / 1000'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.runtime
    - enable: 'True'
      id: '68'
      name: If
      StepText: "If [ /**\n * assign error info to local variables\n * then evaluate
        the errorCode as a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let
        ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n) ) ]"
      Calculation: "/**\n * assign error info to local variables\n * then evaluate
        the errorCode as a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let
        ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n) )"
      DisplayCalculation:
        Chunk:
        - "/**\n * assign error info to local variables\n * then evaluate the errorCode
          as a Boolean\n * \n */\n\n"
        - GetAsBoolean
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n)
          )"
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 2 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 2
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 2
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error = \" & Quote ( $error ) & \" ;¶\"\n\t&
        \"$runtime = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error
        = \" & Quote ( $error ) & \" ;¶\"\n\t& \"$runtime = \" & GetAsNumber ( $~script.runtime
        ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n] ;\n\t\"$LogLevel
          = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error = \" & "
        - Quote
        - " ( $error ) & \" ;¶\"\n\t& \"$runtime = \" & "
        - GetAsNumber
        - |2-
           ( $~script.runtime ) & " ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '69'
      name: Else
      StepText: Else
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"exit script without error\"\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime
        = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"exit script without
        error\"\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime
        = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"exit script without error\"\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime = \" & "
        - GetAsNumber
        - |2-
           ( $~script.runtime ) & " ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $!; Value:""
        /**
         * This is a step that will not return an error.
         *
         * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
         * Get ( LastError ) to test if an error occurred with the Perform Script step.
         *
         */ ]
      Value:
        Calculation: |-
          ""
          /**
           * This is a step that will not return an error.
           *
           * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
           * Get ( LastError ) to test if an error occurred with the Perform Script step.
           *
           */
        DisplayCalculation:
          Chunk: |-
            ""
            /**
             * This is a step that will not return an error.
             *
             * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
             * Get ( LastError ) to test if an error occurred with the Perform Script step.
             *
             */
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $!
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: |-
        Exit Script [ Result: "$error = " & Quote ( $error ) & " ;¶"
        & "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶"
        & "$payload_uuid = " & Quote ( $payload_uuid ) & " ;¶" ]
      Calculation: |-
        "$error = " & Quote ( $error ) & " ;¶"
        & "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶"
        & "$payload_uuid = " & Quote ( $payload_uuid ) & " ;¶"
      DisplayCalculation:
        Chunk:
        - '"$error = " & '
        - Quote
        - " ( $error ) & \" ;¶\"\n& \"$runtime = \" & "
        - GetAsNumber
        - " ( $~script.runtime ) & \" ;¶\"\n& \"$payload_uuid = \" & "
        - Quote
        - ' ( $payload_uuid ) & " ;¶"'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
