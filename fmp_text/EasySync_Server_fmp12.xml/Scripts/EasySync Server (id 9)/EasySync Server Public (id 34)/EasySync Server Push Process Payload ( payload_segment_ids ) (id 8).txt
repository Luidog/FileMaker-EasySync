#################################################################################
# PURPOSE:
#    Processes a payload that has been pushed by the client.
#
# CONTEXT: EasySync_Payloads
#
# PARAMETERS: (let notation format)
#    $payload_segment_ids | value list | of payload id's containing the data to process
#
# RETURNS:
#    $error | a dictionary containing error data
#    $runtime | number of seconds this script was running (with millisecond precision)
#
# VARIABLES:
#
# DEPENDENCIES:
#
# NOTES:
#
# REVISIONS:
#    2014-04-16			Tim Dietrich (timdietrich@me.com)	Initial version.2014-04-18			Tim Dietrich (timdietrich@me.com)	Changes to reflect move to UTC.	More granular error codes added.2014-04-20	Tim Dietrich (timdietrich@me.com)	Modifications to resolve "simultaneous sync" issue, support for record lock handling, etc.2014-04-21	Tim Dietrich (timdietrich@me.com)	We're now only setting fields that have actually changed.2014-04-22	Tim Dietrich (timdietrich@me.com)	Now searching for the closing "</records>" tag using -1 as the start position	so that we're searching for the tag from the end of the payload.	Thanks to Daniel Smith (@FMweetbicks) for the suggestion.2014-04-24	Tim Dietrich (timdietrich@me.com)	Added support for repeating fields.2014-04-28	Tim Dietrich (timdietrich@me.com)	Added a variable that allows auto-enter calcs for "ES_UTC_Time" and "ES_Device_ID" to be	overwritten during the sync process.2014-05-03	Tim Dietrich (timdietrich@me.com)	Fixed bug that was causing the client's ES_UTC_Time from being pulled when processing	a record. Thanks to Paul Jansen at APJ Computing Solutions for finding this one. Good catch!2014-05-08	Tim Dietrich (timdietrich@me.com)	Optimized code that gets the next record.2014-05-15	Tim Dietrich (timdietrich@me.com)	Eliminated the need to copy the records portion of the payload to a distinct $records variable.	This should help to reduce the memory needed to process the payload, and should also slightly	increase performance.2014-06-02	Tim Dietrich (timdietrich@me.com)	Eliminates the empty find request when processing deletions.	Resolves bug enountered where, when a record is deleted, an additional record in the last	ES_ layout was also deleted.
#################################################################################
Set Variable [ $~script.start; Value:Get ( CurrentTimeUTCMilliseconds ) ]
Set Variable [ $~script.errorType; Value:"Module: EasySync Server" ]
#
#
#
#
Loop
# single-pass loop for error trapping
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"ASSIGN PARAMETERS" ]
#================================================================================
If [ /* assign script parameter to local variables */EvaluationError ( Evaluate (	"Let ( [¶"	& Get ( ScriptParameter )	& "! = \"\" ] ; \"\" )") ) ]
Exit Loop If [ Let ( [	theErrorCode = 2 ;	theErrorDescription = "Invalid Parameter" ;	theErrorInfo = "An error occurred when evaluating the script parameter as let notation" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
If [ IsEmpty ( $payload_segment_ids ) ]
Exit Loop If [ Let ( [	theErrorCode = 2 ;	theErrorDescription = "Invalid Parameter" ;	theErrorInfo = "payload_segment_ids parameter was empty" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"LOAD SETTINGS" ]
#================================================================================
Perform Script [ “EasySync Server: Config: Load” ]
Exit Loop If [ If ( Get ( LastError ) ;	Let ( [		theErrorCode = Get ( LastError ) ;		theErrorDescription = "(see FileMaker documentation for the description of this error code)" ;		theErrorInfo = "" ;		theErrorType = "Fmp" ;				$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"		& "$errorCode = " & theErrorCode & " ;¶"		& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"		& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;			"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"		)		& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"		& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	] ;		True	)) ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"SET VARIABLES" ]
#================================================================================
Set Variable [ $script_override; Value:1 /* Allow auto-enter calcs for "ES_UTC_Time" and "ES_Device_ID" to be overwritten during the sync process. */ ]
Set Variable [ $ErrorCaptureState; Value:Get ( ErrorCaptureState ) ]
Set Variable [ $AllowAbortState; Value:Get ( AllowAbortState ) ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"MODIFY ENVIRONMENT" ]
#================================================================================
Allow User Abort [ Off ]
Set Error Capture [ On ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"MODIFY CONTEXT" ]
#================================================================================
Go to Layout [ "EasySync_Payloads" ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"PAYLOAD CONSOLIDATION" ]
#================================================================================
#Create the consolidated payload based on the specified segment IDs.
Set Variable [ $i; Value:1 ]
Set Variable [ $payload ]
Loop
Enter Find Mode [  ]
Set Field By Name [ "EasySync_Payloads::ES_Payload_UUID"; GetValue ( $payload_segment_ids ; $i ) ]
Perform Find [  ]
If [ Get ( FoundCount ) <> 1 ]
# TODO: determine what error code to use here
Exit Loop If [ Let ( [	theErrorCode = -1 ;	theErrorDescription = "missing Payload Segment ID " & GetValue ( $payload_segment_ids ; $i ) ;	theErrorInfo = "" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	& "$i = " & Quote ( $i ) & " ;¶"] ;	True) ]
End If
Set Variable [ $payload; Value:$payload & EasySync_Payloads::Payload ]
Delete Record/Request[ No dialog ]
Set Variable [ $i; Value:$i + 1 ]
Exit Loop If [ $i > ValueCount ( $payload_segment_ids ) ]
End Loop
Exit Loop If [ /** * An error occurred in the above loop * * assign error info to local variables * then evaluate the errorCode as a Boolean *  */GetAsBoolean ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; $errorCode )") ) ]
New Record/Request
Set Field By Name [ "EasySync_Payloads::Payload"; $payload ]
Set Field By Name [ "EasySync_Payloads::Payload_Type"; "Push Payload" ]
Commit Records/Requests[ Skip data entry validation; No dialog ]
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Payload"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$payload = " & Quote ( $payload ) & " ;¶") ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"PAYLOAD EVALUATION" ]
#================================================================================
#Is the payload well-formed?
If [ PatternCount ( $payload ; "<payload>" ) ≠ 1or PatternCount ( $payload ; "</payload>" ) ≠ 1or PatternCount ( $payload ; "<last_pull>" ) ≠ 1or PatternCount ( $payload ; "</last_pull>" ) ≠ 1or PatternCount ( $payload ; "<settings>" ) ≠ 1or PatternCount ( $payload ; "</settings>" ) ≠ 1or PatternCount ( $payload ; "<tables>" ) ≠ 1or PatternCount ( $payload ; "</tables>" ) ≠ 1or PatternCount ( $payload ; "<records>" ) ≠ PatternCount ( $payload ; "</records>" )or PatternCount ( $payload ; "<deletions>" ) ≠ PatternCount ( $payload ; "</deletions>" )or ( PatternCount ( $payload ; "<records>" ) = 0 and PatternCount ( $payload ; "<deletions>" ) = 0 ) ]
# TODO: determine what error code to use here
Exit Loop If [ Let ( [	theErrorCode = -1 ;	theErrorDescription = "Payload is malformed" ;	theErrorInfo = "" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	& "$i = " & Quote ( $i ) & " ;¶"] ;	True) ]
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"EXTRACT HEADER FROM PAYLOAD" ]
#================================================================================
#Get the client's last pull time from the payload.
#Note: This is an integer representing the UTC time that the client last peformed a pull. It is used for conflict resolution.
Set Variable [ $last_pull_utc; Value:Let ( [	beginning = Position ( $payload ; "<last_pull>¶" ; 1 ; 1 ) + 11;	end = Position ( $payload ; "¶</last_pull>" ; beginning ; 1 );	last_pull = Middle ( $payload ; beginning ; end - beginning );	last_pull = Trim ( last_pull )] ;	last_pull) ]
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Last Pull: " & $last_pull_utc] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#Get the payload settings.
Set Variable [ $settings; Value:Let ( [	beginning = Position ( $payload ; "<settings>¶" ; 1 ; 1 ) + 11;	end = Position ( $payload ; "¶</settings>" ; beginning ; 1 );	settings = Middle ( $payload ; beginning ; end - beginning );	settings = Trim ( settings )] ;	settings) ]
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Payload Settings: " & $settings] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
If [ IsEmpty ( $settings ) ]
# TODO: determine what error code to use here
Exit Loop If [ Let ( [	theErrorCode = -1 ;	theErrorDescription = "Missing payload settings" ;	theErrorInfo = "" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
Set Variable [ $field_delimiter; Value:GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 1 ) ]
Set Variable [ $record_delimiter; Value:GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 2 ) ]
Set Variable [ $client_persistent_id; Value:GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 3 ) ]
Set Variable [ $client_version; Value:GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 4 ) ]
Set Variable [ $client_ip_address; Value:GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 5 ) ]
Set Variable [ $client_nic_address; Value:GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 6 ) ]
Set Variable [ $client_platform; Value:GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 7 ) ]
Set Variable [ $client_system_version; Value:GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 8 ) ]
Set Variable [ $client_device; Value:GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 9 ) ]
Set Variable [ $client_network_protocol; Value:GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 10 ) ]
Set Variable [ $client_network_type; Value:GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 11 ) ]
Set Variable [ $additional_settings; Value:GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 12 ) ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"GET RECORD COUNT" ]
#================================================================================
Set Variable [ $record_count; Value:PatternCount ( $payload; $record_delimiter ) - 1 ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"EXTRACT TABLE AND FIELD INFO FROM PAYLOAD" ]
Set Variable [ $~script.section.start; Value:Get ( CurrentTimeUTCMilliseconds ) ]
Set Variable [ $~script.section.subtract.runtime; Value:/* clear this value so it can be appended to by sub-sections, then reported at the end of this section */"" ]
#================================================================================
If [ $record_count > 0 ]
#Get the table info.
Set Variable [ $tables; Value:Let ( [beginning = Position ( $payload ; "<tables>¶" ; 1 ; 1 ) + 9;end = Position ( $payload ; "¶</tables>" ; 1 ; 1 );tables = Middle ( $payload ; beginning ; end - beginning );tables = Trim ( tables );tables = Substitute ( tables ; "<table>" ; "" );tables = Substitute ( tables ; "</table>" ; "" )];tables) ]
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Payload Tables: " & $tables] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
If [ IsEmpty ( $tables ) ]
# TODO: determine what error code to use here
Exit Loop If [ Let ( [	theErrorCode = -1 ;	theErrorDescription = "Missing table information" ;	theErrorInfo = "" ;	theErrorType = $~script.errorType ;		$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"	& "$errorCode = " & theErrorCode & " ;¶"	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"	)	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$~script.section = " & Quote ( $~script.section ) & " ;¶"] ;	True) ]
End If
#
#Create field name value lists for each table.
Set Variable [ $i; Value:1 ]
Loop
Set Variable [ $table; Value:Substitute ( GetValue ( $tables ; $i ); "</field>"; ¶ ) ]
Set Variable [ $table_name; Value:GetValue ( $table; 1 ) ]
Set Variable [ $dyn_code; Value:"Let ( [ $" & $table_name & " = $table ]; 1 )" ]
Set Variable [ $dyn_code; Value:Evaluate ( $dyn_code ) ]
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5 ]
Set Variable [ $~script.section.subtract.start; Value:Get ( CurrentTimeUTCMilliseconds ) ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 5 ;	~message = "Created Field Value List for Table: " & $table_name		& ¶ & Evaluate ( "$" & $table_name )] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
Set Variable [ $~script.section.subtract.runtime; Value:$~script.section.subtract.runtime+( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.subtract.start ) / 1000 ]
End If
Set Variable [ $i; Value:$i + 1 ]
Exit Loop If [ $i > ValueCount ( $tables ) ]
End Loop
#
End If
#========================================
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
Set Variable [ $~script.subtract.start; Value:Get ( CurrentTimeUTCMilliseconds ) ]
Set Variable [ $~script.section.runtime; Value:( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.start ) / 1000-$~script.section.subtract.runtime ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = $~script.section & " end, runtime: " & $~script.section.runtime] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	& "$~script.section.runtime = " & $~script.section.runtime & " ;¶"	& "$record_count = " & GetAsNumber ( $record_count ) & " ;¶"	& "$tables = " & Quote ( $tables ) & " ;¶") ]
Set Variable [ $~script.subtract.runtime; Value:$~script.subtract.runtime+$~script.section.subtract.runtime+( Get ( CurrentTimeUTCMilliseconds ) - $~script.subtract.start ) / 1000 ]
End If
#========================================
#
#
#
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"PROCESS PAYLOAD" ]
Set Variable [ $~script.section.start; Value:Get ( CurrentTimeUTCMilliseconds ) ]
Set Variable [ $~script.section.subtract.runtime; Value:/* clear this value so it can be appended to by sub-sections, then reported at the end of this section */"" ]
#================================================================================
If [ $record_count > 0 ]
#
#Loop over the records.
Set Variable [ $i; Value:1 ]
Set Variable [ $previous_start; Value:0 ]
Loop
#
#
#================================================================================
Set Variable [ $~script.section[2]; Value:"PROCESS SINGLE RECORD" ]
Set Variable [ $~script.section.start[2]; Value:Get ( CurrentTimeUTCMilliseconds ) ]
Set Variable [ $~script.section.subtract.runtime[2]; Value:/* clear this value so it can be appended to by sub-sections, then reported at the end of this section */"" ]
#================================================================================
#
#
#================================================================================
Set Variable [ $~script.section[3]; Value:"EXTRACT RECORD DATA" ]
Set Variable [ $~script.section.start[3]; Value:Get ( CurrentTimeUTCMilliseconds ) ]
#================================================================================
Set Variable [ $record; Value:/* record, formatted as a return-delimited value list. */Let ( [	// Note: The "+1" in the "beginning calc" is to account for the default carriage return imposed by ExectueSQL.	beginning = If ( $previous_start > 0 ;		Position ( $payload ; $record_delimiter ; $previous_start ; 1 )			+ Length ( $record_delimiter ) + 1		;		Position ( $payload; "<records>¶"; 1; 1 ) + 10	) ;	end = Position ( $payload ; $record_delimiter ; 1 ; $i + 1 ) ;	$previous_start = end ;	record = Middle ( $payload ; beginning ; end - beginning ) ;	// Encode CRLFs that might be found in Base64-encoded container data.	// This makes it easier to treat the fields as a return-delimited value list.	record = Substitute ( record ; Char ( 13 ) & Char ( 10 ) ; "[[CRLF]]" ) ;	// Encode any remaining newline characters.	record = Substitute ( record ; ¶ ; "[[BR]]" ) ;	record = Substitute ( record ; $field_delimiter ; ¶ )] ;	record) ]
Set Variable [ $table_name; Value:/* name of the table that is associated with this record. */GetValue ( $record ; 1 ) ]
Set Variable [ $field_names; Value:/* names of the fields that are associated with this record. */Evaluate ( "$" & $table_name ) ]
Set Variable [ $ES_Record_UUID; Value:// Note: This is based in VERY large part on Kevin Frank's "ValuePosition ( theList ; theValue )" function.// See: http://filemakerhacks.com/2011/06/12/valueposition-the-function-filemaker-forgot/// Thanks Kevin!Let( [	theList = $field_names;	theValue = "ES_Record_UUID";	pLp = ¶ & theList & ¶ ;	pVp = ¶ & theValue & ¶ ;	thePos = Position ( pLp ; pVp ; 1 ; 1 ) ;	theSegment = Left ( pLp ; thePos ) ;	theValPos = PatternCount ( theSegment ; ¶ )] ;	GetValue ( $record ; theValPos )) ]
Set Variable [ $ES_UTC_Time_Client; Value:Let( [	theList = $field_names;	theValue = "ES_UTC_Time";	pLp = ¶ & theList & ¶ ;	pVp = ¶ & theValue & ¶ ;	thePos = Position ( pLp ; pVp ; 1 ; 1 ) ;	theSegment = Left ( pLp ; thePos ) ;	theValPos = PatternCount ( theSegment ; ¶ )] ;	GetValue ( $record ; theValPos )) ]
#
#========================================
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5 ]
Set Variable [ $~script.section.subtract.start[2]; Value:Get ( CurrentTimeUTCMilliseconds ) ]
Set Variable [ $~script.section.runtime[3]; Value:( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.start[3] ) / 1000 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 5 ;	~message = $~script.section[3] & " end, runtime: " & $~script.section.runtime[3]] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	& "$~script.section[2] = " & Quote ( $~script.section[2] ) & " ;¶"	& "$~script.section[3] = " & Quote ( $~script.section[3] ) & " ;¶"	& "$~script.section.runtime[3] = " & $~script.section.runtime[3] & " ;¶"		& "$i = " & $i & " ;¶"	& "$ES_Record_UUID = " & Quote ( $ES_Record_UUID ) & " ;¶"	& "$ES_UTC_Time_Client = " & Quote ( $ES_UTC_Time_Client ) & " ;¶"	& "$table_name = " & Quote ( $table_name ) & " ;¶"	& "$field_names = " & Quote ( $field_names ) & " ;¶"	& "$record = " & Quote ( $record ) & " ;¶") ]
Set Variable [ $~script.section.subtract.runtime[2]; Value:$~script.section.subtract.runtime[2]+( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.subtract.start[2] ) / 1000 ]
End If
#========================================
#
#
#Go to the correct row in the Payload Details portal.
Go to Portal Row [ $i ][ Select; No dialog ]
#
#Set the Record UUID for the Payload Details record.
Set Field By Name [ "EasySync_Payload_Details::ES_Child_Record_UUID"; $ES_Record_UUID ]
Set Field By Name [ "EasySync_Payload_Details::Payload_Type"; "Payload Detail" ]
#
#Assume that we are going to update the record.
Set Variable [ $update_record; Value:1 ]
#
#If we are handling conflicts using any means other than "Client"...
If [ $$conflict_handling ≠ "Client" ]
#
#Need to check to see if there is a confict.
#If there is one, determine how to handle it.
#
#Get the host's ES_UTC_Time for the record.
Set Variable [ $ES_UTC_Time_Host; Value:Evaluate ( $table_name & "::ES_UTC_Time" ) ]
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = List (		"UTC Time Client: " & $ES_UTC_Time_Client ;		"UTC Time Host: " & $ES_UTC_Time_Host	)] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#If the record has been updated since the last time the user pulled data...
If [ $ES_UTC_Time_Host > $last_pull_utc ]
If [ $$conflict_handling = "Server" ]
#Server wins.
Set Variable [ $update_record; Value:0 ]
Else If [ ( $$conflict_handling = "Recent" ) and ( $ES_UTC_Time_Host > $ES_UTC_Time_Client ) ]
#Server wins if its update was the most recent.
Set Variable [ $update_record; Value:0 ]
End If
#
End If
#
End If
#
#If we are to update the record...
If [ $update_record ]
#
#Loop over the field names.
#We skip the first value because it is really the table name that the record is from.
Set Variable [ $f; Value:2 ]
Loop
#
#Get the name of the field.
Set Variable [ $field_name; Value:GetValue ( $field_names; $f ) ]
#
#
#
#================================================================================
Set Variable [ $~script.section[3]; Value:"PROCESS PAYLOAD: EXTRACT FIELD VALUE" ]
Set Variable [ $~script.section.start[3]; Value:Get ( CurrentTimeUTCMilliseconds ) ]
#================================================================================
If [ Left ( $field_name ; 4 ) ≠ "B64_" ]
#not a container field
#QUESTION: why not just get the ES_Device_ID value from the record data? (which is there; I checked)
Set Variable [ $field_value; Value:Let ( [	value = If ( $field_name = "ES_Device_ID";		$client_persistent_id ;		GetValue ( $record ; $f )	) ;	value = Substitute ( value ; "[[BR]]" ; ¶ )] ;	value) ]
Else
Set Variable [ $field_name; Value:Right ( $field_name; Length ( $field_name ) - 4 ) ]
Set Variable [ $field_value; Value:GetValue ( $record ; $f ) ]
If [ not IsEmpty ( $field_value ) ]
Set Variable [ $field_value; Value:Let ([value = $field_value;value = Substitute ( value ; "</b64>"; "" );fileNameWithExtension = GetValue ( Substitute ( value ; "<b64>"; "¶" ); 1 );encoded = Substitute ( value; fileNameWithExtension & "<b64>"; "" );encoded = Substitute ( encoded ; "[[CRLF]]" ; Char ( 13 ) & Char ( 10 ) );decoded = Base64Decode ( encoded; fileNameWithExtension )];decoded) ]
End If
End If
#
#========================================
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5 ]
Set Variable [ $~script.section.subtract.start[2]; Value:Get ( CurrentTimeUTCMilliseconds ) ]
Set Variable [ $~script.section.runtime[3]; Value:( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.start[3] ) / 1000 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 5 ;	~message = $~script.section[3] & " end, runtime: " & $~script.section.runtime[3]] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	& "$~script.section[2] = " & Quote ( $~script.section[2] ) & " ;¶"	& "$~script.section[3] = " & Quote ( $~script.section[3] ) & " ;¶"	& "$~script.section.runtime[3] = " & $~script.section.runtime[3] & " ;¶"		& "$i = " & $i & " ;¶"	& "$f = " & $f & " ;¶"	& "$table_name = " & Quote ( $table_name ) & " ;¶"	& "$field_name = " & Quote ( $field_name ) & " ;¶"	& "$field_value = " & Quote ( $field_value ) & " ;¶") ]
Set Variable [ $~script.section.subtract.runtime[2]; Value:$~script.section.subtract.runtime[2]+( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.subtract.start[2] ) / 1000 ]
End If
#========================================
#
#
#
#================================================================================
Set Variable [ $~script.section[3]; Value:"PROCESS PAYLOAD: SET FIELD" ]
Set Variable [ $~script.section.start[3]; Value:Get ( CurrentTimeUTCMilliseconds ) ]
#================================================================================
Set Variable [ $field_changed; Value:not Exact ( $field_value ; Evaluate ( $table_name & "::" & $field_name ) ) ]
If [ $field_changed ]
#Update the field.
#make several attempts to set the field if the record is locked
Set Variable [ $i[3]; Value:1 ]
Loop
Set Field By Name [ $table_name & "::" & $field_name; $field_value ]
Exit Loop If [ Get ( LastError ) = 0 ]
Exit Loop If [ If ( Get ( LastError ) ≠ 301 /* Record is in use by another user */ ;	Let ( [		theErrorCode = Get ( LastError ) ;		theErrorDescription = "(see FileMaker documentation for the description of this error code)" ;		theErrorInfo = "" ;		theErrorType = "Fmp" ;				$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"		& "$errorCode = " & theErrorCode & " ;¶"		& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"		& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;			"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"		)		& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"		& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"		& "$table_name = " & Quote ( $table_name ) & " ;¶"		& "$field_name = " & Quote ( $field_name ) & " ;¶"		& "$field_value = " & Quote ( $field_value ) & " ;¶"	] ;		True	)) ]
#
Exit Loop If [ // For $i[3] from 1 to $$record_lock_max_attemptsLet (	$i[3] = $i[3] + 1 ;	If ( $i[3] > $$record_lock_max_attempts ;		Let ( $i[3] = "" ; True )	)) ]
Pause/Resume Script [ Duration (seconds): $$record_lock_attempt_pause ]
End Loop
Set Variable [ $i[3]; Value:"" ]
Exit Loop If [ /** * there is an error in the above loop * The above loop must save the data to $error * NOTE: this will only work if there are only control steps between when the error occurred and the exit loop step */Get ( LastError ) ]
End If
#
#========================================
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5 ]
Set Variable [ $~script.section.subtract.start[2]; Value:Get ( CurrentTimeUTCMilliseconds ) ]
Set Variable [ $~script.section.runtime[3]; Value:( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.start[3] ) / 1000 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 5 ;	~message = $~script.section[3] & " end, runtime: " & $~script.section.runtime[3] & If ( $field_changed ; ", field changed" )] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	& "$~script.section[2] = " & Quote ( $~script.section[2] ) & " ;¶"	& "$~script.section[3] = " & Quote ( $~script.section[3] ) & " ;¶"	& "$~script.section.runtime[3] = " & $~script.section.runtime[3] & " ;¶"		& "$i = " & $i & " ;¶"	& "$f = " & $f & " ;¶"	& "$table_name = " & Quote ( $table_name ) & " ;¶"	& "$field_name = " & Quote ( $field_name ) & " ;¶"	& "$field_changed = " & Quote ( $field_changed ) & " ;¶") ]
Set Variable [ $~script.section.subtract.runtime[2]; Value:$~script.section.subtract.runtime[2]+( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.subtract.start[2] ) / 1000 ]
End If
#========================================
#
#
#
Set Variable [ $f; Value:$f + 1 ]
Exit Loop If [ $f > ValueCount ( $field_names ) ]
#
End Loop
#End loop that sets the fields.
Exit Loop If [ /** * An error occurred in the above loop * * assign error info to local variables * then evaluate the errorCode as a Boolean *  */GetAsBoolean ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; $errorCode )") ) ]
#
End If
#End "If we are to update the record."
#
#
#========================================
#end sub-section: "PROCESS SINGLE RECORD"
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
Set Variable [ $~script.section.subtract.start; Value:Get ( CurrentTimeUTCMilliseconds ) ]
Set Variable [ $~script.section.runtime[2]; Value:( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.start[2] ) / 1000-$~script.section.subtract.runtime[2] ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = $~script.section[2] & " end, runtime: " & $~script.section.runtime[2] & ", i: " & $i & If ( not $update_record ; ", DON'T UPDATE" )] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	& "$~script.section[2] = " & Quote ( $~script.section[2] ) & " ;¶"	& "$~script.section.runtime[2] = " & $~script.section.runtime[2] & " ;¶"	& "$~script.section.subtract.runtime[2] = " & Quote ( $~script.section.subtract.runtime[2] ) & " ;¶"		& "$i = " & $i & " ;¶"	& "$update_record = " & GetAsBoolean ( $update_record ) & " ;¶"	& "$table_name = " & Quote ( $table_name ) & " ;¶"	& "$field_names = " & Quote ( $field_names ) & " ;¶"	& "$ES_Record_UUID = " & Quote ( $ES_Record_UUID ) & " ;¶"	& "$record = " & Quote ( $record ) & " ;¶") ]
Set Variable [ $~script.section.subtract.runtime; Value:$~script.section.subtract.runtime[1]+$~script.section.subtract.runtime[2]+( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.subtract.start[1] ) / 1000 ]
End If
#========================================
#
#
Set Variable [ $i; Value:$i + 1 ]
Exit Loop If [ $i > ( PatternCount ( $payload; $record_delimiter ) - 1 ) ]
#
#
#End loop over the records.
End Loop
Exit Loop If [ /** * An error occurred in the above loop * * assign error info to local variables * then evaluate the errorCode as a Boolean *  */GetAsBoolean ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; $errorCode )") ) ]
#
#
#
#================================================================================
Set Variable [ $~script.section[2]; Value:"COMMIT RECORD" ]
#================================================================================
Commit Records/Requests[ No dialog ]
Exit Loop If [ If ( Get ( LastError ) ;	Let ( [		theErrorCode = Get ( LastError ) ;		theErrorDescription = "(see FileMaker documentation for the description of this error code)" ;		theErrorInfo = "after commit record step" ;		theErrorType = "Fmp" ;				$error = "$errorType = " & Quote ( theErrorType ) & " ;¶"		& "$errorCode = " & theErrorCode & " ;¶"		& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"		& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;			"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"		)		& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"		& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"		& "$~script.section[2] = " & Quote ( $~script.section ) & " ;¶"	] ;		True	)) ]
#
#
#
End If
#End "If there are records in the payload..."
#
#========================================
#end section: "PROCESS PAYLOAD"
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
Set Variable [ $~script.subtract.start; Value:Get ( CurrentTimeUTCMilliseconds ) ]
Set Variable [ $~script.section.runtime; Value:( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.start ) / 1000-$~script.section.subtract.runtime ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = $~script.section & " end, runtime: " & $~script.section.runtime] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"		& "$~script.section = " & Quote ( $~script.section ) & " ;¶"	& "$~script.section.runtime = " & $~script.section.runtime & " ;¶"	& "$~script.section.subtract.runtime = " & GetAsNumber ( $~script.section.subtract.runtime ) & " ;¶") ]
Set Variable [ $~script.subtract.runtime; Value:$~script.subtract.runtime+$~script.section.subtract.runtime+( Get ( CurrentTimeUTCMilliseconds ) - $~script.subtract.start ) / 1000 ]
End If
#========================================
#
#
#
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"DELETIONS PROCESSING" ]
#================================================================================
#Get the deletions from the payload.
Set Variable [ $deletions; Value:Let ( [	beginning = Position ( $payload ; "<deletions>¶" ; 1 ; 1 ) + 12;	end = Position ( $payload ; "¶</deletions>" ; Length ( $payload ) ; -1 );	deletions = Middle ( $payload ; beginning ; end - beginning );	records = Trim ( deletions )] ;	deletions) ]
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "Payload Deletions: " & $deletions] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶") ]
End If
#
#If there are deletions in the payload...
If [ not IsEmpty ( $deletions ) ]
#
#Loop over ES layouts to process deletions...
Set Variable [ $layouts; Value:LayoutNames ( ""  /* empty string uses the current file */ ) ]
Set Variable [ $l; Value:1 ]
Loop
#
Set Variable [ $layout; Value:GetValue ( $layouts ; $l ) ]
#
#If this is a layout based on a sync table ("ES_")...
If [ Left ( $layout; 3 ) = "ES_" ]
#
#Go to the layout.
Go to Layout [ GetValue ( $layouts ; $l ) ]
#
#Find records in the "deletions" portion of the payload...
#But only find those that really can be deleted, based on the conflict resolution method being used...
Enter Find Mode [  ]
Set Variable [ $d; Value:1 ]
Loop
#
#Get the deletion info.
Set Variable [ $deletion; Value:GetValue ( $deletions ; $d ) ]
Set Variable [ $deletion_UUID; Value:GetValue ( Substitute ( $deletion ; "|" ; ¶ ) ; 1 ) ]
Set Variable [ $deletion_UTC; Value:GetValue ( Substitute ( $deletion ; "|" ; ¶ ) ; 2 ) ]
#
Set Field By Name [ Get ( LayoutTableName ) & "::ES_Record_UUID"; $deletion_UUID ]
#
#Here's where we're applying conflict resolution to the deletion process...
If [ $$conflict_handling = "Server" ]
#In this case, we should only delete if the record hasn't changed on the server since the last pull.
Set Field By Name [ Get ( LayoutTableName ) & "::ES_UTC_Time"; "<" & $last_pull_utc ]
Else If [ $$conflict_handling = "Recent" ]
#In this case, we should only delete if the record was deleted on the mobile after any changes have been made to the hosted record.
Set Field By Name [ Get ( LayoutTableName ) & "::ES_UTC_Time"; "<" & $deletion_UTC ]
End If
#
Set Variable [ $d; Value:$d + 1 ]
Exit Loop If [ $d > ValueCount ( $deletions ) ]
New Record/Request
#
End Loop
Exit Loop If [ /** * An error occurred in the above loop * * assign error info to local variables * then evaluate the errorCode as a Boolean *  */GetAsBoolean ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; $errorCode )") ) ]
Perform Find [  ]
#
#Delete the records.
If [ Get ( FoundCount ) ]
Delete All Records[ No dialog ]
End If
#
End If
#
Set Variable [ $l; Value:$l + 1 ]
Exit Loop If [ $l > ValueCount ( $layouts ) ]
#
End Loop
#End "Loop over ES layouts to process deletions..."
Exit Loop If [ /** * An error occurred in the above loop * * assign error info to local variables * then evaluate the errorCode as a Boolean *  */GetAsBoolean ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; $errorCode )") ) ]
#
End If
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"CLEANUP" ]
#================================================================================
If [ $$delete_payloads = "Successful" ]
Go to Layout [ "EasySync_Payloads" ]
Delete Record/Request[ No dialog ]
End If
#
#
#
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# end single-pass loop for error trapping
Exit Loop If [ True ]
End Loop
#
#
#
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"RESTORE CONTEXT" ]
#================================================================================
Go to Layout [ original layout ]
#
#
#
#================================================================================
Set Variable [ $~script.section; Value:"HANDLE ERROR" ]
#================================================================================
Set Variable [ $~script.runtime; Value:( Get ( CurrentTimeUTCMilliseconds ) - $~script.start ) / 1000 ]
If [ /** * assign error info to local variables * then evaluate the errorCode as a Boolean *  */GetAsBoolean ( Evaluate (	"Let ( [¶"	& $error	& "! = \"\" ] ; $errorCode )") ) ]
Revert Record/Request[ No dialog ]
If [ $$delete_payloads = "All" ]
Go to Layout [ "EasySync_Payloads" ]
Delete Record/Request[ No dialog ]
End If
If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 2 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 2 ;	~message = "exit script with error"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$error = " & Quote ( $error ) & " ;¶"	& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶") ]
End If
Else If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter: Let ( [	~logLevel = 4 ;	~message = "exit script without error"] ;	"$LogLevel = " & ~logLevel & " ;¶"	& "$logMessage = " & Quote ( ~message ) & " ;¶"	& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"	& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"	& "$TimeStamp = GetAsTimeStamp ( " & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & " ) ;¶"	& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶") ]
End If
#
#
#
Set Variable [ $!; Value:""/** * This is a step that will not return an error. * * It's used to clear any errors reported by Get ( LastError ), so a calling script can use * Get ( LastError ) to test if an error occurred with the Perform Script step. * */ ]
Exit Script [ Result: "$error = " & Quote ( $error ) & " ;¶"& "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶" ]
#


---
Script:
  includeInMenu: 'False'
  runFullAccess: 'False'
  id: '8'
  name: 'EasySync Server: Push: Process Payload ( payload_segment_ids )'
  StepList:
    Step:
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#################################################################################'
      Text: '################################################################################'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PURPOSE:'
      Text: ' PURPOSE:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    Processes a payload that has been pushed by the client.'
      Text: '    Processes a payload that has been pushed by the client.'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# CONTEXT: EasySync_Payloads'
      Text: ' CONTEXT: EasySync_Payloads'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# PARAMETERS: (let notation format)'
      Text: ' PARAMETERS: (let notation format)'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $payload_segment_ids | value list | of payload id''s containing
        the data to process'
      Text: '    $payload_segment_ids | value list | of payload id''s containing the
        data to process'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# RETURNS:'
      Text: ' RETURNS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $error | a dictionary containing error data'
      Text: '    $error | a dictionary containing error data'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#    $runtime | number of seconds this script was running (with millisecond
        precision)'
      Text: '    $runtime | number of seconds this script was running (with millisecond
        precision)'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# VARIABLES:'
      Text: ' VARIABLES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# DEPENDENCIES:'
      Text: ' DEPENDENCIES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# NOTES:'
      Text: ' NOTES:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# REVISIONS:'
      Text: ' REVISIONS:'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: "#    \n2014-04-16\t\t\n\tTim Dietrich (timdietrich@me.com)\n\tInitial
        version.\n\n2014-04-18\t\t\n\tTim Dietrich (timdietrich@me.com)\n\tChanges
        to reflect move to UTC.\n\tMore granular error codes added.\n\n2014-04-20\n\tTim
        Dietrich (timdietrich@me.com)\n\tModifications to resolve \"simultaneous sync\"
        issue, support for record lock handling, etc.\n\n2014-04-21\n\tTim Dietrich
        (timdietrich@me.com)\n\tWe're now only setting fields that have actually changed.\n\n2014-04-22\n\tTim
        Dietrich (timdietrich@me.com)\n\tNow searching for the closing \"</records>\"
        tag using -1 as the start position\n\tso that we're searching for the tag
        from the end of the payload.\n\tThanks to Daniel Smith (@FMweetbicks) for
        the suggestion.\n\n2014-04-24\n\tTim Dietrich (timdietrich@me.com)\n\tAdded
        support for repeating fields.\n\n2014-04-28\n\tTim Dietrich (timdietrich@me.com)\n\tAdded
        a variable that allows auto-enter calcs for \"ES_UTC_Time\" and \"ES_Device_ID\"
        to be\n\toverwritten during the sync process.\n\n2014-05-03\n\tTim Dietrich
        (timdietrich@me.com)\n\tFixed bug that was causing the client's ES_UTC_Time
        from being pulled when processing\n\ta record. Thanks to Paul Jansen at APJ
        Computing Solutions for finding this one. Good catch!\n\n2014-05-08\n\tTim
        Dietrich (timdietrich@me.com)\n\tOptimized code that gets the next record.\n\n2014-05-15\n\tTim
        Dietrich (timdietrich@me.com)\n\tEliminated the need to copy the records portion
        of the payload to a distinct $records variable.\n\tThis should help to reduce
        the memory needed to process the payload, and should also slightly\n\tincrease
        performance.\n\n2014-06-02\n\tTim Dietrich (timdietrich@me.com)\n\tEliminates
        the empty find request when processing deletions.\n\tResolves bug enountered
        where, when a record is deleted, an additional record in the last\n\tES_ layout
        was also deleted.\n"
      Text: "    \n2014-04-16\t\t\n\tTim Dietrich (timdietrich@me.com)\n\tInitial
        version.\n\n2014-04-18\t\t\n\tTim Dietrich (timdietrich@me.com)\n\tChanges
        to reflect move to UTC.\n\tMore granular error codes added.\n\n2014-04-20\n\tTim
        Dietrich (timdietrich@me.com)\n\tModifications to resolve \"simultaneous sync\"
        issue, support for record lock handling, etc.\n\n2014-04-21\n\tTim Dietrich
        (timdietrich@me.com)\n\tWe're now only setting fields that have actually changed.\n\n2014-04-22\n\tTim
        Dietrich (timdietrich@me.com)\n\tNow searching for the closing \"</records>\"
        tag using -1 as the start position\n\tso that we're searching for the tag
        from the end of the payload.\n\tThanks to Daniel Smith (@FMweetbicks) for
        the suggestion.\n\n2014-04-24\n\tTim Dietrich (timdietrich@me.com)\n\tAdded
        support for repeating fields.\n\n2014-04-28\n\tTim Dietrich (timdietrich@me.com)\n\tAdded
        a variable that allows auto-enter calcs for \"ES_UTC_Time\" and \"ES_Device_ID\"
        to be\n\toverwritten during the sync process.\n\n2014-05-03\n\tTim Dietrich
        (timdietrich@me.com)\n\tFixed bug that was causing the client's ES_UTC_Time
        from being pulled when processing\n\ta record. Thanks to Paul Jansen at APJ
        Computing Solutions for finding this one. Good catch!\n\n2014-05-08\n\tTim
        Dietrich (timdietrich@me.com)\n\tOptimized code that gets the next record.\n\n2014-05-15\n\tTim
        Dietrich (timdietrich@me.com)\n\tEliminated the need to copy the records portion
        of the payload to a distinct $records variable.\n\tThis should help to reduce
        the memory needed to process the payload, and should also slightly\n\tincrease
        performance.\n\n2014-06-02\n\tTim Dietrich (timdietrich@me.com)\n\tEliminates
        the empty find request when processing deletions.\n\tResolves bug enountered
        where, when a record is deleted, an additional record in the last\n\tES_ layout
        was also deleted.\n"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#################################################################################'
      Text: '################################################################################'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.start; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.start
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: 'Set Variable [ $~script.errorType; Value:"Module: EasySync Server"
        ]'
      Value:
        Calculation: '"Module: EasySync Server"'
        DisplayCalculation:
          Chunk: '"Module: EasySync Server"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.errorType
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# single-pass loop for error trapping'
      Text: ' single-pass loop for error trapping'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
      Text: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"ASSIGN PARAMETERS" ]
      Value:
        Calculation: '"ASSIGN PARAMETERS"'
        DisplayCalculation:
          Chunk: '"ASSIGN PARAMETERS"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: "If [ /* assign script parameter to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptParameter )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) ) ]"
      Calculation: "/* assign script parameter to local variables */\n\nEvaluationError
        ( Evaluate (\n\t\"Let ( [¶\"\n\t& Get ( ScriptParameter )\n\t& \"! = \\\"\\\"
        ] ; \\\"\\\" )\"\n) )"
      DisplayCalculation:
        Chunk:
        - |+
          /* assign script parameter to local variables */

        - EvaluationError
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& "
        - Get
        - ' ( '
        - ScriptParameter
        - " )\n\t& \"! = \\\"\\\" ] ; \\\"\\\" )\"\n) )"
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription
        = \"Invalid Parameter\" ;\n\ttheErrorInfo = \"An error occurred when evaluating
        the script parameter as let notation\" ;\n\ttheErrorType = $~script.errorType
        ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" &
        Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription = \"Invalid
        Parameter\" ;\n\ttheErrorInfo = \"An error occurred when evaluating the script
        parameter as let notation\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error
        = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode =
        \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription = \"Invalid Parameter\"
          ;\n\ttheErrorInfo = \"An error occurred when evaluating the script parameter
          as let notation\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error
          = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ IsEmpty ( $payload_segment_ids ) ]
      Calculation: IsEmpty ( $payload_segment_ids )
      DisplayCalculation:
        Chunk:
        - IsEmpty
        - ' ( $payload_segment_ids )'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription
        = \"Invalid Parameter\" ;\n\ttheErrorInfo = \"payload_segment_ids parameter
        was empty\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType
        = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) &
        \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription = \"Invalid
        Parameter\" ;\n\ttheErrorInfo = \"payload_segment_ids parameter was empty\"
        ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType = \"
        & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode &
        \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) & \"
        ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = 2 ;\n\ttheErrorDescription = \"Invalid Parameter\"
          ;\n\ttheErrorInfo = \"payload_segment_ids parameter was empty\" ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"LOAD SETTINGS" ]
      Value:
        Calculation: '"LOAD SETTINGS"'
        DisplayCalculation:
          Chunk: '"LOAD SETTINGS"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: 'Perform Script [ “EasySync Server: Config: Load” ]'
      Script:
        id: '19'
        name: 'EasySync Server: Config: Load'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode
        = Get ( LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation
        for the description of this error code)\" ;\n\t\ttheErrorInfo = \"\" ;\n\t\ttheErrorType
        = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType = \" & Quote ( theErrorType )
        & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & Quote ( Get ( ScriptName )
        ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & Quote ( $~script.section )
        & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n) ]"
      Calculation: "If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode = Get (
        LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for
        the description of this error code)\" ;\n\t\ttheErrorInfo = \"\" ;\n\t\ttheErrorType
        = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType = \" & Quote ( theErrorType )
        & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & Quote ( Get ( ScriptName )
        ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & Quote ( $~script.section )
        & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n)"
      DisplayCalculation:
        Chunk:
        - If
        - ' ( '
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t"
        - Let
        - " ( [\n\t\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for the
          description of this error code)\" ;\n\t\ttheErrorInfo = \"\" ;\n\t\ttheErrorType
          = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\t"
        - 'True'
        - "\n\t)\n)"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"SET VARIABLES" ]
      Value:
        Calculation: '"SET VARIABLES"'
        DisplayCalculation:
          Chunk: '"SET VARIABLES"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $script_override; Value:1 \n\n/* Allow auto-enter
        calcs for \"ES_UTC_Time\" and \"ES_Device_ID\" to be overwritten during the
        sync process. */ ]"
      Value:
        Calculation: "1 \n\n/* Allow auto-enter calcs for \"ES_UTC_Time\" and \"ES_Device_ID\"
          to be overwritten during the sync process. */"
        DisplayCalculation:
          Chunk: "1 \n\n/* Allow auto-enter calcs for \"ES_UTC_Time\" and \"ES_Device_ID\"
            to be overwritten during the sync process. */"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $script_override
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $ErrorCaptureState; Value:Get ( ErrorCaptureState )
        ]
      Value:
        Calculation: Get ( ErrorCaptureState )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - ErrorCaptureState
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $ErrorCaptureState
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $AllowAbortState; Value:Get ( AllowAbortState ) ]
      Value:
        Calculation: Get ( AllowAbortState )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - AllowAbortState
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $AllowAbortState
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"MODIFY ENVIRONMENT" ]
      Value:
        Calculation: '"MODIFY ENVIRONMENT"'
        DisplayCalculation:
          Chunk: '"MODIFY ENVIRONMENT"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '85'
      name: Allow User Abort
      StepText: Allow User Abort [ Off ]
      Set:
        state: 'False'
    - enable: 'True'
      id: '86'
      name: Set Error Capture
      StepText: Set Error Capture [ On ]
      Set:
        state: 'True'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"MODIFY CONTEXT" ]
      Value:
        Calculation: '"MODIFY CONTEXT"'
        DisplayCalculation:
          Chunk: '"MODIFY CONTEXT"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '6'
      name: Go to Layout
      StepText: Go to Layout [ "EasySync_Payloads" ]
      LayoutDestination:
        value: LayoutNameByCalc
      Layout:
        Calculation: '"EasySync_Payloads"'
        DisplayCalculation:
          Chunk: '"EasySync_Payloads"'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"PAYLOAD CONSOLIDATION" ]
      Value:
        Calculation: '"PAYLOAD CONSOLIDATION"'
        DisplayCalculation:
          Chunk: '"PAYLOAD CONSOLIDATION"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Create the consolidated payload based on the specified segment IDs.'
      Text: Create the consolidated payload based on the specified segment IDs.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $payload ]
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $payload
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '22'
      name: Enter Find Mode
      StepText: Enter Find Mode [  ]
      Pause:
        state: 'False'
      Restore:
        state: 'False'
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ "EasySync_Payloads::ES_Payload_UUID"; GetValue
        ( $payload_segment_ids ; $i ) ]
      Result:
        Calculation: GetValue ( $payload_segment_ids ; $i )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( $payload_segment_ids ; $i )'
      TargetName:
        Calculation: '"EasySync_Payloads::ES_Payload_UUID"'
        DisplayCalculation:
          Chunk: '"EasySync_Payloads::ES_Payload_UUID"'
    - enable: 'True'
      id: '28'
      name: Perform Find
      StepText: Perform Find [  ]
      Restore:
        state: 'False'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( FoundCount ) <> 1 ]
      Calculation: Get ( FoundCount ) <> 1
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - FoundCount
        - ' ) <> 1'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# TODO: determine what error code to use here'
      Text: ' TODO: determine what error code to use here'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription
        = \"missing Payload Segment ID \" & GetValue ( $payload_segment_ids ; $i )
        ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error
        = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode =
        \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n\n\t& \"$i = \" & Quote ( $i ) & \"
        ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"missing
        Payload Segment ID \" & GetValue ( $payload_segment_ids ; $i ) ;\n\ttheErrorInfo
        = \"\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error = \"$errorType
        = \" & Quote ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) &
        \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$~script.section = \"
        & Quote ( $~script.section ) & \" ;¶\"\n\n\t& \"$i = \" & Quote ( $i ) & \"
        ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"missing Payload
          Segment ID \" & "
        - GetValue
        - " ( $payload_segment_ids ; $i ) ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType
          = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\n\t& \"$i = \" & "
        - Quote
        - " ( $i ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $payload; Value:$payload & EasySync_Payloads::Payload
        ]
      Value:
        Calculation: $payload & EasySync_Payloads::Payload
        DisplayCalculation:
          Chunk:
          - '$payload & '
          - type: FieldRef
            Field:
              table: EasySync_Payloads
              id: '4'
              name: Payload
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $payload
    - enable: 'True'
      id: '9'
      name: Delete Record/Request
      StepText: |-
        Delete Record/Request
        [ No dialog ]
      NoInteract:
        state: 'True'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:$i + 1 ]
      Value:
        Calculation: $i + 1
        DisplayCalculation:
          Chunk: $i + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $i > ValueCount ( $payload_segment_ids ) ]
      Calculation: $i > ValueCount ( $payload_segment_ids )
      DisplayCalculation:
        Chunk:
        - '$i > '
        - ValueCount
        - ' ( $payload_segment_ids )'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /**\n * An error occurred in the above loop\n *\n
        * assign error info to local variables\n * then evaluate the errorCode as
        a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t&
        \"! = \\\"\\\" ] ; $errorCode )\"\n) ) ]"
      Calculation: "/**\n * An error occurred in the above loop\n *\n * assign error
        info to local variables\n * then evaluate the errorCode as a Boolean\n * \n
        */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\"
        ] ; $errorCode )\"\n) )"
      DisplayCalculation:
        Chunk:
        - "/**\n * An error occurred in the above loop\n *\n * assign error info to
          local variables\n * then evaluate the errorCode as a Boolean\n * \n */\n\n"
        - GetAsBoolean
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n)
          )"
    - enable: 'True'
      id: '7'
      name: New Record/Request
      StepText: New Record/Request
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ "EasySync_Payloads::Payload"; $payload ]
      Result:
        Calculation: $payload
        DisplayCalculation:
          Chunk: $payload
      TargetName:
        Calculation: '"EasySync_Payloads::Payload"'
        DisplayCalculation:
          Chunk: '"EasySync_Payloads::Payload"'
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ "EasySync_Payloads::Payload_Type"; "Push Payload"
        ]
      Result:
        Calculation: '"Push Payload"'
        DisplayCalculation:
          Chunk: '"Push Payload"'
      TargetName:
        Calculation: '"EasySync_Payloads::Payload_Type"'
        DisplayCalculation:
          Chunk: '"EasySync_Payloads::Payload_Type"'
    - enable: 'True'
      id: '75'
      name: Commit Records/Requests
      StepText: |-
        Commit Records/Requests
        [ Skip data entry validation; No dialog ]
      NoInteract:
        state: 'True'
      Option:
        state: 'True'
      ESSForceCommit:
        state: 'False'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload\"\n] ;\n\t\"$LogLevel =
        \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \"
        ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$payload = \" & Quote ( $payload ) & \"
        ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$payload = \" & Quote ( $payload ) & \"
        ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload\"\n] ;\n\t\"$LogLevel =
          \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$payload = \" & "
        - Quote
        - |2-
           ( $payload ) & " ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"PAYLOAD EVALUATION" ]
      Value:
        Calculation: '"PAYLOAD EVALUATION"'
        DisplayCalculation:
          Chunk: '"PAYLOAD EVALUATION"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Is the payload well-formed?'
      Text: Is the payload well-formed?
    - enable: 'True'
      id: '68'
      name: If
      StepText: |-
        If [ PatternCount ( $payload ; "<payload>" ) ≠ 1
        or PatternCount ( $payload ; "</payload>" ) ≠ 1
        or PatternCount ( $payload ; "<last_pull>" ) ≠ 1
        or PatternCount ( $payload ; "</last_pull>" ) ≠ 1
        or PatternCount ( $payload ; "<settings>" ) ≠ 1
        or PatternCount ( $payload ; "</settings>" ) ≠ 1
        or PatternCount ( $payload ; "<tables>" ) ≠ 1
        or PatternCount ( $payload ; "</tables>" ) ≠ 1
        or PatternCount ( $payload ; "<records>" ) ≠ PatternCount ( $payload ; "</records>" )
        or PatternCount ( $payload ; "<deletions>" ) ≠ PatternCount ( $payload ; "</deletions>" )
        or ( PatternCount ( $payload ; "<records>" ) = 0 and PatternCount ( $payload ; "<deletions>" ) = 0 ) ]
      Calculation: |-
        PatternCount ( $payload ; "<payload>" ) ≠ 1
        or PatternCount ( $payload ; "</payload>" ) ≠ 1
        or PatternCount ( $payload ; "<last_pull>" ) ≠ 1
        or PatternCount ( $payload ; "</last_pull>" ) ≠ 1
        or PatternCount ( $payload ; "<settings>" ) ≠ 1
        or PatternCount ( $payload ; "</settings>" ) ≠ 1
        or PatternCount ( $payload ; "<tables>" ) ≠ 1
        or PatternCount ( $payload ; "</tables>" ) ≠ 1
        or PatternCount ( $payload ; "<records>" ) ≠ PatternCount ( $payload ; "</records>" )
        or PatternCount ( $payload ; "<deletions>" ) ≠ PatternCount ( $payload ; "</deletions>" )
        or ( PatternCount ( $payload ; "<records>" ) = 0 and PatternCount ( $payload ; "<deletions>" ) = 0 )
      DisplayCalculation:
        Chunk:
        - PatternCount
        - |2
           ( $payload ; "<payload>" ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; "</payload>" ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; "<last_pull>" ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; "</last_pull>" ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; "<settings>" ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; "</settings>" ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; "<tables>" ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - |2
           ( $payload ; "</tables>" ) ≠ 1
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - ' ( $payload ; "<records>" ) ≠ '
        - PatternCount
        - |2
           ( $payload ; "</records>" )
        - or
        - type: NoRef
          __content__: ' '
        - PatternCount
        - ' ( $payload ; "<deletions>" ) ≠ '
        - PatternCount
        - |2
           ( $payload ; "</deletions>" )
        - or
        - ' ( '
        - PatternCount
        - ' ( $payload ; "<records>" ) = 0 '
        - and
        - type: NoRef
          __content__: ' '
        - PatternCount
        - ' ( $payload ; "<deletions>" ) = 0 )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# TODO: determine what error code to use here'
      Text: ' TODO: determine what error code to use here'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription
        = \"Payload is malformed\" ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType = $~script.errorType
        ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" &
        Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n\n\t&
        \"$i = \" & Quote ( $i ) & \" ;¶\"\n] ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Payload
        is malformed\" ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType = $~script.errorType
        ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" &
        Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n\n\t&
        \"$i = \" & Quote ( $i ) & \" ;¶\"\n] ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Payload is malformed\"
          ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error
          = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\n\t& \"$i = \" & "
        - Quote
        - " ( $i ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"EXTRACT HEADER FROM PAYLOAD"
        ]
      Value:
        Calculation: '"EXTRACT HEADER FROM PAYLOAD"'
        DisplayCalculation:
          Chunk: '"EXTRACT HEADER FROM PAYLOAD"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the client''s last pull time from the payload.'
      Text: Get the client's last pull time from the payload.
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Note: This is an integer representing the UTC time that the client
        last peformed a pull. It is used for conflict resolution.'
      Text: 'Note: This is an integer representing the UTC time that the client last
        peformed a pull. It is used for conflict resolution.'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $last_pull_utc; Value:Let ( [\n\tbeginning = Position
        ( $payload ; \"<last_pull>¶\" ; 1 ; 1 ) + 11;\n\tend = Position ( $payload
        ; \"¶</last_pull>\" ; beginning ; 1 );\n\tlast_pull = Middle ( $payload ;
        beginning ; end - beginning );\n\tlast_pull = Trim ( last_pull )\n] ;\n\tlast_pull\n)
        ]"
      Value:
        Calculation: "Let ( [\n\tbeginning = Position ( $payload ; \"<last_pull>¶\"
          ; 1 ; 1 ) + 11;\n\tend = Position ( $payload ; \"¶</last_pull>\" ; beginning
          ; 1 );\n\tlast_pull = Middle ( $payload ; beginning ; end - beginning );\n\tlast_pull
          = Trim ( last_pull )\n] ;\n\tlast_pull\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( [\n\tbeginning = "
          - Position
          - " ( $payload ; \"<last_pull>¶\" ; 1 ; 1 ) + 11;\n\tend = "
          - Position
          - " ( $payload ; \"¶</last_pull>\" ; beginning ; 1 );\n\tlast_pull = "
          - Middle
          - " ( $payload ; beginning ; end - beginning );\n\tlast_pull = "
          - Trim
          - " ( last_pull )\n] ;\n\tlast_pull\n)"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $last_pull_utc
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Last Pull: \" & $last_pull_utc\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Last Pull: \" & $last_pull_utc\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Last Pull: \" & $last_pull_utc\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the payload settings.'
      Text: Get the payload settings.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $settings; Value:Let ( [\n\tbeginning = Position (
        $payload ; \"<settings>¶\" ; 1 ; 1 ) + 11;\n\tend = Position ( $payload ;
        \"¶</settings>\" ; beginning ; 1 );\n\tsettings = Middle ( $payload ; beginning
        ; end - beginning );\n\tsettings = Trim ( settings )\n] ;\n\tsettings\n) ]"
      Value:
        Calculation: "Let ( [\n\tbeginning = Position ( $payload ; \"<settings>¶\"
          ; 1 ; 1 ) + 11;\n\tend = Position ( $payload ; \"¶</settings>\" ; beginning
          ; 1 );\n\tsettings = Middle ( $payload ; beginning ; end - beginning );\n\tsettings
          = Trim ( settings )\n] ;\n\tsettings\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( [\n\tbeginning = "
          - Position
          - " ( $payload ; \"<settings>¶\" ; 1 ; 1 ) + 11;\n\tend = "
          - Position
          - " ( $payload ; \"¶</settings>\" ; beginning ; 1 );\n\tsettings = "
          - Middle
          - " ( $payload ; beginning ; end - beginning );\n\tsettings = "
          - Trim
          - " ( settings )\n] ;\n\tsettings\n)"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $settings
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Settings: \" & $settings\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Settings: \"
        & $settings\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Settings: \" & $settings\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ IsEmpty ( $settings ) ]
      Calculation: IsEmpty ( $settings )
      DisplayCalculation:
        Chunk:
        - IsEmpty
        - ' ( $settings )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# TODO: determine what error code to use here'
      Text: ' TODO: determine what error code to use here'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription
        = \"Missing payload settings\" ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Missing
        payload settings\" ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType = $~script.errorType
        ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" &
        Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Missing payload
          settings\" ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType = $~script.errorType
          ;\n\t\n\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $field_delimiter; Value:GetValue ( Substitute ( $settings
        ; "</setting>" ; ¶ ) ; 1 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 1 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; "</setting>" ; ¶ ) ; 1 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_delimiter
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $record_delimiter; Value:GetValue ( Substitute ( $settings
        ; "</setting>" ; ¶ ) ; 2 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 2 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; "</setting>" ; ¶ ) ; 2 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $record_delimiter
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $client_persistent_id; Value:GetValue ( Substitute
        ( $settings ; "</setting>" ; ¶ ) ; 3 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 3 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; "</setting>" ; ¶ ) ; 3 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $client_persistent_id
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $client_version; Value:GetValue ( Substitute ( $settings
        ; "</setting>" ; ¶ ) ; 4 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 4 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; "</setting>" ; ¶ ) ; 4 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $client_version
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $client_ip_address; Value:GetValue ( Substitute ( $settings
        ; "</setting>" ; ¶ ) ; 5 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 5 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; "</setting>" ; ¶ ) ; 5 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $client_ip_address
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $client_nic_address; Value:GetValue ( Substitute (
        $settings ; "</setting>" ; ¶ ) ; 6 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 6 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; "</setting>" ; ¶ ) ; 6 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $client_nic_address
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $client_platform; Value:GetValue ( Substitute ( $settings
        ; "</setting>" ; ¶ ) ; 7 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 7 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; "</setting>" ; ¶ ) ; 7 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $client_platform
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $client_system_version; Value:GetValue ( Substitute
        ( $settings ; "</setting>" ; ¶ ) ; 8 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 8 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; "</setting>" ; ¶ ) ; 8 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $client_system_version
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $client_device; Value:GetValue ( Substitute ( $settings
        ; "</setting>" ; ¶ ) ; 9 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 9 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; "</setting>" ; ¶ ) ; 9 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $client_device
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $client_network_protocol; Value:GetValue ( Substitute
        ( $settings ; "</setting>" ; ¶ ) ; 10 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 10 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; "</setting>" ; ¶ ) ; 10 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $client_network_protocol
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $client_network_type; Value:GetValue ( Substitute (
        $settings ; "</setting>" ; ¶ ) ; 11 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 11 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; "</setting>" ; ¶ ) ; 11 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $client_network_type
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $additional_settings; Value:GetValue ( Substitute (
        $settings ; "</setting>" ; ¶ ) ; 12 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $settings ; "</setting>" ; ¶ ) ; 12 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $settings ; "</setting>" ; ¶ ) ; 12 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $additional_settings
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"GET RECORD COUNT" ]
      Value:
        Calculation: '"GET RECORD COUNT"'
        DisplayCalculation:
          Chunk: '"GET RECORD COUNT"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $record_count; Value:PatternCount ( $payload; $record_delimiter
        ) - 1 ]
      Value:
        Calculation: PatternCount ( $payload; $record_delimiter ) - 1
        DisplayCalculation:
          Chunk:
          - PatternCount
          - ' ( $payload; $record_delimiter ) - 1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $record_count
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"EXTRACT TABLE AND FIELD INFO
        FROM PAYLOAD" ]
      Value:
        Calculation: '"EXTRACT TABLE AND FIELD INFO FROM PAYLOAD"'
        DisplayCalculation:
          Chunk: '"EXTRACT TABLE AND FIELD INFO FROM PAYLOAD"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section.start; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section.start
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $~script.section.subtract.runtime; Value:/* clear this value so it can be appended to by sub-sections, then reported at the end of this section */

        "" ]
      Value:
        Calculation: |-
          /* clear this value so it can be appended to by sub-sections, then reported at the end of this section */

          ""
        DisplayCalculation:
          Chunk: |-
            /* clear this value so it can be appended to by sub-sections, then reported at the end of this section */

            ""
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section.subtract.runtime
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $record_count > 0 ]
      Calculation: $record_count > 0
      DisplayCalculation:
        Chunk: $record_count > 0
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the table info.'
      Text: Get the table info.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $tables; Value:Let ( \n[\nbeginning = Position ( $payload
        ; \"<tables>¶\" ; 1 ; 1 ) + 9;\nend = Position ( $payload ; \"¶</tables>\"
        ; 1 ; 1 );\ntables = Middle ( $payload ; beginning ; end - beginning );\ntables
        = Trim ( tables );\ntables = Substitute ( tables ; \"<table>\" ; \"\" );\ntables
        = Substitute ( tables ; \"</table>\" ; \"\" )\n];\ntables\n) ]"
      Value:
        Calculation: "Let ( \n[\nbeginning = Position ( $payload ; \"<tables>¶\" ;
          1 ; 1 ) + 9;\nend = Position ( $payload ; \"¶</tables>\" ; 1 ; 1 );\ntables
          = Middle ( $payload ; beginning ; end - beginning );\ntables = Trim ( tables
          );\ntables = Substitute ( tables ; \"<table>\" ; \"\" );\ntables = Substitute
          ( tables ; \"</table>\" ; \"\" )\n];\ntables\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( \n[\nbeginning = "
          - Position
          - " ( $payload ; \"<tables>¶\" ; 1 ; 1 ) + 9;\nend = "
          - Position
          - " ( $payload ; \"¶</tables>\" ; 1 ; 1 );\ntables = "
          - Middle
          - " ( $payload ; beginning ; end - beginning );\ntables = "
          - Trim
          - " ( tables );\ntables = "
          - Substitute
          - " ( tables ; \"<table>\" ; \"\" );\ntables = "
          - Substitute
          - |2-
             ( tables ; "</table>" ; "" )
            ];
            tables
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $tables
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Tables: \" & $tables\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Tables: \"
        & $tables\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Tables: \" & $tables\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ IsEmpty ( $tables ) ]
      Calculation: IsEmpty ( $tables )
      DisplayCalculation:
        Chunk:
        - IsEmpty
        - ' ( $tables )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# TODO: determine what error code to use here'
      Text: ' TODO: determine what error code to use here'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription
        = \"Missing table information\" ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType
        = $~script.errorType ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType
        ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription
        = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n) ]"
      Calculation: "Let ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Missing
        table information\" ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType = $~script.errorType
        ;\n\t\n\t$error = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t&
        \"$errorCode = \" & theErrorCode & \" ;¶\"\n\t& \"$errorDescription = \" &
        Quote ( theErrorDescription ) & \" ;¶\"\n\t& If ( not IsEmpty ( theErrorInfo
        ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & Quote ( theErrorInfo
        ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) &
        \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) &
        \" ;¶\"\n\t& \"$~script.section = \" & Quote ( $~script.section ) & \" ;¶\"\n]
        ;\n\tTrue\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\ttheErrorCode = -1 ;\n\ttheErrorDescription = \"Missing table information\"
          ;\n\ttheErrorInfo = \"\" ;\n\ttheErrorType = $~script.errorType ;\n\t\n\t$error
          = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n] ;\n\t"
        - 'True'
        - |2-

          )
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Create field name value lists for each table.'
      Text: Create field name value lists for each table.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $table; Value:Substitute ( GetValue ( $tables ; $i
        ); "</field>"; ¶ ) ]
      Value:
        Calculation: Substitute ( GetValue ( $tables ; $i ); "</field>"; ¶ )
        DisplayCalculation:
          Chunk:
          - Substitute
          - ' ( '
          - GetValue
          - ' ( $tables ; $i ); "</field>"; ¶ )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $table
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $table_name; Value:GetValue ( $table; 1 ) ]
      Value:
        Calculation: GetValue ( $table; 1 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( $table; 1 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $table_name
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $dyn_code; Value:"Let ( [ $" & $table_name & " = $table
        ]; 1 )" ]
      Value:
        Calculation: '"Let ( [ $" & $table_name & " = $table ]; 1 )"'
        DisplayCalculation:
          Chunk: '"Let ( [ $" & $table_name & " = $table ]; 1 )"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $dyn_code
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $dyn_code; Value:Evaluate ( $dyn_code ) ]
      Value:
        Calculation: Evaluate ( $dyn_code )
        DisplayCalculation:
          Chunk:
          - Evaluate
          - ' ( $dyn_code )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $dyn_code
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section.subtract.start; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section.subtract.start
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 5 ;\n\t~message = \"Created Field Value List for Table:
        \" & $table_name\n\t\t& ¶ & Evaluate ( \"$\" & $table_name )\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 5 ;\n\t~message = \"Created Field Value
        List for Table: \" & $table_name\n\t\t& ¶ & Evaluate ( \"$\" & $table_name
        )\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" &
        Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 5 ;\n\t~message = \"Created Field Value List for Table:
          \" & $table_name\n\t\t& ¶ & "
        - Evaluate
        - " ( \"$\" & $table_name )\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
          \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $~script.section.subtract.runtime; Value:$~script.section.subtract.runtime
        +
        ( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.subtract.start ) / 1000 ]
      Value:
        Calculation: |-
          $~script.section.subtract.runtime
          +
          ( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.subtract.start ) / 1000
        DisplayCalculation:
          Chunk:
          - "$~script.section.subtract.runtime\n+\n( "
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $~script.section.subtract.start ) / 1000'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section.subtract.runtime
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:$i + 1 ]
      Value:
        Calculation: $i + 1
        DisplayCalculation:
          Chunk: $i + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $i > ValueCount ( $tables ) ]
      Calculation: $i > ValueCount ( $tables )
      DisplayCalculation:
        Chunk:
        - '$i > '
        - ValueCount
        - ' ( $tables )'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#========================================'
      Text: ========================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.subtract.start; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.subtract.start
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $~script.section.runtime; Value:( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.start ) / 1000
        -
        $~script.section.subtract.runtime ]
      Value:
        Calculation: |-
          ( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.start ) / 1000
          -
          $~script.section.subtract.runtime
        DisplayCalculation:
          Chunk:
          - '( '
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - |2-
             ) - $~script.section.start ) / 1000
            -
            $~script.section.subtract.runtime
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section.runtime
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = $~script.section & \" end, runtime:
        \" & $~script.section.runtime\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
        \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \"
        & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote
        ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp (
        \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 )
        ) & \" ) ;¶\"\n\t\n\t& \"$~script.section = \" & Quote ( $~script.section
        ) & \" ;¶\"\n\t& \"$~script.section.runtime = \" & $~script.section.runtime
        & \" ;¶\"\n\n\t& \"$record_count = \" & GetAsNumber ( $record_count ) & \"
        ;¶\"\n\t& \"$tables = \" & Quote ( $tables ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = $~script.section & \"
        end, runtime: \" & $~script.section.runtime\n] ;\n\t\"$LogLevel = \" & ~logLevel
        & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n\t\n\t& \"$~script.section = \" & Quote ( $~script.section
        ) & \" ;¶\"\n\t& \"$~script.section.runtime = \" & $~script.section.runtime
        & \" ;¶\"\n\n\t& \"$record_count = \" & GetAsNumber ( $record_count ) & \"
        ;¶\"\n\t& \"$tables = \" & Quote ( $tables ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = $~script.section & \" end, runtime:
          \" & $~script.section.runtime\n] ;\n\t\"$LogLevel = \" & ~logLevel & \"
          ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\t\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t& \"$~script.section.runtime = \" &
          $~script.section.runtime & \" ;¶\"\n\n\t& \"$record_count = \" & "
        - GetAsNumber
        - " ( $record_count ) & \" ;¶\"\n\t& \"$tables = \" & "
        - Quote
        - |2-
           ( $tables ) & " ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $~script.subtract.runtime; Value:$~script.subtract.runtime
        +
        $~script.section.subtract.runtime
        +
        ( Get ( CurrentTimeUTCMilliseconds ) - $~script.subtract.start ) / 1000 ]
      Value:
        Calculation: |-
          $~script.subtract.runtime
          +
          $~script.section.subtract.runtime
          +
          ( Get ( CurrentTimeUTCMilliseconds ) - $~script.subtract.start ) / 1000
        DisplayCalculation:
          Chunk:
          - "$~script.subtract.runtime\n+\n$~script.section.subtract.runtime\n+\n( "
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $~script.subtract.start ) / 1000'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.subtract.runtime
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#========================================'
      Text: ========================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"PROCESS PAYLOAD" ]
      Value:
        Calculation: '"PROCESS PAYLOAD"'
        DisplayCalculation:
          Chunk: '"PROCESS PAYLOAD"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section.start; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section.start
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $~script.section.subtract.runtime; Value:/* clear this value so it can be appended to by sub-sections, then reported at the end of this section */

        "" ]
      Value:
        Calculation: |-
          /* clear this value so it can be appended to by sub-sections, then reported at the end of this section */

          ""
        DisplayCalculation:
          Chunk: |-
            /* clear this value so it can be appended to by sub-sections, then reported at the end of this section */

            ""
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section.subtract.runtime
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $record_count > 0 ]
      Calculation: $record_count > 0
      DisplayCalculation:
        Chunk: $record_count > 0
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Loop over the records.'
      Text: Loop over the records.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $previous_start; Value:0 ]
      Value:
        Calculation: '0'
        DisplayCalculation:
          Chunk: '0'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $previous_start
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section[2]; Value:"PROCESS SINGLE RECORD"
        ]
      Value:
        Calculation: '"PROCESS SINGLE RECORD"'
        DisplayCalculation:
          Chunk: '"PROCESS SINGLE RECORD"'
      Repetition:
        Calculation: '2'
        DisplayCalculation:
          Chunk: '2'
      Name: $~script.section
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section.start[2]; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '2'
        DisplayCalculation:
          Chunk: '2'
      Name: $~script.section.start
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $~script.section.subtract.runtime[2]; Value:/* clear this value so it can be appended to by sub-sections, then reported at the end of this section */

        "" ]
      Value:
        Calculation: |-
          /* clear this value so it can be appended to by sub-sections, then reported at the end of this section */

          ""
        DisplayCalculation:
          Chunk: |-
            /* clear this value so it can be appended to by sub-sections, then reported at the end of this section */

            ""
      Repetition:
        Calculation: '2'
        DisplayCalculation:
          Chunk: '2'
      Name: $~script.section.subtract.runtime
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section[3]; Value:"EXTRACT RECORD DATA" ]
      Value:
        Calculation: '"EXTRACT RECORD DATA"'
        DisplayCalculation:
          Chunk: '"EXTRACT RECORD DATA"'
      Repetition:
        Calculation: '3'
        DisplayCalculation:
          Chunk: '3'
      Name: $~script.section
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section.start[3]; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '3'
        DisplayCalculation:
          Chunk: '3'
      Name: $~script.section.start
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $record; Value:/* record, formatted as a return-delimited
        value list. */\n\nLet ( [\n\t// Note: The \"+1\" in the \"beginning calc\"
        is to account for the default carriage return imposed by ExectueSQL.\n\tbeginning
        = If ( $previous_start > 0 ;\n\t\tPosition ( $payload ; $record_delimiter
        ; $previous_start ; 1 )\n\t\t\t+ Length ( $record_delimiter ) + 1\n\t\t;\n\t\tPosition
        ( $payload; \"<records>¶\"; 1; 1 ) + 10\n\t) ;\n\tend = Position ( $payload
        ; $record_delimiter ; 1 ; $i + 1 ) ;\n\t$previous_start = end ;\n\trecord
        = Middle ( $payload ; beginning ; end - beginning ) ;\n\t// Encode CRLFs that
        might be found in Base64-encoded container data.\n\t// This makes it easier
        to treat the fields as a return-delimited value list.\n\trecord = Substitute
        ( record ; Char ( 13 ) & Char ( 10 ) ; \"[[CRLF]]\" ) ;\n\t// Encode any remaining
        newline characters.\n\trecord = Substitute ( record ; ¶ ; \"[[BR]]\" ) ;\n\trecord
        = Substitute ( record ; $field_delimiter ; ¶ )\n] ;\n\trecord\n) ]"
      Value:
        Calculation: "/* record, formatted as a return-delimited value list. */\n\nLet
          ( [\n\t// Note: The \"+1\" in the \"beginning calc\" is to account for the
          default carriage return imposed by ExectueSQL.\n\tbeginning = If ( $previous_start
          > 0 ;\n\t\tPosition ( $payload ; $record_delimiter ; $previous_start ; 1
          )\n\t\t\t+ Length ( $record_delimiter ) + 1\n\t\t;\n\t\tPosition ( $payload;
          \"<records>¶\"; 1; 1 ) + 10\n\t) ;\n\tend = Position ( $payload ; $record_delimiter
          ; 1 ; $i + 1 ) ;\n\t$previous_start = end ;\n\trecord = Middle ( $payload
          ; beginning ; end - beginning ) ;\n\t// Encode CRLFs that might be found
          in Base64-encoded container data.\n\t// This makes it easier to treat the
          fields as a return-delimited value list.\n\trecord = Substitute ( record
          ; Char ( 13 ) & Char ( 10 ) ; \"[[CRLF]]\" ) ;\n\t// Encode any remaining
          newline characters.\n\trecord = Substitute ( record ; ¶ ; \"[[BR]]\" ) ;\n\trecord
          = Substitute ( record ; $field_delimiter ; ¶ )\n] ;\n\trecord\n)"
        DisplayCalculation:
          Chunk:
          - |+
            /* record, formatted as a return-delimited value list. */

          - Let
          - " ( [\n\t"
          - |
            // Note: The "+1" in the "beginning calc" is to account for the default carriage return imposed by ExectueSQL.
          - "\tbeginning = "
          - If
          - " ( $previous_start > 0 ;\n\t\t"
          - Position
          - " ( $payload ; $record_delimiter ; $previous_start ; 1 )\n\t\t\t+ "
          - Length
          - " ( $record_delimiter ) + 1\n\t\t;\n\t\t"
          - Position
          - " ( $payload; \"<records>¶\"; 1; 1 ) + 10\n\t) ;\n\tend = "
          - Position
          - " ( $payload ; $record_delimiter ; 1 ; $i + 1 ) ;\n\t$previous_start =
            end ;\n\trecord = "
          - Middle
          - " ( $payload ; beginning ; end - beginning ) ;\n\t"
          - |
            // Encode CRLFs that might be found in Base64-encoded container data.
          - type: NoRef
            __content__: "\t"
          - |
            // This makes it easier to treat the fields as a return-delimited value list.
          - "\trecord = "
          - Substitute
          - ' ( record ; '
          - Char
          - ' ( 13 ) & '
          - Char
          - " ( 10 ) ; \"[[CRLF]]\" ) ;\n\t"
          - |
            // Encode any remaining newline characters.
          - "\trecord = "
          - Substitute
          - " ( record ; ¶ ; \"[[BR]]\" ) ;\n\trecord = "
          - Substitute
          - " ( record ; $field_delimiter ; ¶ )\n] ;\n\trecord\n)"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $record
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $table_name; Value:/* name of the table that is associated with this record. */

        GetValue ( $record ; 1 ) ]
      Value:
        Calculation: |-
          /* name of the table that is associated with this record. */

          GetValue ( $record ; 1 )
        DisplayCalculation:
          Chunk:
          - |+
            /* name of the table that is associated with this record. */

          - GetValue
          - ' ( $record ; 1 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $table_name
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $field_names; Value:/* names of the fields that are associated with this record. */

        Evaluate ( "$" & $table_name ) ]
      Value:
        Calculation: |-
          /* names of the fields that are associated with this record. */

          Evaluate ( "$" & $table_name )
        DisplayCalculation:
          Chunk:
          - |+
            /* names of the fields that are associated with this record. */

          - Evaluate
          - ' ( "$" & $table_name )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_names
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $ES_Record_UUID; Value:// Note: This is based in VERY
        large part on Kevin Frank's \"ValuePosition ( theList ; theValue )\" function.\n//
        See: http://filemakerhacks.com/2011/06/12/valueposition-the-function-filemaker-forgot/\n//
        Thanks Kevin!\n\nLet( [\n\ttheList = $field_names;\n\ttheValue = \"ES_Record_UUID\";\n\tpLp
        = ¶ & theList & ¶ ;\n\tpVp = ¶ & theValue & ¶ ;\n\tthePos = Position ( pLp
        ; pVp ; 1 ; 1 ) ;\n\ttheSegment = Left ( pLp ; thePos ) ;\n\ttheValPos = PatternCount
        ( theSegment ; ¶ )\n] ;\n\tGetValue ( $record ; theValPos )\n) ]"
      Value:
        Calculation: "// Note: This is based in VERY large part on Kevin Frank's \"ValuePosition
          ( theList ; theValue )\" function.\n// See: http://filemakerhacks.com/2011/06/12/valueposition-the-function-filemaker-forgot/\n//
          Thanks Kevin!\n\nLet( [\n\ttheList = $field_names;\n\ttheValue = \"ES_Record_UUID\";\n\tpLp
          = ¶ & theList & ¶ ;\n\tpVp = ¶ & theValue & ¶ ;\n\tthePos = Position ( pLp
          ; pVp ; 1 ; 1 ) ;\n\ttheSegment = Left ( pLp ; thePos ) ;\n\ttheValPos =
          PatternCount ( theSegment ; ¶ )\n] ;\n\tGetValue ( $record ; theValPos )\n)"
        DisplayCalculation:
          Chunk:
          - |
            // Note: This is based in VERY large part on Kevin Frank's "ValuePosition ( theList ; theValue )" function.
          - |
            // See: http://filemakerhacks.com/2011/06/12/valueposition-the-function-filemaker-forgot/
          - |
            // Thanks Kevin!
          - type: NoRef
            __content__: |2+

          - Let
          - "( [\n\ttheList = $field_names;\n\ttheValue = \"ES_Record_UUID\";\n\tpLp
            = ¶ & theList & ¶ ;\n\tpVp = ¶ & theValue & ¶ ;\n\tthePos = "
          - Position
          - " ( pLp ; pVp ; 1 ; 1 ) ;\n\ttheSegment = "
          - Left
          - " ( pLp ; thePos ) ;\n\ttheValPos = "
          - PatternCount
          - " ( theSegment ; ¶ )\n] ;\n\t"
          - GetValue
          - |2-
             ( $record ; theValPos )
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $ES_Record_UUID
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $ES_UTC_Time_Client; Value:Let( [\n\ttheList = $field_names;\n\ttheValue
        = \"ES_UTC_Time\";\n\tpLp = ¶ & theList & ¶ ;\n\tpVp = ¶ & theValue & ¶ ;\n\tthePos
        = Position ( pLp ; pVp ; 1 ; 1 ) ;\n\ttheSegment = Left ( pLp ; thePos ) ;\n\ttheValPos
        = PatternCount ( theSegment ; ¶ )\n] ;\n\tGetValue ( $record ; theValPos )\n)
        ]"
      Value:
        Calculation: "Let( [\n\ttheList = $field_names;\n\ttheValue = \"ES_UTC_Time\";\n\tpLp
          = ¶ & theList & ¶ ;\n\tpVp = ¶ & theValue & ¶ ;\n\tthePos = Position ( pLp
          ; pVp ; 1 ; 1 ) ;\n\ttheSegment = Left ( pLp ; thePos ) ;\n\ttheValPos =
          PatternCount ( theSegment ; ¶ )\n] ;\n\tGetValue ( $record ; theValPos )\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - "( [\n\ttheList = $field_names;\n\ttheValue = \"ES_UTC_Time\";\n\tpLp
            = ¶ & theList & ¶ ;\n\tpVp = ¶ & theValue & ¶ ;\n\tthePos = "
          - Position
          - " ( pLp ; pVp ; 1 ; 1 ) ;\n\ttheSegment = "
          - Left
          - " ( pLp ; thePos ) ;\n\ttheValPos = "
          - PatternCount
          - " ( theSegment ; ¶ )\n] ;\n\t"
          - GetValue
          - |2-
             ( $record ; theValPos )
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $ES_UTC_Time_Client
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#========================================'
      Text: ========================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section.subtract.start[2]; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '2'
        DisplayCalculation:
          Chunk: '2'
      Name: $~script.section.subtract.start
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section.runtime[3]; Value:( Get ( CurrentTimeUTCMilliseconds
        ) - $~script.section.start[3] ) / 1000 ]
      Value:
        Calculation: ( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.start[3]
          ) / 1000
        DisplayCalculation:
          Chunk:
          - '( '
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $~script.section.start[3] ) / 1000'
      Repetition:
        Calculation: '3'
        DisplayCalculation:
          Chunk: '3'
      Name: $~script.section.runtime
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 5 ;\n\t~message = $~script.section[3] & \" end, runtime:
        \" & $~script.section.runtime[3]\n] ;\n\t\"$LogLevel = \" & ~logLevel & \"
        ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n\t\n\t& \"$~script.section = \" & Quote ( $~script.section
        ) & \" ;¶\"\n\t& \"$~script.section[2] = \" & Quote ( $~script.section[2]
        ) & \" ;¶\"\n\t& \"$~script.section[3] = \" & Quote ( $~script.section[3]
        ) & \" ;¶\"\n\t& \"$~script.section.runtime[3] = \" & $~script.section.runtime[3]
        & \" ;¶\"\n\t\n\t& \"$i = \" & $i & \" ;¶\"\n\t& \"$ES_Record_UUID = \" &
        Quote ( $ES_Record_UUID ) & \" ;¶\"\n\t& \"$ES_UTC_Time_Client = \" & Quote
        ( $ES_UTC_Time_Client ) & \" ;¶\"\n\t& \"$table_name = \" & Quote ( $table_name
        ) & \" ;¶\"\n\t& \"$field_names = \" & Quote ( $field_names ) & \" ;¶\"\n\t&
        \"$record = \" & Quote ( $record ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 5 ;\n\t~message = $~script.section[3] &
        \" end, runtime: \" & $~script.section.runtime[3]\n] ;\n\t\"$LogLevel = \"
        & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n\t\n\t& \"$~script.section = \" & Quote ( $~script.section
        ) & \" ;¶\"\n\t& \"$~script.section[2] = \" & Quote ( $~script.section[2]
        ) & \" ;¶\"\n\t& \"$~script.section[3] = \" & Quote ( $~script.section[3]
        ) & \" ;¶\"\n\t& \"$~script.section.runtime[3] = \" & $~script.section.runtime[3]
        & \" ;¶\"\n\t\n\t& \"$i = \" & $i & \" ;¶\"\n\t& \"$ES_Record_UUID = \" &
        Quote ( $ES_Record_UUID ) & \" ;¶\"\n\t& \"$ES_UTC_Time_Client = \" & Quote
        ( $ES_UTC_Time_Client ) & \" ;¶\"\n\t& \"$table_name = \" & Quote ( $table_name
        ) & \" ;¶\"\n\t& \"$field_names = \" & Quote ( $field_names ) & \" ;¶\"\n\t&
        \"$record = \" & Quote ( $record ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 5 ;\n\t~message = $~script.section[3] & \" end, runtime:
          \" & $~script.section.runtime[3]\n] ;\n\t\"$LogLevel = \" & ~logLevel &
          \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\t\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t& \"$~script.section[2] = \" & "
        - Quote
        - " ( $~script.section[2] ) & \" ;¶\"\n\t& \"$~script.section[3] = \" & "
        - Quote
        - " ( $~script.section[3] ) & \" ;¶\"\n\t& \"$~script.section.runtime[3] =
          \" & $~script.section.runtime[3] & \" ;¶\"\n\t\n\t& \"$i = \" & $i & \"
          ;¶\"\n\t& \"$ES_Record_UUID = \" & "
        - Quote
        - " ( $ES_Record_UUID ) & \" ;¶\"\n\t& \"$ES_UTC_Time_Client = \" & "
        - Quote
        - " ( $ES_UTC_Time_Client ) & \" ;¶\"\n\t& \"$table_name = \" & "
        - Quote
        - " ( $table_name ) & \" ;¶\"\n\t& \"$field_names = \" & "
        - Quote
        - " ( $field_names ) & \" ;¶\"\n\t& \"$record = \" & "
        - Quote
        - |2-
           ( $record ) & " ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $~script.section.subtract.runtime[2]; Value:$~script.section.subtract.runtime[2]
        +
        ( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.subtract.start[2] ) / 1000 ]
      Value:
        Calculation: |-
          $~script.section.subtract.runtime[2]
          +
          ( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.subtract.start[2] ) / 1000
        DisplayCalculation:
          Chunk:
          - "$~script.section.subtract.runtime[2]\n+\n( "
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $~script.section.subtract.start[2] ) / 1000'
      Repetition:
        Calculation: '2'
        DisplayCalculation:
          Chunk: '2'
      Name: $~script.section.subtract.runtime
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#========================================'
      Text: ========================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Go to the correct row in the Payload Details portal.'
      Text: Go to the correct row in the Payload Details portal.
    - enable: 'True'
      id: '99'
      name: Go to Portal Row
      StepText: |-
        Go to Portal Row [ $i ]
        [ Select; No dialog ]
      NoInteract:
        state: 'True'
      SelectAll:
        state: 'True'
      RowPageLocation:
        value: ByCalculation
      Calculation: $i
      DisplayCalculation:
        Chunk: $i
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Set the Record UUID for the Payload Details record.'
      Text: Set the Record UUID for the Payload Details record.
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ "EasySync_Payload_Details::ES_Child_Record_UUID";
        $ES_Record_UUID ]
      Result:
        Calculation: $ES_Record_UUID
        DisplayCalculation:
          Chunk: $ES_Record_UUID
      TargetName:
        Calculation: '"EasySync_Payload_Details::ES_Child_Record_UUID"'
        DisplayCalculation:
          Chunk: '"EasySync_Payload_Details::ES_Child_Record_UUID"'
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ "EasySync_Payload_Details::Payload_Type"; "Payload
        Detail" ]
      Result:
        Calculation: '"Payload Detail"'
        DisplayCalculation:
          Chunk: '"Payload Detail"'
      TargetName:
        Calculation: '"EasySync_Payload_Details::Payload_Type"'
        DisplayCalculation:
          Chunk: '"EasySync_Payload_Details::Payload_Type"'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Assume that we are going to update the record.'
      Text: Assume that we are going to update the record.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $update_record; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $update_record
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If we are handling conflicts using any means other than "Client"...'
      Text: If we are handling conflicts using any means other than "Client"...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$conflict_handling ≠ "Client" ]
      Calculation: $$conflict_handling ≠ "Client"
      DisplayCalculation:
        Chunk: $$conflict_handling ≠ "Client"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Need to check to see if there is a confict.'
      Text: Need to check to see if there is a confict.
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If there is one, determine how to handle it.'
      Text: If there is one, determine how to handle it.
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the host''s ES_UTC_Time for the record.'
      Text: Get the host's ES_UTC_Time for the record.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $ES_UTC_Time_Host; Value:Evaluate ( $table_name & "::ES_UTC_Time"
        ) ]
      Value:
        Calculation: Evaluate ( $table_name & "::ES_UTC_Time" )
        DisplayCalculation:
          Chunk:
          - Evaluate
          - ' ( $table_name & "::ES_UTC_Time" )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $ES_UTC_Time_Host
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = List (\n\t\t\"UTC Time Client: \"
        & $ES_UTC_Time_Client ;\n\t\t\"UTC Time Host: \" & $ES_UTC_Time_Host\n\t)\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = List (\n\t\t\"UTC Time
        Client: \" & $ES_UTC_Time_Client ;\n\t\t\"UTC Time Host: \" & $ES_UTC_Time_Host\n\t)\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = "
        - List
        - " (\n\t\t\"UTC Time Client: \" & $ES_UTC_Time_Client ;\n\t\t\"UTC Time Host:
          \" & $ES_UTC_Time_Host\n\t)\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
          \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If the record has been updated since the last time the user pulled
        data...'
      Text: If the record has been updated since the last time the user pulled data...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $ES_UTC_Time_Host > $last_pull_utc ]
      Calculation: $ES_UTC_Time_Host > $last_pull_utc
      DisplayCalculation:
        Chunk: $ES_UTC_Time_Host > $last_pull_utc
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$conflict_handling = "Server" ]
      Calculation: $$conflict_handling = "Server"
      DisplayCalculation:
        Chunk: $$conflict_handling = "Server"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Server wins.'
      Text: Server wins.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $update_record; Value:0 ]
      Value:
        Calculation: '0'
        DisplayCalculation:
          Chunk: '0'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $update_record
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ ( $$conflict_handling = "Recent" ) and ( $ES_UTC_Time_Host
        > $ES_UTC_Time_Client ) ]
      Calculation: ( $$conflict_handling = "Recent" ) and ( $ES_UTC_Time_Host > $ES_UTC_Time_Client
        )
      DisplayCalculation:
        Chunk:
        - '( $$conflict_handling = "Recent" ) '
        - and
        - ' ( $ES_UTC_Time_Host > $ES_UTC_Time_Client )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Server wins if its update was the most recent.'
      Text: Server wins if its update was the most recent.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $update_record; Value:0 ]
      Value:
        Calculation: '0'
        DisplayCalculation:
          Chunk: '0'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $update_record
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If we are to update the record...'
      Text: If we are to update the record...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $update_record ]
      Calculation: $update_record
      DisplayCalculation:
        Chunk: $update_record
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Loop over the field names.'
      Text: Loop over the field names.
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#We skip the first value because it is really the table name that
        the record is from.'
      Text: We skip the first value because it is really the table name that the record
        is from.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $f; Value:2 ]
      Value:
        Calculation: '2'
        DisplayCalculation:
          Chunk: '2'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $f
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the name of the field.'
      Text: Get the name of the field.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $field_name; Value:GetValue ( $field_names; $f ) ]
      Value:
        Calculation: GetValue ( $field_names; $f )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( $field_names; $f )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_name
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: 'Set Variable [ $~script.section[3]; Value:"PROCESS PAYLOAD: EXTRACT
        FIELD VALUE" ]'
      Value:
        Calculation: '"PROCESS PAYLOAD: EXTRACT FIELD VALUE"'
        DisplayCalculation:
          Chunk: '"PROCESS PAYLOAD: EXTRACT FIELD VALUE"'
      Repetition:
        Calculation: '3'
        DisplayCalculation:
          Chunk: '3'
      Name: $~script.section
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section.start[3]; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '3'
        DisplayCalculation:
          Chunk: '3'
      Name: $~script.section.start
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Left ( $field_name ; 4 ) ≠ "B64_" ]
      Calculation: Left ( $field_name ; 4 ) ≠ "B64_"
      DisplayCalculation:
        Chunk:
        - Left
        - ' ( $field_name ; 4 ) ≠ "B64_"'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#not a container field'
      Text: not a container field
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#QUESTION: why not just get the ES_Device_ID value from the record
        data? (which is there; I checked)'
      Text: 'QUESTION: why not just get the ES_Device_ID value from the record data?
        (which is there; I checked)'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $field_value; Value:Let ( [\n\tvalue = If ( $field_name
        = \"ES_Device_ID\";\n\t\t$client_persistent_id ;\n\t\tGetValue ( $record ;
        $f )\n\t) ;\n\tvalue = Substitute ( value ; \"[[BR]]\" ; ¶ )\n] ;\n\tvalue\n)
        ]"
      Value:
        Calculation: "Let ( [\n\tvalue = If ( $field_name = \"ES_Device_ID\";\n\t\t$client_persistent_id
          ;\n\t\tGetValue ( $record ; $f )\n\t) ;\n\tvalue = Substitute ( value ;
          \"[[BR]]\" ; ¶ )\n] ;\n\tvalue\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( [\n\tvalue = "
          - If
          - " ( $field_name = \"ES_Device_ID\";\n\t\t$client_persistent_id ;\n\t\t"
          - GetValue
          - " ( $record ; $f )\n\t) ;\n\tvalue = "
          - Substitute
          - " ( value ; \"[[BR]]\" ; ¶ )\n] ;\n\tvalue\n)"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_value
    - enable: 'True'
      id: '69'
      name: Else
      StepText: Else
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $field_name; Value:Right ( $field_name; Length ( $field_name
        ) - 4 ) ]
      Value:
        Calculation: Right ( $field_name; Length ( $field_name ) - 4 )
        DisplayCalculation:
          Chunk:
          - Right
          - ' ( $field_name; '
          - Length
          - ' ( $field_name ) - 4 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_name
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $field_value; Value:GetValue ( $record ; $f ) ]
      Value:
        Calculation: GetValue ( $record ; $f )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( $record ; $f )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_value
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ not IsEmpty ( $field_value ) ]
      Calculation: not IsEmpty ( $field_value )
      DisplayCalculation:
        Chunk:
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( $field_value )'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $field_value; Value:Let (
        [
        value = $field_value;
        value = Substitute ( value ; "</b64>"; "" );
        fileNameWithExtension = GetValue ( Substitute ( value ; "<b64>"; "¶" ); 1 );
        encoded = Substitute ( value; fileNameWithExtension & "<b64>"; "" );
        encoded = Substitute ( encoded ; "[[CRLF]]" ; Char ( 13 ) & Char ( 10 ) );
        decoded = Base64Decode ( encoded; fileNameWithExtension )
        ];
        decoded
        ) ]
      Value:
        Calculation: |-
          Let (
          [
          value = $field_value;
          value = Substitute ( value ; "</b64>"; "" );
          fileNameWithExtension = GetValue ( Substitute ( value ; "<b64>"; "¶" ); 1 );
          encoded = Substitute ( value; fileNameWithExtension & "<b64>"; "" );
          encoded = Substitute ( encoded ; "[[CRLF]]" ; Char ( 13 ) & Char ( 10 ) );
          decoded = Base64Decode ( encoded; fileNameWithExtension )
          ];
          decoded
          )
        DisplayCalculation:
          Chunk:
          - Let
          - " (\n[\nvalue = $field_value;\nvalue = "
          - Substitute
          - " ( value ; \"</b64>\"; \"\" );\nfileNameWithExtension = "
          - GetValue
          - ' ( '
          - Substitute
          - " ( value ; \"<b64>\"; \"¶\" ); 1 );\nencoded = "
          - Substitute
          - " ( value; fileNameWithExtension & \"<b64>\"; \"\" );\nencoded = "
          - Substitute
          - ' ( encoded ; "[[CRLF]]" ; '
          - Char
          - ' ( 13 ) & '
          - Char
          - " ( 10 ) );\ndecoded = "
          - Base64Decode
          - |2-
             ( encoded; fileNameWithExtension )
            ];
            decoded
            )
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_value
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#========================================'
      Text: ========================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section.subtract.start[2]; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '2'
        DisplayCalculation:
          Chunk: '2'
      Name: $~script.section.subtract.start
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section.runtime[3]; Value:( Get ( CurrentTimeUTCMilliseconds
        ) - $~script.section.start[3] ) / 1000 ]
      Value:
        Calculation: ( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.start[3]
          ) / 1000
        DisplayCalculation:
          Chunk:
          - '( '
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $~script.section.start[3] ) / 1000'
      Repetition:
        Calculation: '3'
        DisplayCalculation:
          Chunk: '3'
      Name: $~script.section.runtime
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 5 ;\n\t~message = $~script.section[3] & \" end, runtime:
        \" & $~script.section.runtime[3]\n] ;\n\t\"$LogLevel = \" & ~logLevel & \"
        ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n\t\n\t& \"$~script.section = \" & Quote ( $~script.section
        ) & \" ;¶\"\n\t& \"$~script.section[2] = \" & Quote ( $~script.section[2]
        ) & \" ;¶\"\n\t& \"$~script.section[3] = \" & Quote ( $~script.section[3]
        ) & \" ;¶\"\n\t& \"$~script.section.runtime[3] = \" & $~script.section.runtime[3]
        & \" ;¶\"\n\t\n\t& \"$i = \" & $i & \" ;¶\"\n\t& \"$f = \" & $f & \" ;¶\"\n\t&
        \"$table_name = \" & Quote ( $table_name ) & \" ;¶\"\n\t& \"$field_name =
        \" & Quote ( $field_name ) & \" ;¶\"\n\t& \"$field_value = \" & Quote ( $field_value
        ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 5 ;\n\t~message = $~script.section[3] &
        \" end, runtime: \" & $~script.section.runtime[3]\n] ;\n\t\"$LogLevel = \"
        & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n\t\n\t& \"$~script.section = \" & Quote ( $~script.section
        ) & \" ;¶\"\n\t& \"$~script.section[2] = \" & Quote ( $~script.section[2]
        ) & \" ;¶\"\n\t& \"$~script.section[3] = \" & Quote ( $~script.section[3]
        ) & \" ;¶\"\n\t& \"$~script.section.runtime[3] = \" & $~script.section.runtime[3]
        & \" ;¶\"\n\t\n\t& \"$i = \" & $i & \" ;¶\"\n\t& \"$f = \" & $f & \" ;¶\"\n\t&
        \"$table_name = \" & Quote ( $table_name ) & \" ;¶\"\n\t& \"$field_name =
        \" & Quote ( $field_name ) & \" ;¶\"\n\t& \"$field_value = \" & Quote ( $field_value
        ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 5 ;\n\t~message = $~script.section[3] & \" end, runtime:
          \" & $~script.section.runtime[3]\n] ;\n\t\"$LogLevel = \" & ~logLevel &
          \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\t\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t& \"$~script.section[2] = \" & "
        - Quote
        - " ( $~script.section[2] ) & \" ;¶\"\n\t& \"$~script.section[3] = \" & "
        - Quote
        - " ( $~script.section[3] ) & \" ;¶\"\n\t& \"$~script.section.runtime[3] =
          \" & $~script.section.runtime[3] & \" ;¶\"\n\t\n\t& \"$i = \" & $i & \"
          ;¶\"\n\t& \"$f = \" & $f & \" ;¶\"\n\t& \"$table_name = \" & "
        - Quote
        - " ( $table_name ) & \" ;¶\"\n\t& \"$field_name = \" & "
        - Quote
        - " ( $field_name ) & \" ;¶\"\n\t& \"$field_value = \" & "
        - Quote
        - |2-
           ( $field_value ) & " ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $~script.section.subtract.runtime[2]; Value:$~script.section.subtract.runtime[2]
        +
        ( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.subtract.start[2] ) / 1000 ]
      Value:
        Calculation: |-
          $~script.section.subtract.runtime[2]
          +
          ( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.subtract.start[2] ) / 1000
        DisplayCalculation:
          Chunk:
          - "$~script.section.subtract.runtime[2]\n+\n( "
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $~script.section.subtract.start[2] ) / 1000'
      Repetition:
        Calculation: '2'
        DisplayCalculation:
          Chunk: '2'
      Name: $~script.section.subtract.runtime
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#========================================'
      Text: ========================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: 'Set Variable [ $~script.section[3]; Value:"PROCESS PAYLOAD: SET FIELD"
        ]'
      Value:
        Calculation: '"PROCESS PAYLOAD: SET FIELD"'
        DisplayCalculation:
          Chunk: '"PROCESS PAYLOAD: SET FIELD"'
      Repetition:
        Calculation: '3'
        DisplayCalculation:
          Chunk: '3'
      Name: $~script.section
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section.start[3]; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '3'
        DisplayCalculation:
          Chunk: '3'
      Name: $~script.section.start
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $field_changed; Value:not Exact ( $field_value ; Evaluate
        ( $table_name & "::" & $field_name ) ) ]
      Value:
        Calculation: not Exact ( $field_value ; Evaluate ( $table_name & "::" & $field_name
          ) )
        DisplayCalculation:
          Chunk:
          - not
          - type: NoRef
            __content__: ' '
          - Exact
          - ' ( $field_value ; '
          - Evaluate
          - ' ( $table_name & "::" & $field_name ) )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $field_changed
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $field_changed ]
      Calculation: $field_changed
      DisplayCalculation:
        Chunk: $field_changed
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Update the field.'
      Text: Update the field.
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#make several attempts to set the field if the record is locked'
      Text: make several attempts to set the field if the record is locked
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i[3]; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '3'
        DisplayCalculation:
          Chunk: '3'
      Name: $i
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ $table_name & "::" & $field_name; $field_value
        ]
      Result:
        Calculation: $field_value
        DisplayCalculation:
          Chunk: $field_value
      TargetName:
        Calculation: $table_name & "::" & $field_name
        DisplayCalculation:
          Chunk: $table_name & "::" & $field_name
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ Get ( LastError ) = 0 ]
      Calculation: Get ( LastError ) = 0
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - LastError
        - ' ) = 0'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ If ( Get ( LastError ) ≠ 301 /* Record is in use by
        another user */ ;\n\tLet ( [\n\t\ttheErrorCode = Get ( LastError ) ;\n\t\ttheErrorDescription
        = \"(see FileMaker documentation for the description of this error code)\"
        ;\n\t\ttheErrorInfo = \"\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error
        = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode
        = \" & theErrorCode & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\n\t\t& \"$table_name = \" &
        Quote ( $table_name ) & \" ;¶\"\n\t\t& \"$field_name = \" & Quote ( $field_name
        ) & \" ;¶\"\n\t\t& \"$field_value = \" & Quote ( $field_value ) & \" ;¶\"\n\t]
        ;\n\t\tTrue\n\t)\n) ]"
      Calculation: "If ( Get ( LastError ) ≠ 301 /* Record is in use by another user
        */ ;\n\tLet ( [\n\t\ttheErrorCode = Get ( LastError ) ;\n\t\ttheErrorDescription
        = \"(see FileMaker documentation for the description of this error code)\"
        ;\n\t\ttheErrorInfo = \"\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error
        = \"$errorType = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode
        = \" & theErrorCode & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription
        ) & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\n\t\t& \"$table_name = \" &
        Quote ( $table_name ) & \" ;¶\"\n\t\t& \"$field_name = \" & Quote ( $field_name
        ) & \" ;¶\"\n\t\t& \"$field_value = \" & Quote ( $field_value ) & \" ;¶\"\n\t]
        ;\n\t\tTrue\n\t)\n)"
      DisplayCalculation:
        Chunk:
        - If
        - ' ( '
        - Get
        - ' ( '
        - LastError
        - " ) ≠ 301 /* Record is in use by another user */ ;\n\t"
        - Let
        - " ( [\n\t\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for the
          description of this error code)\" ;\n\t\ttheErrorInfo = \"\" ;\n\t\ttheErrorType
          = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\n\t\t& \"$table_name = \" & "
        - Quote
        - " ( $table_name ) & \" ;¶\"\n\t\t& \"$field_name = \" & "
        - Quote
        - " ( $field_name ) & \" ;¶\"\n\t\t& \"$field_value = \" & "
        - Quote
        - " ( $field_value ) & \" ;¶\"\n\t] ;\n\t\t"
        - 'True'
        - "\n\t)\n)"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ // For $i[3] from 1 to $$record_lock_max_attempts\nLet
        (\n\t$i[3] = $i[3] + 1 ;\n\tIf ( $i[3] > $$record_lock_max_attempts ;\n\t\tLet
        ( $i[3] = \"\" ; True )\n\t)\n) ]"
      Calculation: "// For $i[3] from 1 to $$record_lock_max_attempts\nLet (\n\t$i[3]
        = $i[3] + 1 ;\n\tIf ( $i[3] > $$record_lock_max_attempts ;\n\t\tLet ( $i[3]
        = \"\" ; True )\n\t)\n)"
      DisplayCalculation:
        Chunk:
        - |
          // For $i[3] from 1 to $$record_lock_max_attempts
        - Let
        - " (\n\t$i[3] = $i[3] + 1 ;\n\t"
        - If
        - " ( $i[3] > $$record_lock_max_attempts ;\n\t\t"
        - Let
        - ' ( $i[3] = "" ; '
        - 'True'
        - " )\n\t)\n)"
    - enable: 'True'
      id: '62'
      name: Pause/Resume Script
      StepText: 'Pause/Resume Script [ Duration (seconds): $$record_lock_attempt_pause
        ]'
      PauseTime:
        value: ForDuration
      Calculation: $$record_lock_attempt_pause
      DisplayCalculation:
        Chunk: $$record_lock_attempt_pause
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i[3]; Value:"" ]
      Value:
        Calculation: '""'
        DisplayCalculation:
          Chunk: '""'
      Repetition:
        Calculation: '3'
        DisplayCalculation:
          Chunk: '3'
      Name: $i
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: |-
        Exit Loop If [ /**
         * there is an error in the above loop
         * The above loop must save the data to $error
         * NOTE: this will only work if there are only control steps between when the error occurred and the exit loop step
         */

        Get ( LastError ) ]
      Calculation: |-
        /**
         * there is an error in the above loop
         * The above loop must save the data to $error
         * NOTE: this will only work if there are only control steps between when the error occurred and the exit loop step
         */

        Get ( LastError )
      DisplayCalculation:
        Chunk:
        - |+
          /**
           * there is an error in the above loop
           * The above loop must save the data to $error
           * NOTE: this will only work if there are only control steps between when the error occurred and the exit loop step
           */

        - Get
        - ' ( '
        - LastError
        - ' )'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#========================================'
      Text: ========================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 5
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section.subtract.start[2]; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '2'
        DisplayCalculation:
          Chunk: '2'
      Name: $~script.section.subtract.start
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section.runtime[3]; Value:( Get ( CurrentTimeUTCMilliseconds
        ) - $~script.section.start[3] ) / 1000 ]
      Value:
        Calculation: ( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.start[3]
          ) / 1000
        DisplayCalculation:
          Chunk:
          - '( '
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $~script.section.start[3] ) / 1000'
      Repetition:
        Calculation: '3'
        DisplayCalculation:
          Chunk: '3'
      Name: $~script.section.runtime
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 5 ;\n\t~message = $~script.section[3] & \" end, runtime:
        \" & $~script.section.runtime[3] & If ( $field_changed ; \", field changed\"
        )\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" &
        Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\t\n\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\t& \"$~script.section[2] = \"
        & Quote ( $~script.section[2] ) & \" ;¶\"\n\t& \"$~script.section[3] = \"
        & Quote ( $~script.section[3] ) & \" ;¶\"\n\t& \"$~script.section.runtime[3]
        = \" & $~script.section.runtime[3] & \" ;¶\"\n\t\n\t& \"$i = \" & $i & \"
        ;¶\"\n\t& \"$f = \" & $f & \" ;¶\"\n\t& \"$table_name = \" & Quote ( $table_name
        ) & \" ;¶\"\n\t& \"$field_name = \" & Quote ( $field_name ) & \" ;¶\"\n\t&
        \"$field_changed = \" & Quote ( $field_changed ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 5 ;\n\t~message = $~script.section[3] &
        \" end, runtime: \" & $~script.section.runtime[3] & If ( $field_changed ;
        \", field changed\" )\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
        \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \"
        & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote
        ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp (
        \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 )
        ) & \" ) ;¶\"\n\t\n\t& \"$~script.section = \" & Quote ( $~script.section
        ) & \" ;¶\"\n\t& \"$~script.section[2] = \" & Quote ( $~script.section[2]
        ) & \" ;¶\"\n\t& \"$~script.section[3] = \" & Quote ( $~script.section[3]
        ) & \" ;¶\"\n\t& \"$~script.section.runtime[3] = \" & $~script.section.runtime[3]
        & \" ;¶\"\n\t\n\t& \"$i = \" & $i & \" ;¶\"\n\t& \"$f = \" & $f & \" ;¶\"\n\t&
        \"$table_name = \" & Quote ( $table_name ) & \" ;¶\"\n\t& \"$field_name =
        \" & Quote ( $field_name ) & \" ;¶\"\n\t& \"$field_changed = \" & Quote (
        $field_changed ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 5 ;\n\t~message = $~script.section[3] & \" end, runtime:
          \" & $~script.section.runtime[3] & "
        - If
        - " ( $field_changed ; \", field changed\" )\n] ;\n\t\"$LogLevel = \" & ~logLevel
          & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\t\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t& \"$~script.section[2] = \" & "
        - Quote
        - " ( $~script.section[2] ) & \" ;¶\"\n\t& \"$~script.section[3] = \" & "
        - Quote
        - " ( $~script.section[3] ) & \" ;¶\"\n\t& \"$~script.section.runtime[3] =
          \" & $~script.section.runtime[3] & \" ;¶\"\n\t\n\t& \"$i = \" & $i & \"
          ;¶\"\n\t& \"$f = \" & $f & \" ;¶\"\n\t& \"$table_name = \" & "
        - Quote
        - " ( $table_name ) & \" ;¶\"\n\t& \"$field_name = \" & "
        - Quote
        - " ( $field_name ) & \" ;¶\"\n\t& \"$field_changed = \" & "
        - Quote
        - |2-
           ( $field_changed ) & " ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $~script.section.subtract.runtime[2]; Value:$~script.section.subtract.runtime[2]
        +
        ( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.subtract.start[2] ) / 1000 ]
      Value:
        Calculation: |-
          $~script.section.subtract.runtime[2]
          +
          ( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.subtract.start[2] ) / 1000
        DisplayCalculation:
          Chunk:
          - "$~script.section.subtract.runtime[2]\n+\n( "
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $~script.section.subtract.start[2] ) / 1000'
      Repetition:
        Calculation: '2'
        DisplayCalculation:
          Chunk: '2'
      Name: $~script.section.subtract.runtime
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#========================================'
      Text: ========================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $f; Value:$f + 1 ]
      Value:
        Calculation: $f + 1
        DisplayCalculation:
          Chunk: $f + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $f
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $f > ValueCount ( $field_names ) ]
      Calculation: $f > ValueCount ( $field_names )
      DisplayCalculation:
        Chunk:
        - '$f > '
        - ValueCount
        - ' ( $field_names )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#End loop that sets the fields.'
      Text: End loop that sets the fields.
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /**\n * An error occurred in the above loop\n *\n
        * assign error info to local variables\n * then evaluate the errorCode as
        a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t&
        \"! = \\\"\\\" ] ; $errorCode )\"\n) ) ]"
      Calculation: "/**\n * An error occurred in the above loop\n *\n * assign error
        info to local variables\n * then evaluate the errorCode as a Boolean\n * \n
        */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\"
        ] ; $errorCode )\"\n) )"
      DisplayCalculation:
        Chunk:
        - "/**\n * An error occurred in the above loop\n *\n * assign error info to
          local variables\n * then evaluate the errorCode as a Boolean\n * \n */\n\n"
        - GetAsBoolean
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n)
          )"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#End "If we are to update the record."'
      Text: End "If we are to update the record."
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#========================================'
      Text: ========================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#end sub-section: "PROCESS SINGLE RECORD"'
      Text: 'end sub-section: "PROCESS SINGLE RECORD"'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section.subtract.start; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section.subtract.start
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $~script.section.runtime[2]; Value:( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.start[2] ) / 1000
        -
        $~script.section.subtract.runtime[2] ]
      Value:
        Calculation: |-
          ( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.start[2] ) / 1000
          -
          $~script.section.subtract.runtime[2]
        DisplayCalculation:
          Chunk:
          - '( '
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - |2-
             ) - $~script.section.start[2] ) / 1000
            -
            $~script.section.subtract.runtime[2]
      Repetition:
        Calculation: '2'
        DisplayCalculation:
          Chunk: '2'
      Name: $~script.section.runtime
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = $~script.section[2] & \" end, runtime:
        \" & $~script.section.runtime[2] & \", i: \" & $i & If ( not $update_record
        ; \", DON'T UPDATE\" )\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
        \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \"
        & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote
        ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp (
        \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 )
        ) & \" ) ;¶\"\n\t\n\t& \"$~script.section = \" & Quote ( $~script.section
        ) & \" ;¶\"\n\t& \"$~script.section[2] = \" & Quote ( $~script.section[2]
        ) & \" ;¶\"\n\t& \"$~script.section.runtime[2] = \" & $~script.section.runtime[2]
        & \" ;¶\"\n\t& \"$~script.section.subtract.runtime[2] = \" & Quote ( $~script.section.subtract.runtime[2]
        ) & \" ;¶\"\n\t\n\t& \"$i = \" & $i & \" ;¶\"\n\t& \"$update_record = \" &
        GetAsBoolean ( $update_record ) & \" ;¶\"\n\t& \"$table_name = \" & Quote
        ( $table_name ) & \" ;¶\"\n\t& \"$field_names = \" & Quote ( $field_names
        ) & \" ;¶\"\n\t& \"$ES_Record_UUID = \" & Quote ( $ES_Record_UUID ) & \" ;¶\"\n\t&
        \"$record = \" & Quote ( $record ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = $~script.section[2] &
        \" end, runtime: \" & $~script.section.runtime[2] & \", i: \" & $i & If (
        not $update_record ; \", DON'T UPDATE\" )\n] ;\n\t\"$LogLevel = \" & ~logLevel
        & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n\t\n\t& \"$~script.section = \" & Quote ( $~script.section
        ) & \" ;¶\"\n\t& \"$~script.section[2] = \" & Quote ( $~script.section[2]
        ) & \" ;¶\"\n\t& \"$~script.section.runtime[2] = \" & $~script.section.runtime[2]
        & \" ;¶\"\n\t& \"$~script.section.subtract.runtime[2] = \" & Quote ( $~script.section.subtract.runtime[2]
        ) & \" ;¶\"\n\t\n\t& \"$i = \" & $i & \" ;¶\"\n\t& \"$update_record = \" &
        GetAsBoolean ( $update_record ) & \" ;¶\"\n\t& \"$table_name = \" & Quote
        ( $table_name ) & \" ;¶\"\n\t& \"$field_names = \" & Quote ( $field_names
        ) & \" ;¶\"\n\t& \"$ES_Record_UUID = \" & Quote ( $ES_Record_UUID ) & \" ;¶\"\n\t&
        \"$record = \" & Quote ( $record ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = $~script.section[2] & \" end, runtime:
          \" & $~script.section.runtime[2] & \", i: \" & $i & "
        - If
        - ' ( '
        - not
        - " $update_record ; \", DON'T UPDATE\" )\n] ;\n\t\"$LogLevel = \" & ~logLevel
          & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\t\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t& \"$~script.section[2] = \" & "
        - Quote
        - " ( $~script.section[2] ) & \" ;¶\"\n\t& \"$~script.section.runtime[2] =
          \" & $~script.section.runtime[2] & \" ;¶\"\n\t& \"$~script.section.subtract.runtime[2]
          = \" & "
        - Quote
        - " ( $~script.section.subtract.runtime[2] ) & \" ;¶\"\n\t\n\t& \"$i = \"
          & $i & \" ;¶\"\n\t& \"$update_record = \" & "
        - GetAsBoolean
        - " ( $update_record ) & \" ;¶\"\n\t& \"$table_name = \" & "
        - Quote
        - " ( $table_name ) & \" ;¶\"\n\t& \"$field_names = \" & "
        - Quote
        - " ( $field_names ) & \" ;¶\"\n\t& \"$ES_Record_UUID = \" & "
        - Quote
        - " ( $ES_Record_UUID ) & \" ;¶\"\n\t& \"$record = \" & "
        - Quote
        - |2-
           ( $record ) & " ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $~script.section.subtract.runtime; Value:$~script.section.subtract.runtime[1]
        +
        $~script.section.subtract.runtime[2]
        +
        ( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.subtract.start[1] ) / 1000 ]
      Value:
        Calculation: |-
          $~script.section.subtract.runtime[1]
          +
          $~script.section.subtract.runtime[2]
          +
          ( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.subtract.start[1] ) / 1000
        DisplayCalculation:
          Chunk:
          - "$~script.section.subtract.runtime[1]\n+\n$~script.section.subtract.runtime[2]\n+\n( "
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $~script.section.subtract.start[1] ) / 1000'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section.subtract.runtime
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#========================================'
      Text: ========================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $i; Value:$i + 1 ]
      Value:
        Calculation: $i + 1
        DisplayCalculation:
          Chunk: $i + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $i
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $i > ( PatternCount ( $payload; $record_delimiter )
        - 1 ) ]
      Calculation: $i > ( PatternCount ( $payload; $record_delimiter ) - 1 )
      DisplayCalculation:
        Chunk:
        - '$i > ( '
        - PatternCount
        - ' ( $payload; $record_delimiter ) - 1 )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#End loop over the records.'
      Text: End loop over the records.
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /**\n * An error occurred in the above loop\n *\n
        * assign error info to local variables\n * then evaluate the errorCode as
        a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t&
        \"! = \\\"\\\" ] ; $errorCode )\"\n) ) ]"
      Calculation: "/**\n * An error occurred in the above loop\n *\n * assign error
        info to local variables\n * then evaluate the errorCode as a Boolean\n * \n
        */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\"
        ] ; $errorCode )\"\n) )"
      DisplayCalculation:
        Chunk:
        - "/**\n * An error occurred in the above loop\n *\n * assign error info to
          local variables\n * then evaluate the errorCode as a Boolean\n * \n */\n\n"
        - GetAsBoolean
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n)
          )"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section[2]; Value:"COMMIT RECORD" ]
      Value:
        Calculation: '"COMMIT RECORD"'
        DisplayCalculation:
          Chunk: '"COMMIT RECORD"'
      Repetition:
        Calculation: '2'
        DisplayCalculation:
          Chunk: '2'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '75'
      name: Commit Records/Requests
      StepText: |-
        Commit Records/Requests
        [ No dialog ]
      NoInteract:
        state: 'True'
      Option:
        state: 'False'
      ESSForceCommit:
        state: 'False'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode
        = Get ( LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation
        for the description of this error code)\" ;\n\t\ttheErrorInfo = \"after commit
        record step\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType
        = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription )
        & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\t\t& \"$~script.section[2] =
        \" & Quote ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n) ]"
      Calculation: "If ( Get ( LastError ) ;\n\tLet ( [\n\t\ttheErrorCode = Get (
        LastError ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for
        the description of this error code)\" ;\n\t\ttheErrorInfo = \"after commit
        record step\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType
        = \" & Quote ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode
        & \" ;¶\"\n\t\t& \"$errorDescription = \" & Quote ( theErrorDescription )
        & \" ;¶\"\n\t\t& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode
        ) ;\n\t\t\t\"$errorInfo = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t&
        \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter
        = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t\t& \"$~script.section
        = \" & Quote ( $~script.section ) & \" ;¶\"\n\t\t& \"$~script.section[2] =
        \" & Quote ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\tTrue\n\t)\n)"
      DisplayCalculation:
        Chunk:
        - If
        - ' ( '
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t"
        - Let
        - " ( [\n\t\ttheErrorCode = "
        - Get
        - ' ( '
        - LastError
        - " ) ;\n\t\ttheErrorDescription = \"(see FileMaker documentation for the
          description of this error code)\" ;\n\t\ttheErrorInfo = \"after commit record
          step\" ;\n\t\ttheErrorType = \"Fmp\" ;\n\t\t\n\t\t$error = \"$errorType
          = \" & "
        - Quote
        - " ( theErrorType ) & \" ;¶\"\n\t\t& \"$errorCode = \" & theErrorCode & \"
          ;¶\"\n\t\t& \"$errorDescription = \" & "
        - Quote
        - " ( theErrorDescription ) & \" ;¶\"\n\t\t& "
        - If
        - ' ( '
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( theErrorInfo ) '
        - and
        - type: NoRef
          __content__: ' '
        - GetAsBoolean
        - " ( theErrorCode ) ;\n\t\t\t\"$errorInfo = \" & "
        - Quote
        - " ( theErrorInfo ) & \" ;¶\"\n\t\t)\n\t\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t\t& \"$~script.section[2] = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t] ;\n\t\t"
        - 'True'
        - "\n\t)\n)"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#End "If there are records in the payload..."'
      Text: End "If there are records in the payload..."
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#========================================'
      Text: ========================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#end section: "PROCESS PAYLOAD"'
      Text: 'end section: "PROCESS PAYLOAD"'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.subtract.start; Value:Get ( CurrentTimeUTCMilliseconds
        ) ]
      Value:
        Calculation: Get ( CurrentTimeUTCMilliseconds )
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.subtract.start
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $~script.section.runtime; Value:( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.start ) / 1000
        -
        $~script.section.subtract.runtime ]
      Value:
        Calculation: |-
          ( Get ( CurrentTimeUTCMilliseconds ) - $~script.section.start ) / 1000
          -
          $~script.section.subtract.runtime
        DisplayCalculation:
          Chunk:
          - '( '
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - |2-
             ) - $~script.section.start ) / 1000
            -
            $~script.section.subtract.runtime
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section.runtime
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = $~script.section & \" end, runtime:
        \" & $~script.section.runtime\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t&
        \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \"
        & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote
        ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp (
        \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 )
        ) & \" ) ;¶\"\n\t\n\t& \"$~script.section = \" & Quote ( $~script.section
        ) & \" ;¶\"\n\t& \"$~script.section.runtime = \" & $~script.section.runtime
        & \" ;¶\"\n\t& \"$~script.section.subtract.runtime = \" & GetAsNumber ( $~script.section.subtract.runtime
        ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = $~script.section & \"
        end, runtime: \" & $~script.section.runtime\n] ;\n\t\"$LogLevel = \" & ~logLevel
        & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName
        = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \"
        & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp
        ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000
        ) ) & \" ) ;¶\"\n\t\n\t& \"$~script.section = \" & Quote ( $~script.section
        ) & \" ;¶\"\n\t& \"$~script.section.runtime = \" & $~script.section.runtime
        & \" ;¶\"\n\t& \"$~script.section.subtract.runtime = \" & GetAsNumber ( $~script.section.subtract.runtime
        ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = $~script.section & \" end, runtime:
          \" & $~script.section.runtime\n] ;\n\t\"$LogLevel = \" & ~logLevel & \"
          ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\t\n\t& \"$~script.section = \" & "
        - Quote
        - " ( $~script.section ) & \" ;¶\"\n\t& \"$~script.section.runtime = \" &
          $~script.section.runtime & \" ;¶\"\n\t& \"$~script.section.subtract.runtime
          = \" & "
        - GetAsNumber
        - |2-
           ( $~script.section.subtract.runtime ) & " ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $~script.subtract.runtime; Value:$~script.subtract.runtime
        +
        $~script.section.subtract.runtime
        +
        ( Get ( CurrentTimeUTCMilliseconds ) - $~script.subtract.start ) / 1000 ]
      Value:
        Calculation: |-
          $~script.subtract.runtime
          +
          $~script.section.subtract.runtime
          +
          ( Get ( CurrentTimeUTCMilliseconds ) - $~script.subtract.start ) / 1000
        DisplayCalculation:
          Chunk:
          - "$~script.subtract.runtime\n+\n$~script.section.subtract.runtime\n+\n( "
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $~script.subtract.start ) / 1000'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.subtract.runtime
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#========================================'
      Text: ========================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"DELETIONS PROCESSING" ]
      Value:
        Calculation: '"DELETIONS PROCESSING"'
        DisplayCalculation:
          Chunk: '"DELETIONS PROCESSING"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the deletions from the payload.'
      Text: Get the deletions from the payload.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: "Set Variable [ $deletions; Value:Let ( [\n\tbeginning = Position
        ( $payload ; \"<deletions>¶\" ; 1 ; 1 ) + 12;\n\tend = Position ( $payload
        ; \"¶</deletions>\" ; Length ( $payload ) ; -1 );\n\tdeletions = Middle (
        $payload ; beginning ; end - beginning );\n\trecords = Trim ( deletions )\n]
        ;\n\tdeletions\n) ]"
      Value:
        Calculation: "Let ( [\n\tbeginning = Position ( $payload ; \"<deletions>¶\"
          ; 1 ; 1 ) + 12;\n\tend = Position ( $payload ; \"¶</deletions>\" ; Length
          ( $payload ) ; -1 );\n\tdeletions = Middle ( $payload ; beginning ; end
          - beginning );\n\trecords = Trim ( deletions )\n] ;\n\tdeletions\n)"
        DisplayCalculation:
          Chunk:
          - Let
          - " ( [\n\tbeginning = "
          - Position
          - " ( $payload ; \"<deletions>¶\" ; 1 ; 1 ) + 12;\n\tend = "
          - Position
          - ' ( $payload ; "¶</deletions>" ; '
          - Length
          - " ( $payload ) ; -1 );\n\tdeletions = "
          - Middle
          - " ( $payload ; beginning ; end - beginning );\n\trecords = "
          - Trim
          - " ( deletions )\n] ;\n\tdeletions\n)"
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $deletions
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Deletions: \" & $deletions\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Deletions:
        \" & $deletions\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"Payload Deletions: \" & $deletions\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - |2-
           ) / 1000 ) ) & " ) ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If there are deletions in the payload...'
      Text: If there are deletions in the payload...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ not IsEmpty ( $deletions ) ]
      Calculation: not IsEmpty ( $deletions )
      DisplayCalculation:
        Chunk:
        - not
        - type: NoRef
          __content__: ' '
        - IsEmpty
        - ' ( $deletions )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Loop over ES layouts to process deletions...'
      Text: Loop over ES layouts to process deletions...
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $layouts; Value:LayoutNames ( ""  /* empty string uses
        the current file */ ) ]
      Value:
        Calculation: LayoutNames ( ""  /* empty string uses the current file */ )
        DisplayCalculation:
          Chunk:
          - LayoutNames
          - ' ( ""  /* empty string uses the current file */ )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $layouts
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $l; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $l
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $layout; Value:GetValue ( $layouts ; $l ) ]
      Value:
        Calculation: GetValue ( $layouts ; $l )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( $layouts ; $l )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $layout
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#If this is a layout based on a sync table ("ES_")...'
      Text: If this is a layout based on a sync table ("ES_")...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Left ( $layout; 3 ) = "ES_" ]
      Calculation: Left ( $layout; 3 ) = "ES_"
      DisplayCalculation:
        Chunk:
        - Left
        - ' ( $layout; 3 ) = "ES_"'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Go to the layout.'
      Text: Go to the layout.
    - enable: 'True'
      id: '6'
      name: Go to Layout
      StepText: Go to Layout [ GetValue ( $layouts ; $l ) ]
      LayoutDestination:
        value: LayoutNameByCalc
      Layout:
        Calculation: GetValue ( $layouts ; $l )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( $layouts ; $l )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Find records in the "deletions" portion of the payload...'
      Text: Find records in the "deletions" portion of the payload...
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#But only find those that really can be deleted, based on the conflict
        resolution method being used...'
      Text: But only find those that really can be deleted, based on the conflict
        resolution method being used...
    - enable: 'True'
      id: '22'
      name: Enter Find Mode
      StepText: Enter Find Mode [  ]
      Pause:
        state: 'False'
      Restore:
        state: 'False'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $d; Value:1 ]
      Value:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $d
    - enable: 'True'
      id: '71'
      name: Loop
      StepText: Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Get the deletion info.'
      Text: Get the deletion info.
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $deletion; Value:GetValue ( $deletions ; $d ) ]
      Value:
        Calculation: GetValue ( $deletions ; $d )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( $deletions ; $d )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $deletion
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $deletion_UUID; Value:GetValue ( Substitute ( $deletion
        ; "|" ; ¶ ) ; 1 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $deletion ; "|" ; ¶ ) ; 1 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $deletion ; "|" ; ¶ ) ; 1 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $deletion_UUID
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $deletion_UTC; Value:GetValue ( Substitute ( $deletion
        ; "|" ; ¶ ) ; 2 ) ]
      Value:
        Calculation: GetValue ( Substitute ( $deletion ; "|" ; ¶ ) ; 2 )
        DisplayCalculation:
          Chunk:
          - GetValue
          - ' ( '
          - Substitute
          - ' ( $deletion ; "|" ; ¶ ) ; 2 )'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $deletion_UTC
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ Get ( LayoutTableName ) & "::ES_Record_UUID";
        $deletion_UUID ]
      Result:
        Calculation: $deletion_UUID
        DisplayCalculation:
          Chunk: $deletion_UUID
      TargetName:
        Calculation: Get ( LayoutTableName ) & "::ES_Record_UUID"
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - LayoutTableName
          - ' ) & "::ES_Record_UUID"'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Here''s where we''re applying conflict resolution to the deletion
        process...'
      Text: Here's where we're applying conflict resolution to the deletion process...
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$conflict_handling = "Server" ]
      Calculation: $$conflict_handling = "Server"
      DisplayCalculation:
        Chunk: $$conflict_handling = "Server"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#In this case, we should only delete if the record hasn''t changed
        on the server since the last pull.'
      Text: In this case, we should only delete if the record hasn't changed on the
        server since the last pull.
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ Get ( LayoutTableName ) & "::ES_UTC_Time"; "<"
        & $last_pull_utc ]
      Result:
        Calculation: '"<" & $last_pull_utc'
        DisplayCalculation:
          Chunk: '"<" & $last_pull_utc'
      TargetName:
        Calculation: Get ( LayoutTableName ) & "::ES_UTC_Time"
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - LayoutTableName
          - ' ) & "::ES_UTC_Time"'
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $$conflict_handling = "Recent" ]
      Calculation: $$conflict_handling = "Recent"
      DisplayCalculation:
        Chunk: $$conflict_handling = "Recent"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#In this case, we should only delete if the record was deleted on
        the mobile after any changes have been made to the hosted record.'
      Text: In this case, we should only delete if the record was deleted on the mobile
        after any changes have been made to the hosted record.
    - enable: 'True'
      id: '147'
      name: Set Field By Name
      StepText: Set Field By Name [ Get ( LayoutTableName ) & "::ES_UTC_Time"; "<"
        & $deletion_UTC ]
      Result:
        Calculation: '"<" & $deletion_UTC'
        DisplayCalculation:
          Chunk: '"<" & $deletion_UTC'
      TargetName:
        Calculation: Get ( LayoutTableName ) & "::ES_UTC_Time"
        DisplayCalculation:
          Chunk:
          - Get
          - ' ( '
          - LayoutTableName
          - ' ) & "::ES_UTC_Time"'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $d; Value:$d + 1 ]
      Value:
        Calculation: $d + 1
        DisplayCalculation:
          Chunk: $d + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $d
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $d > ValueCount ( $deletions ) ]
      Calculation: $d > ValueCount ( $deletions )
      DisplayCalculation:
        Chunk:
        - '$d > '
        - ValueCount
        - ' ( $deletions )'
    - enable: 'True'
      id: '7'
      name: New Record/Request
      StepText: New Record/Request
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /**\n * An error occurred in the above loop\n *\n
        * assign error info to local variables\n * then evaluate the errorCode as
        a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t&
        \"! = \\\"\\\" ] ; $errorCode )\"\n) ) ]"
      Calculation: "/**\n * An error occurred in the above loop\n *\n * assign error
        info to local variables\n * then evaluate the errorCode as a Boolean\n * \n
        */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\"
        ] ; $errorCode )\"\n) )"
      DisplayCalculation:
        Chunk:
        - "/**\n * An error occurred in the above loop\n *\n * assign error info to
          local variables\n * then evaluate the errorCode as a Boolean\n * \n */\n\n"
        - GetAsBoolean
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n)
          )"
    - enable: 'True'
      id: '28'
      name: Perform Find
      StepText: Perform Find [  ]
      Restore:
        state: 'False'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#Delete the records.'
      Text: Delete the records.
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ Get ( FoundCount ) ]
      Calculation: Get ( FoundCount )
      DisplayCalculation:
        Chunk:
        - Get
        - ' ( '
        - FoundCount
        - ' )'
    - enable: 'True'
      id: '10'
      name: Delete All Records
      StepText: |-
        Delete All Records
        [ No dialog ]
      NoInteract:
        state: 'True'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $l; Value:$l + 1 ]
      Value:
        Calculation: $l + 1
        DisplayCalculation:
          Chunk: $l + 1
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $l
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ $l > ValueCount ( $layouts ) ]
      Calculation: $l > ValueCount ( $layouts )
      DisplayCalculation:
        Chunk:
        - '$l > '
        - ValueCount
        - ' ( $layouts )'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#End "Loop over ES layouts to process deletions..."'
      Text: End "Loop over ES layouts to process deletions..."
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: "Exit Loop If [ /**\n * An error occurred in the above loop\n *\n
        * assign error info to local variables\n * then evaluate the errorCode as
        a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t&
        \"! = \\\"\\\" ] ; $errorCode )\"\n) ) ]"
      Calculation: "/**\n * An error occurred in the above loop\n *\n * assign error
        info to local variables\n * then evaluate the errorCode as a Boolean\n * \n
        */\n\nGetAsBoolean ( Evaluate (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\"
        ] ; $errorCode )\"\n) )"
      DisplayCalculation:
        Chunk:
        - "/**\n * An error occurred in the above loop\n *\n * assign error info to
          local variables\n * then evaluate the errorCode as a Boolean\n * \n */\n\n"
        - GetAsBoolean
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n)
          )"
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"CLEANUP" ]
      Value:
        Calculation: '"CLEANUP"'
        DisplayCalculation:
          Chunk: '"CLEANUP"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$delete_payloads = "Successful" ]
      Calculation: $$delete_payloads = "Successful"
      DisplayCalculation:
        Chunk: $$delete_payloads = "Successful"
    - enable: 'True'
      id: '6'
      name: Go to Layout
      StepText: Go to Layout [ "EasySync_Payloads" ]
      LayoutDestination:
        value: LayoutNameByCalc
      Layout:
        id: '0'
        name: ''
        Calculation: '"EasySync_Payloads"'
        DisplayCalculation:
          Chunk: '"EasySync_Payloads"'
    - enable: 'True'
      id: '9'
      name: Delete Record/Request
      StepText: |-
        Delete Record/Request
        [ No dialog ]
      NoInteract:
        state: 'True'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'
      Text: ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '# end single-pass loop for error trapping'
      Text: ' end single-pass loop for error trapping'
    - enable: 'True'
      id: '72'
      name: Exit Loop If
      StepText: Exit Loop If [ True ]
      Calculation: 'True'
      DisplayCalculation:
        Chunk: 'True'
    - enable: 'True'
      id: '73'
      name: End Loop
      StepText: End Loop
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"RESTORE CONTEXT" ]
      Value:
        Calculation: '"RESTORE CONTEXT"'
        DisplayCalculation:
          Chunk: '"RESTORE CONTEXT"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '6'
      name: Go to Layout
      StepText: Go to Layout [ original layout ]
      LayoutDestination:
        value: OriginalLayout
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.section; Value:"HANDLE ERROR" ]
      Value:
        Calculation: '"HANDLE ERROR"'
        DisplayCalculation:
          Chunk: '"HANDLE ERROR"'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.section
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#================================================================================'
      Text: ================================================================================
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: Set Variable [ $~script.runtime; Value:( Get ( CurrentTimeUTCMilliseconds
        ) - $~script.start ) / 1000 ]
      Value:
        Calculation: ( Get ( CurrentTimeUTCMilliseconds ) - $~script.start ) / 1000
        DisplayCalculation:
          Chunk:
          - '( '
          - Get
          - ' ( '
          - CurrentTimeUTCMilliseconds
          - ' ) - $~script.start ) / 1000'
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $~script.runtime
    - enable: 'True'
      id: '68'
      name: If
      StepText: "If [ /**\n * assign error info to local variables\n * then evaluate
        the errorCode as a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let
        ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n) ) ]"
      Calculation: "/**\n * assign error info to local variables\n * then evaluate
        the errorCode as a Boolean\n * \n */\n\nGetAsBoolean ( Evaluate (\n\t\"Let
        ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n) )"
      DisplayCalculation:
        Chunk:
        - "/**\n * assign error info to local variables\n * then evaluate the errorCode
          as a Boolean\n * \n */\n\n"
        - GetAsBoolean
        - ' ( '
        - Evaluate
        - " (\n\t\"Let ( [¶\"\n\t& $error\n\t& \"! = \\\"\\\" ] ; $errorCode )\"\n)
          )"
    - enable: 'True'
      id: '51'
      name: Revert Record/Request
      StepText: |-
        Revert Record/Request
        [ No dialog ]
      NoInteract:
        state: 'True'
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$delete_payloads = "All" ]
      Calculation: $$delete_payloads = "All"
      DisplayCalculation:
        Chunk: $$delete_payloads = "All"
    - enable: 'True'
      id: '6'
      name: Go to Layout
      StepText: Go to Layout [ "EasySync_Payloads" ]
      LayoutDestination:
        value: LayoutNameByCalc
      Layout:
        id: '0'
        name: ''
        Calculation: '"EasySync_Payloads"'
        DisplayCalculation:
          Chunk: '"EasySync_Payloads"'
    - enable: 'True'
      id: '9'
      name: Delete Record/Request
      StepText: |-
        Delete Record/Request
        [ No dialog ]
      NoInteract:
        state: 'True'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '68'
      name: If
      StepText: If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 2 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 2
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 2
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n] ;\n\t\"$LogLevel
        = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote ( ~message ) &
        \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName ) ) & \" ;¶\"\n\t&
        \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter ) ) & \" ;¶\"\n\t&
        \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds
        ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error = \" & Quote ( $error ) & \" ;¶\"\n\t&
        \"$runtime = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error
        = \" & Quote ( $error ) & \" ;¶\"\n\t& \"$runtime = \" & GetAsNumber ( $~script.runtime
        ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 2 ;\n\t~message = \"exit script with error\"\n] ;\n\t\"$LogLevel
          = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$error = \" & "
        - Quote
        - " ( $error ) & \" ;¶\"\n\t& \"$runtime = \" & "
        - GetAsNumber
        - |2-
           ( $~script.runtime ) & " ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '125'
      name: Else If
      StepText: Else If [ $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4 ]
      Calculation: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
      DisplayCalculation:
        Chunk: $$EASYSYNC.SERVER.LOGLEVELTOWRITE ≥ 4
    - enable: 'True'
      id: '1'
      name: Perform Script
      StepText: "Perform Script [ “EasySync Server: Config: Create Log Entry”; Parameter:
        Let ( [\n\t~logLevel = 4 ;\n\t~message = \"exit script without error\"\n]
        ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & Quote
        ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get ( ScriptName
        ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime
        = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n) ]"
      Calculation: "Let ( [\n\t~logLevel = 4 ;\n\t~message = \"exit script without
        error\"\n] ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage
        = \" & Quote ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & Quote ( Get
        ( ScriptName ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & Quote ( Get ( ScriptParameter
        ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & Quote ( GetAsTimestamp
        ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime
        = \" & GetAsNumber ( $~script.runtime ) & \" ;¶\"\n)"
      DisplayCalculation:
        Chunk:
        - Let
        - " ( [\n\t~logLevel = 4 ;\n\t~message = \"exit script without error\"\n]
          ;\n\t\"$LogLevel = \" & ~logLevel & \" ;¶\"\n\t& \"$logMessage = \" & "
        - Quote
        - " ( ~message ) & \" ;¶\"\n\t& \"$ScriptName = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptName
        - " ) ) & \" ;¶\"\n\t& \"$ScriptParameter = \" & "
        - Quote
        - ' ( '
        - Get
        - ' ( '
        - ScriptParameter
        - " ) ) & \" ;¶\"\n\t& \"$TimeStamp = GetAsTimeStamp ( \" & "
        - Quote
        - ' ( '
        - GetAsTimestamp
        - ' ( '
        - Get
        - ' ( '
        - CurrentTimeUTCMilliseconds
        - " ) / 1000 ) ) & \" ) ;¶\"\n\n\t& \"$runtime = \" & "
        - GetAsNumber
        - |2-
           ( $~script.runtime ) & " ;¶"
          )
      Script:
        id: '36'
        name: 'EasySync Server: Config: Create Log Entry'
    - enable: 'True'
      id: '70'
      name: End If
      StepText: End If
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
    - enable: 'True'
      id: '141'
      name: Set Variable
      StepText: |-
        Set Variable [ $!; Value:""
        /**
         * This is a step that will not return an error.
         *
         * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
         * Get ( LastError ) to test if an error occurred with the Perform Script step.
         *
         */ ]
      Value:
        Calculation: |-
          ""
          /**
           * This is a step that will not return an error.
           *
           * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
           * Get ( LastError ) to test if an error occurred with the Perform Script step.
           *
           */
        DisplayCalculation:
          Chunk: |-
            ""
            /**
             * This is a step that will not return an error.
             *
             * It's used to clear any errors reported by Get ( LastError ), so a calling script can use
             * Get ( LastError ) to test if an error occurred with the Perform Script step.
             *
             */
      Repetition:
        Calculation: '1'
        DisplayCalculation:
          Chunk: '1'
      Name: $!
    - enable: 'True'
      id: '103'
      name: Exit Script
      StepText: |-
        Exit Script [ Result: "$error = " & Quote ( $error ) & " ;¶"
        & "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶" ]
      Calculation: |-
        "$error = " & Quote ( $error ) & " ;¶"
        & "$runtime = " & GetAsNumber ( $~script.runtime ) & " ;¶"
      DisplayCalculation:
        Chunk:
        - '"$error = " & '
        - Quote
        - " ( $error ) & \" ;¶\"\n& \"$runtime = \" & "
        - GetAsNumber
        - ' ( $~script.runtime ) & " ;¶"'
    - enable: 'True'
      id: '89'
      name: Comment
      StepText: '#'
