/**
 * =====================================
 * Error ( theErrorType ; theErrorCode ; theErrorDescription ; theErrorInfo )
 *
 * RETURNS:
 *		Let Notation containing information about the error and the environment
 *		it occurred in.
 *
 * PARAMETERS:
 *		theErrorType = (text) origin of the error
 *			(e.g., "Fmp", "App", "Plugin: ScriptMaster", "mFM: JSON", etc.)
 *		theErrorCode = (number) code for the error
 *		theErrorDescription = (text) description of the error, preferably human 
 *			readable and decipherable
 *		theErrorInfo = (text, optional) some text describing the particular
 *			instance of this error. This should help a developer locate where
 *			in a script the error occured.
 *			(e.g., "create new invoice record")
 *
 * DEPENDENCIES:
 *		Custom Functions: #
 *
 * NOTE:
 *		This function contains a recommended set of environmental data, but you
 *		may choose to add or remove name/value pairs from this function as you
 *		see fit for your solution. All error generating custom functions
 *		call this function, so it is the central place to define default
 *		environmental data collected when an error occurs.
 *
 *		Environmental data that is likely to change from the time the error occurs
 *		to the time log data is collected should be included in this function.
 *
 *
 * HISTORY:
 *		MODIFIED on 2015-JAN-22 by Daniel Smith dansmith65@gmail.com
 *			- only encode errorCode if no error
 *		MODIFIED on 2014-JUL-22 by Daniel Smith dansmith65@gmail.com
 *			- add $~script.section
 *			- manually encode common values instead of using # ( name ; value )
 *			  custom function, for performance
 *		MODIFIED on 2013-NOV-22 by Daniel Smith dansmith65@gmail.com
 *			- change name to Error, update documentation
 *		CREATED on 2013-OCT-11 by Daniel Smith dansmith65@gmail.com
 *
 * REFERENCES:
 *		http://filemakerstandards.org/x/AoA-/
 * =====================================
 */

// information about the error
// these should NOT be modified, they should be consistent from one database to the next
"$errorCode = " & theErrorCode & " ;¶"
& If ( theErrorCode ;
	"$errorType = " & Quote ( theErrorType ) & " ;¶"
	& "$errorDescription = " & Quote ( theErrorDescription ) & " ;¶"
	& If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;
		"$errorInfo = " & Quote ( theErrorInfo ) & " ;¶"
	)


// information about the environment
// these values should be adjusted as needed for the database
	& # ( "AllowAbortState" ; Get ( AllowAbortState ) )
//	& # ( "CurrentHostTimestamp" ; Get ( CurrentHostTimeStamp ) )
	& # ( "ErrorCaptureState" ; Get ( ErrorCaptureState ) )
//	& # ( "LastODBCError" ; Get ( LastODBCError ) )
	& # ( "ScriptName" ; Get ( ScriptName ) )
	& # ( "ScriptParameter" ; Get ( ScriptParameter ) )
	& # ( "ScriptResult" ; Get ( ScriptResult ) )
//	& # ( "UserCount" ; Get ( UserCount ) )
	& If ( not IsEmpty ( $~script.section ) ;
		# ( "~script.section" ; $~script.section )
	)
)

---
CustomFunction:
  id: '23'
  functionArity: '4'
  visible: 'True'
  parameters: theErrorType;theErrorCode;theErrorDescription;theErrorInfo
  name: Error
  Calculation: "/**\n * =====================================\n * Error ( theErrorType
    ; theErrorCode ; theErrorDescription ; theErrorInfo )\n *\n * RETURNS:\n *\t\tLet
    Notation containing information about the error and the environment\n *\t\tit
    occurred in.\n *\n * PARAMETERS:\n *\t\ttheErrorType = (text) origin of the error\n
    *\t\t\t(e.g., \"Fmp\", \"App\", \"Plugin: ScriptMaster\", \"mFM: JSON\", etc.)\n
    *\t\ttheErrorCode = (number) code for the error\n *\t\ttheErrorDescription = (text)
    description of the error, preferably human \n *\t\t\treadable and decipherable\n
    *\t\ttheErrorInfo = (text, optional) some text describing the particular\n *\t\t\tinstance
    of this error. This should help a developer locate where\n *\t\t\tin a script
    the error occured.\n *\t\t\t(e.g., \"create new invoice record\")\n *\n * DEPENDENCIES:\n
    *\t\tCustom Functions: #\n *\n * NOTE:\n *\t\tThis function contains a recommended
    set of environmental data, but you\n *\t\tmay choose to add or remove name/value
    pairs from this function as you\n *\t\tsee fit for your solution. All error generating
    custom functions\n *\t\tcall this function, so it is the central place to define
    default\n *\t\tenvironmental data collected when an error occurs.\n *\n *\t\tEnvironmental
    data that is likely to change from the time the error occurs\n *\t\tto the time
    log data is collected should be included in this function.\n *\n *\n * HISTORY:\n
    *\t\tMODIFIED on 2015-JAN-22 by Daniel Smith dansmith65@gmail.com\n *\t\t\t- only
    encode errorCode if no error\n *\t\tMODIFIED on 2014-JUL-22 by Daniel Smith dansmith65@gmail.com\n
    *\t\t\t- add $~script.section\n *\t\t\t- manually encode common values instead
    of using # ( name ; value )\n *\t\t\t  custom function, for performance\n *\t\tMODIFIED
    on 2013-NOV-22 by Daniel Smith dansmith65@gmail.com\n *\t\t\t- change name to
    Error, update documentation\n *\t\tCREATED on 2013-OCT-11 by Daniel Smith dansmith65@gmail.com\n
    *\n * REFERENCES:\n *\t\thttp://filemakerstandards.org/x/AoA-/\n * =====================================\n
    */\n\n// information about the error\n// these should NOT be modified, they should
    be consistent from one database to the next\n\"$errorCode = \" & theErrorCode
    & \" ;¶\"\n& If ( theErrorCode ;\n\t\"$errorType = \" & Quote ( theErrorType )
    & \" ;¶\"\n\t& \"$errorDescription = \" & Quote ( theErrorDescription ) & \" ;¶\"\n\t&
    If ( not IsEmpty ( theErrorInfo ) and GetAsBoolean ( theErrorCode ) ;\n\t\t\"$errorInfo
    = \" & Quote ( theErrorInfo ) & \" ;¶\"\n\t)\n\n\n// information about the environment\n//
    these values should be adjusted as needed for the database\n\t& # ( \"AllowAbortState\"
    ; Get ( AllowAbortState ) )\n//\t& # ( \"CurrentHostTimestamp\" ; Get ( CurrentHostTimeStamp
    ) )\n\t& # ( \"ErrorCaptureState\" ; Get ( ErrorCaptureState ) )\n//\t& # ( \"LastODBCError\"
    ; Get ( LastODBCError ) )\n\t& # ( \"ScriptName\" ; Get ( ScriptName ) )\n\t&
    # ( \"ScriptParameter\" ; Get ( ScriptParameter ) )\n\t& # ( \"ScriptResult\"
    ; Get ( ScriptResult ) )\n//\t& # ( \"UserCount\" ; Get ( UserCount ) )\n\t& If
    ( not IsEmpty ( $~script.section ) ;\n\t\t# ( \"~script.section\" ; $~script.section
    )\n\t)\n)"
  DisplayCalculation:
    Chunk:
    - "/**\n * =====================================\n * Error ( theErrorType ; theErrorCode
      ; theErrorDescription ; theErrorInfo )\n *\n * RETURNS:\n *\t\tLet Notation
      containing information about the error and the environment\n *\t\tit occurred
      in.\n *\n * PARAMETERS:\n *\t\ttheErrorType = (text) origin of the error\n *\t\t\t(e.g.,
      \"Fmp\", \"App\", \"Plugin: ScriptMaster\", \"mFM: JSON\", etc.)\n *\t\ttheErrorCode
      = (number) code for the error\n *\t\ttheErrorDescription = (text) description
      of the error, preferably human \n *\t\t\treadable and decipherable\n *\t\ttheErrorInfo
      = (text, optional) some text describing the particular\n *\t\t\tinstance of
      this error. This should help a developer locate where\n *\t\t\tin a script the
      error occured.\n *\t\t\t(e.g., \"create new invoice record\")\n *\n * DEPENDENCIES:\n
      *\t\tCustom Functions: #\n *\n * NOTE:\n *\t\tThis function contains a recommended
      set of environmental data, but you\n *\t\tmay choose to add or remove name/value
      pairs from this function as you\n *\t\tsee fit for your solution. All error
      generating custom functions\n *\t\tcall this function, so it is the central
      place to define default\n *\t\tenvironmental data collected when an error occurs.\n
      *\n *\t\tEnvironmental data that is likely to change from the time the error
      occurs\n *\t\tto the time log data is collected should be included in this function.\n
      *\n *\n * HISTORY:\n *\t\tMODIFIED on 2015-JAN-22 by Daniel Smith dansmith65@gmail.com\n
      *\t\t\t- only encode errorCode if no error\n *\t\tMODIFIED on 2014-JUL-22 by
      Daniel Smith dansmith65@gmail.com\n *\t\t\t- add $~script.section\n *\t\t\t-
      manually encode common values instead of using # ( name ; value )\n *\t\t\t
      \ custom function, for performance\n *\t\tMODIFIED on 2013-NOV-22 by Daniel
      Smith dansmith65@gmail.com\n *\t\t\t- change name to Error, update documentation\n
      *\t\tCREATED on 2013-OCT-11 by Daniel Smith dansmith65@gmail.com\n *\n * REFERENCES:\n
      *\t\thttp://filemakerstandards.org/x/AoA-/\n * =====================================\n
      */\n\n"
    - |
      // information about the error
    - |
      // these should NOT be modified, they should be consistent from one database to the next
    - "\"$errorCode = \" & theErrorCode & \" ;¶\"\n& "
    - If
    - " ( theErrorCode ;\n\t\"$errorType = \" & "
    - Quote
    - " ( theErrorType ) & \" ;¶\"\n\t& \"$errorDescription = \" & "
    - Quote
    - " ( theErrorDescription ) & \" ;¶\"\n\t& "
    - If
    - ' ( '
    - not
    - type: NoRef
      __content__: ' '
    - IsEmpty
    - ' ( theErrorInfo ) '
    - and
    - type: NoRef
      __content__: ' '
    - GetAsBoolean
    - " ( theErrorCode ) ;\n\t\t\"$errorInfo = \" & "
    - Quote
    - " ( theErrorInfo ) & \" ;¶\"\n\t)\n\n\n"
    - |
      // information about the environment
    - |
      // these values should be adjusted as needed for the database
    - "\t& "
    - '#'
    - ' ( "AllowAbortState" ; '
    - Get
    - ' ( '
    - AllowAbortState
    - |2
       ) )
    - "//\t& # ( \"CurrentHostTimestamp\" ; Get ( CurrentHostTimeStamp ) )\n"
    - "\t& "
    - '#'
    - ' ( "ErrorCaptureState" ; '
    - Get
    - ' ( '
    - ErrorCaptureState
    - |2
       ) )
    - "//\t& # ( \"LastODBCError\" ; Get ( LastODBCError ) )\n"
    - "\t& "
    - '#'
    - ' ( "ScriptName" ; '
    - Get
    - ' ( '
    - ScriptName
    - " ) )\n\t& "
    - '#'
    - ' ( "ScriptParameter" ; '
    - Get
    - ' ( '
    - ScriptParameter
    - " ) )\n\t& "
    - '#'
    - ' ( "ScriptResult" ; '
    - Get
    - ' ( '
    - ScriptResult
    - |2
       ) )
    - "//\t& # ( \"UserCount\" ; Get ( UserCount ) )\n"
    - "\t& "
    - If
    - ' ( '
    - not
    - type: NoRef
      __content__: ' '
    - IsEmpty
    - " ( $~script.section ) ;\n\t\t"
    - '#'
    - " ( \"~script.section\" ; $~script.section )\n\t)\n)"
